
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800576c  0800576c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800576c  0800576c  0001576c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005774  08005774  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005778  08005778  00015778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800577c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  20000060  080057dc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080057dc  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146e2  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002760  00000000  00000000  000347b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7c  00000000  00000000  00038190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c3d  00000000  00000000  0003900c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015783  00000000  00000000  0005fc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fde17  00000000  00000000  000753cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005428  00000000  00000000  001731e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0017860c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005514 	.word	0x08005514

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08005514 	.word	0x08005514

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe2d 	bl	800124e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f858 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f978 	bl	80008ec <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005fc:	f000 f8a0 	bl	8000740 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000600:	f000 f8e8 	bl	80007d4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000604:	f000 f924 	bl	8000850 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 8000608:	481f      	ldr	r0, [pc, #124]	; (8000688 <main+0x9c>)
 800060a:	f002 ffaf 	bl	800356c <HAL_TIM_Base_Start>
  AreYouReadyToPlay();
 800060e:	f000 f9fd 	bl	8000a0c <AreYouReadyToPlay>
  SPITxRx_Setup();
 8000612:	f000 fa25 	bl	8000a60 <SPITxRx_Setup>
  TikTokGame();
 8000616:	f000 fa63 	bl	8000ae0 <TikTokGame>
  LEDdisplay();
 800061a:	f000 fbe5 	bl	8000de8 <LEDdisplay>
  CoinLeftUART();
 800061e:	f000 fc4b 	bl	8000eb8 <CoinLeftUART>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"This game you need to PICK 1 or 2 coins VS our AI(just BOT)\n", strlen("This game you need to PICK 1 or 2 coins VS our AI(just BOT)\n"), HAL_MAX_DELAY);
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	223c      	movs	r2, #60	; 0x3c
 8000628:	4918      	ldr	r1, [pc, #96]	; (800068c <main+0xa0>)
 800062a:	4819      	ldr	r0, [pc, #100]	; (8000690 <main+0xa4>)
 800062c:	f003 fb5a 	bl	8003ce4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Who pick the last coin Win!!\n", strlen("Who pick the last coin Win!!\n"), HAL_MAX_DELAY);
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	221d      	movs	r2, #29
 8000636:	4917      	ldr	r1, [pc, #92]	; (8000694 <main+0xa8>)
 8000638:	4815      	ldr	r0, [pc, #84]	; (8000690 <main+0xa4>)
 800063a:	f003 fb53 	bl	8003ce4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"If you're ready please type\n", strlen("If you're ready please type\n"), HAL_MAX_DELAY);
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	221c      	movs	r2, #28
 8000644:	4914      	ldr	r1, [pc, #80]	; (8000698 <main+0xac>)
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <main+0xa4>)
 8000648:	f003 fb4c 	bl	8003ce4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"I wanna play this game so bad\n", strlen("I wanna play this game so bad\n"), HAL_MAX_DELAY);
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	221e      	movs	r2, #30
 8000652:	4912      	ldr	r1, [pc, #72]	; (800069c <main+0xb0>)
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <main+0xa4>)
 8000656:	f003 fb45 	bl	8003ce4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"and now you can join", strlen("and now you can join"), HAL_MAX_DELAY);
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
 800065e:	2214      	movs	r2, #20
 8000660:	490f      	ldr	r1, [pc, #60]	; (80006a0 <main+0xb4>)
 8000662:	480b      	ldr	r0, [pc, #44]	; (8000690 <main+0xa4>)
 8000664:	f003 fb3e 	bl	8003ce4 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AreYouReadyToPlay();
 8000668:	f000 f9d0 	bl	8000a0c <AreYouReadyToPlay>
	  while (ReadyToPlay == 1) {
 800066c:	e007      	b.n	800067e <main+0x92>
	      SPITxRx_readIO();
 800066e:	f000 fa0d 	bl	8000a8c <SPITxRx_readIO>
	      TikTokGame();
 8000672:	f000 fa35 	bl	8000ae0 <TikTokGame>
	      CoinLeftUART();
 8000676:	f000 fc1f 	bl	8000eb8 <CoinLeftUART>
	      LEDdisplay();
 800067a:	f000 fbb5 	bl	8000de8 <LEDdisplay>
	  while (ReadyToPlay == 1) {
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <main+0xb8>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d0f3      	beq.n	800066e <main+0x82>
	  AreYouReadyToPlay();
 8000686:	e7ef      	b.n	8000668 <main+0x7c>
 8000688:	20000174 	.word	0x20000174
 800068c:	0800552c 	.word	0x0800552c
 8000690:	2000007c 	.word	0x2000007c
 8000694:	0800556c 	.word	0x0800556c
 8000698:	0800558c 	.word	0x0800558c
 800069c:	080055ac 	.word	0x080055ac
 80006a0:	080055cc 	.word	0x080055cc
 80006a4:	20000240 	.word	0x20000240

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b094      	sub	sp, #80	; 0x50
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2238      	movs	r2, #56	; 0x38
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 faa8 	bl	8004c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f001 f99e 	bl	8001a0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ea:	2355      	movs	r3, #85	; 0x55
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fa38 	bl	8001b74 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800070a:	f000 fc05 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2303      	movs	r3, #3
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2104      	movs	r1, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f001 fd36 	bl	8002198 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000732:	f000 fbf1 	bl	8000f18 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3750      	adds	r7, #80	; 0x50
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000746:	4a22      	ldr	r2, [pc, #136]	; (80007d0 <MX_LPUART1_UART_Init+0x90>)
 8000748:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000750:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000782:	4812      	ldr	r0, [pc, #72]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000784:	f003 fa5e 	bl	8003c44 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 fbc3 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 8000796:	f004 f94f 	bl	8004a38 <HAL_UARTEx_SetTxFifoThreshold>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007a0:	f000 fbba 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4809      	ldr	r0, [pc, #36]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	f004 f984 	bl	8004ab4 <HAL_UARTEx_SetRxFifoThreshold>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007b2:	f000 fbb1 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	f004 f905 	bl	80049c6 <HAL_UARTEx_DisableFifoMode>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007c2:	f000 fba9 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000007c 	.word	0x2000007c
 80007d0:	40008000 	.word	0x40008000

080007d4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_SPI3_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_SPI3_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_SPI3_Init+0x74>)
 80007e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_SPI3_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI3_Init+0x74>)
 80007ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI3_Init+0x74>)
 8000802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000806:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI3_Init+0x74>)
 800080a:	2238      	movs	r2, #56	; 0x38
 800080c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI3_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_SPI3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI3_Init+0x74>)
 8000822:	2207      	movs	r2, #7
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_SPI3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI3_Init+0x74>)
 800082e:	2208      	movs	r2, #8
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_SPI3_Init+0x74>)
 8000834:	f002 f91a 	bl	8002a6c <HAL_SPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800083e:	f000 fb6b 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000110 	.word	0x20000110
 800084c:	40003c00 	.word	0x40003c00

08000850 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800086e:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000870:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <MX_TIM3_Init+0x98>)
 8000872:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000876:	f244 2267 	movw	r2, #16999	; 0x4267
 800087a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_TIM3_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000884:	2263      	movs	r2, #99	; 0x63
 8000886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_TIM3_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_TIM3_Init+0x94>)
 8000896:	f002 fe11 	bl	80034bc <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008a0:	f000 fb3a 	bl	8000f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_TIM3_Init+0x94>)
 80008b2:	f002 fecb 	bl	800364c <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008bc:	f000 fb2c 	bl	8000f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_TIM3_Init+0x94>)
 80008ce:	f003 f923 	bl	8003b18 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 fb1e 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000174 	.word	0x20000174
 80008e8:	40000400 	.word	0x40000400

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4a3e      	ldr	r2, [pc, #248]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4b3c      	ldr	r3, [pc, #240]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0304 	and.w	r3, r3, #4
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <MX_GPIO_Init+0x114>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a38      	ldr	r2, [pc, #224]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000920:	f043 0320 	orr.w	r3, r3, #32
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b36      	ldr	r3, [pc, #216]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0320 	and.w	r3, r3, #32
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a32      	ldr	r2, [pc, #200]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <MX_GPIO_Init+0x114>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b2a      	ldr	r3, [pc, #168]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	4a26      	ldr	r2, [pc, #152]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <MX_GPIO_Init+0x114>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2120      	movs	r1, #32
 800097e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000982:	f001 f807 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2104      	movs	r1, #4
 800098a:	481e      	ldr	r0, [pc, #120]	; (8000a04 <MX_GPIO_Init+0x118>)
 800098c:	f001 f802 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4818      	ldr	r0, [pc, #96]	; (8000a08 <MX_GPIO_Init+0x11c>)
 80009a8:	f000 fe5a 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009ac:	2320      	movs	r3, #32
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c6:	f000 fe4b 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ca:	2304      	movs	r3, #4
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4808      	ldr	r0, [pc, #32]	; (8000a04 <MX_GPIO_Init+0x118>)
 80009e2:	f000 fe3d 	bl	8001660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2028      	movs	r0, #40	; 0x28
 80009ec:	f000 fd9d 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f0:	2028      	movs	r0, #40	; 0x28
 80009f2:	f000 fdb4 	bl	800155e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	; 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000c00 	.word	0x48000c00
 8000a08:	48000800 	.word	0x48000800

08000a0c <AreYouReadyToPlay>:

/* USER CODE BEGIN 4 */
void AreYouReadyToPlay() {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
    memset(RxBuffer, 0, sizeof(RxBuffer)); // Clear the receive buffer
 8000a12:	225a      	movs	r2, #90	; 0x5a
 8000a14:	2100      	movs	r1, #0
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <AreYouReadyToPlay+0x44>)
 8000a18:	f004 f8f8 	bl	8004c0c <memset>

    HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, RxBuffer, sizeof(RxBuffer) - 1, HAL_MAX_DELAY);
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	2259      	movs	r2, #89	; 0x59
 8000a22:	490b      	ldr	r1, [pc, #44]	; (8000a50 <AreYouReadyToPlay+0x44>)
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <AreYouReadyToPlay+0x48>)
 8000a26:	f003 f9eb 	bl	8003e00 <HAL_UART_Receive>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]

    if (status == HAL_OK && strcmp((char*)RxBuffer, "I wanna play this game so bad") == 0) {//correct condition
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d109      	bne.n	8000a48 <AreYouReadyToPlay+0x3c>
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <AreYouReadyToPlay+0x4c>)
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <AreYouReadyToPlay+0x44>)
 8000a38:	f7ff fbf2 	bl	8000220 <strcmp>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <AreYouReadyToPlay+0x3c>
    	ReadyToPlay=1; //you are ready to play
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <AreYouReadyToPlay+0x50>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	601a      	str	r2, [r3, #0]
    }
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200001e4 	.word	0x200001e4
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	080055e4 	.word	0x080055e4
 8000a5c:	20000240 	.word	0x20000240

08000a60 <SPITxRx_Setup>:

void SPITxRx_Setup()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a64:	2200      	movs	r2, #0
 8000a66:	2104      	movs	r1, #4
 8000a68:	4807      	ldr	r0, [pc, #28]	; (8000a88 <SPITxRx_Setup+0x28>)
 8000a6a:	f000 ff93 	bl	8001994 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8000a6e:	2005      	movs	r0, #5
 8000a70:	f000 fc5e 	bl	8001330 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000a74:	2201      	movs	r2, #1
 8000a76:	2104      	movs	r1, #4
 8000a78:	4803      	ldr	r0, [pc, #12]	; (8000a88 <SPITxRx_Setup+0x28>)
 8000a7a:	f000 ff8b 	bl	8001994 <HAL_GPIO_WritePin>
HAL_Delay(5);
 8000a7e:	2005      	movs	r0, #5
 8000a80:	f000 fc56 	bl	8001330 <HAL_Delay>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	48000c00 	.word	0x48000c00

08000a8c <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000a90:	2104      	movs	r1, #4
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <SPITxRx_readIO+0x44>)
 8000a94:	f000 ff66 	bl	8001964 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d016      	beq.n	8000acc <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <SPITxRx_readIO+0x44>)
 8000aa4:	f000 ff76 	bl	8001994 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000aaa:	2241      	movs	r2, #65	; 0x41
 8000aac:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000ab0:	2212      	movs	r2, #18
 8000ab2:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SPITxRx_readIO+0x4c>)
 8000ac4:	4903      	ldr	r1, [pc, #12]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <SPITxRx_readIO+0x50>)
 8000ac8:	f002 f87c 	bl	8002bc4 <HAL_SPI_TransmitReceive_IT>
}
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	48000c00 	.word	0x48000c00
 8000ad4:	200001cc 	.word	0x200001cc
 8000ad8:	200001c0 	.word	0x200001c0
 8000adc:	20000110 	.word	0x20000110

08000ae0 <TikTokGame>:

void TikTokGame()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 8000ae4:	4ba1      	ldr	r3, [pc, #644]	; (8000d6c <TikTokGame+0x28c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f040 811b 	bne.w	8000d24 <TikTokGame+0x244>
    {
    	switch (game_left) {
 8000aee:	4ba0      	ldr	r3, [pc, #640]	; (8000d70 <TikTokGame+0x290>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	f200 8165 	bhi.w	8000dc4 <TikTokGame+0x2e4>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <TikTokGame+0x20>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000ca1 	.word	0x08000ca1
 8000b04:	08000c1d 	.word	0x08000c1d
 8000b08:	08000b99 	.word	0x08000b99
 8000b0c:	08000dc5 	.word	0x08000dc5
 8000b10:	08000b15 	.word	0x08000b15
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 8000b14:	4b97      	ldr	r3, [pc, #604]	; (8000d74 <TikTokGame+0x294>)
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d83a      	bhi.n	8000b94 <TikTokGame+0xb4>
 8000b1e:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <TikTokGame+0x44>)
 8000b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b24:	08000b6d 	.word	0x08000b6d
 8000b28:	08000b95 	.word	0x08000b95
 8000b2c:	08000b53 	.word	0x08000b53
 8000b30:	08000b39 	.word	0x08000b39
 8000b34:	08000b95 	.word	0x08000b95
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000b38:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <TikTokGame+0x298>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000b3e:	4b8c      	ldr	r3, [pc, #560]	; (8000d70 <TikTokGame+0x290>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b44:	4b8d      	ldr	r3, [pc, #564]	; (8000d7c <TikTokGame+0x29c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b4a:	4b88      	ldr	r3, [pc, #544]	; (8000d6c <TikTokGame+0x28c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
    	                break;
 8000b50:	e021      	b.n	8000b96 <TikTokGame+0xb6>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000b52:	4b89      	ldr	r3, [pc, #548]	; (8000d78 <TikTokGame+0x298>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 8000b58:	4b85      	ldr	r3, [pc, #532]	; (8000d70 <TikTokGame+0x290>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b5e:	4b87      	ldr	r3, [pc, #540]	; (8000d7c <TikTokGame+0x29c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b64:	4b81      	ldr	r3, [pc, #516]	; (8000d6c <TikTokGame+0x28c>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
    	                break;
 8000b6a:	e014      	b.n	8000b96 <TikTokGame+0xb6>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000b6c:	4b82      	ldr	r3, [pc, #520]	; (8000d78 <TikTokGame+0x298>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000b72:	4b7f      	ldr	r3, [pc, #508]	; (8000d70 <TikTokGame+0x290>)
 8000b74:	2205      	movs	r2, #5
 8000b76:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b78:	4b80      	ldr	r3, [pc, #512]	; (8000d7c <TikTokGame+0x29c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000b7e:	4b7b      	ldr	r3, [pc, #492]	; (8000d6c <TikTokGame+0x28c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	221c      	movs	r2, #28
 8000b8a:	497d      	ldr	r1, [pc, #500]	; (8000d80 <TikTokGame+0x2a0>)
 8000b8c:	487d      	ldr	r0, [pc, #500]	; (8000d84 <TikTokGame+0x2a4>)
 8000b8e:	f003 f8a9 	bl	8003ce4 <HAL_UART_Transmit>
    	                break;
 8000b92:	e000      	b.n	8000b96 <TikTokGame+0xb6>
    	            default: // multi press do nothing
    	                break;
 8000b94:	bf00      	nop
    	        }
    	        break;
 8000b96:	e115      	b.n	8000dc4 <TikTokGame+0x2e4>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 8000b98:	4b76      	ldr	r3, [pc, #472]	; (8000d74 <TikTokGame+0x294>)
 8000b9a:	789b      	ldrb	r3, [r3, #2]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	d83a      	bhi.n	8000c18 <TikTokGame+0x138>
 8000ba2:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <TikTokGame+0xc8>)
 8000ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba8:	08000bf1 	.word	0x08000bf1
 8000bac:	08000c19 	.word	0x08000c19
 8000bb0:	08000bd7 	.word	0x08000bd7
 8000bb4:	08000bbd 	.word	0x08000bbd
 8000bb8:	08000c19 	.word	0x08000c19
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000bbc:	4b6e      	ldr	r3, [pc, #440]	; (8000d78 <TikTokGame+0x298>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000bc2:	4b6b      	ldr	r3, [pc, #428]	; (8000d70 <TikTokGame+0x290>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000bc8:	4b6c      	ldr	r3, [pc, #432]	; (8000d7c <TikTokGame+0x29c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000bce:	4b67      	ldr	r3, [pc, #412]	; (8000d6c <TikTokGame+0x28c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
    	                break;
 8000bd4:	e021      	b.n	8000c1a <TikTokGame+0x13a>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000bd6:	4b68      	ldr	r3, [pc, #416]	; (8000d78 <TikTokGame+0x298>)
 8000bd8:	2202      	movs	r2, #2
 8000bda:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000bdc:	4b64      	ldr	r3, [pc, #400]	; (8000d70 <TikTokGame+0x290>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000be2:	4b66      	ldr	r3, [pc, #408]	; (8000d7c <TikTokGame+0x29c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000be8:	4b60      	ldr	r3, [pc, #384]	; (8000d6c <TikTokGame+0x28c>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
    	                break;
 8000bee:	e014      	b.n	8000c1a <TikTokGame+0x13a>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000bf0:	4b61      	ldr	r3, [pc, #388]	; (8000d78 <TikTokGame+0x298>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000bf6:	4b5e      	ldr	r3, [pc, #376]	; (8000d70 <TikTokGame+0x290>)
 8000bf8:	2205      	movs	r2, #5
 8000bfa:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000bfc:	4b5f      	ldr	r3, [pc, #380]	; (8000d7c <TikTokGame+0x29c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000c02:	4b5a      	ldr	r3, [pc, #360]	; (8000d6c <TikTokGame+0x28c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	221c      	movs	r2, #28
 8000c0e:	495c      	ldr	r1, [pc, #368]	; (8000d80 <TikTokGame+0x2a0>)
 8000c10:	485c      	ldr	r0, [pc, #368]	; (8000d84 <TikTokGame+0x2a4>)
 8000c12:	f003 f867 	bl	8003ce4 <HAL_UART_Transmit>
    	                break;
 8000c16:	e000      	b.n	8000c1a <TikTokGame+0x13a>
    	            default: // multi press do nothing
    	                break;
 8000c18:	bf00      	nop
    	        }
    	        break;
 8000c1a:	e0d3      	b.n	8000dc4 <TikTokGame+0x2e4>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000c1c:	4b55      	ldr	r3, [pc, #340]	; (8000d74 <TikTokGame+0x294>)
 8000c1e:	789b      	ldrb	r3, [r3, #2]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d83a      	bhi.n	8000c9c <TikTokGame+0x1bc>
 8000c26:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <TikTokGame+0x14c>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000c75 	.word	0x08000c75
 8000c30:	08000c9d 	.word	0x08000c9d
 8000c34:	08000c5b 	.word	0x08000c5b
 8000c38:	08000c41 	.word	0x08000c41
 8000c3c:	08000c9d 	.word	0x08000c9d
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000c40:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <TikTokGame+0x298>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000c46:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <TikTokGame+0x290>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c4c:	4b4b      	ldr	r3, [pc, #300]	; (8000d7c <TikTokGame+0x29c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000c52:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <TikTokGame+0x28c>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
    	                break;
 8000c58:	e021      	b.n	8000c9e <TikTokGame+0x1be>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000c5a:	4b47      	ldr	r3, [pc, #284]	; (8000d78 <TikTokGame+0x298>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000c60:	4b43      	ldr	r3, [pc, #268]	; (8000d70 <TikTokGame+0x290>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000c66:	4b45      	ldr	r3, [pc, #276]	; (8000d7c <TikTokGame+0x29c>)
 8000c68:	2202      	movs	r2, #2
 8000c6a:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <TikTokGame+0x28c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
    	                break;
 8000c72:	e014      	b.n	8000c9e <TikTokGame+0x1be>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000c74:	4b40      	ldr	r3, [pc, #256]	; (8000d78 <TikTokGame+0x298>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000c7a:	4b3d      	ldr	r3, [pc, #244]	; (8000d70 <TikTokGame+0x290>)
 8000c7c:	2205      	movs	r2, #5
 8000c7e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c80:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <TikTokGame+0x29c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000c86:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <TikTokGame+0x28c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	221c      	movs	r2, #28
 8000c92:	493b      	ldr	r1, [pc, #236]	; (8000d80 <TikTokGame+0x2a0>)
 8000c94:	483b      	ldr	r0, [pc, #236]	; (8000d84 <TikTokGame+0x2a4>)
 8000c96:	f003 f825 	bl	8003ce4 <HAL_UART_Transmit>
    	                break;
 8000c9a:	e000      	b.n	8000c9e <TikTokGame+0x1be>
    	            default: // multi press do nothing
    	                break;
 8000c9c:	bf00      	nop
    	        }
    	        break;
 8000c9e:	e091      	b.n	8000dc4 <TikTokGame+0x2e4>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000ca0:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <TikTokGame+0x294>)
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	d83a      	bhi.n	8000d20 <TikTokGame+0x240>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <TikTokGame+0x1d0>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000cf9 	.word	0x08000cf9
 8000cb4:	08000d21 	.word	0x08000d21
 8000cb8:	08000cdf 	.word	0x08000cdf
 8000cbc:	08000cc5 	.word	0x08000cc5
 8000cc0:	08000d21 	.word	0x08000d21
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000cc4:	4b2c      	ldr	r3, [pc, #176]	; (8000d78 <TikTokGame+0x298>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000cca:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <TikTokGame+0x290>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000cd0:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <TikTokGame+0x29c>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <TikTokGame+0x28c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
    	                break;
 8000cdc:	e021      	b.n	8000d22 <TikTokGame+0x242>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <TikTokGame+0x298>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <TikTokGame+0x290>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000cea:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <TikTokGame+0x29c>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <TikTokGame+0x28c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
    	                break;
 8000cf6:	e014      	b.n	8000d22 <TikTokGame+0x242>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <TikTokGame+0x298>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <TikTokGame+0x290>)
 8000d00:	2205      	movs	r2, #5
 8000d02:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <TikTokGame+0x29c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <TikTokGame+0x28c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	221c      	movs	r2, #28
 8000d16:	491a      	ldr	r1, [pc, #104]	; (8000d80 <TikTokGame+0x2a0>)
 8000d18:	481a      	ldr	r0, [pc, #104]	; (8000d84 <TikTokGame+0x2a4>)
 8000d1a:	f002 ffe3 	bl	8003ce4 <HAL_UART_Transmit>
    	                break;
 8000d1e:	e000      	b.n	8000d22 <TikTokGame+0x242>
    	            default: // multi press do nothing
    	                break;
 8000d20:	bf00      	nop
    	        }
    	        break;
 8000d22:	e04f      	b.n	8000dc4 <TikTokGame+0x2e4>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <TikTokGame+0x290>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d840      	bhi.n	8000db0 <TikTokGame+0x2d0>
 8000d2e:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <TikTokGame+0x254>)
 8000d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d34:	08000d9d 	.word	0x08000d9d
 8000d38:	08000d89 	.word	0x08000d89
 8000d3c:	08000d59 	.word	0x08000d59
 8000d40:	08000d45 	.word	0x08000d45
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <TikTokGame+0x298>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <TikTokGame+0x290>)
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000d50:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <TikTokGame+0x29c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
                break;
 8000d56:	e02b      	b.n	8000db0 <TikTokGame+0x2d0>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <TikTokGame+0x298>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <TikTokGame+0x290>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <TikTokGame+0x29c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
                break;
 8000d6a:	e021      	b.n	8000db0 <TikTokGame+0x2d0>
 8000d6c:	200001dc 	.word	0x200001dc
 8000d70:	20000000 	.word	0x20000000
 8000d74:	200001c0 	.word	0x200001c0
 8000d78:	200001e0 	.word	0x200001e0
 8000d7c:	200001d8 	.word	0x200001d8
 8000d80:	08005604 	.word	0x08005604
 8000d84:	2000007c 	.word	0x2000007c
            case 2:
                // statements
                game_pick = 2; // pick2
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <TikTokGame+0x2f0>)
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <TikTokGame+0x2f4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000d94:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <TikTokGame+0x2f8>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
                break;
 8000d9a:	e009      	b.n	8000db0 <TikTokGame+0x2d0>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <TikTokGame+0x2f0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <TikTokGame+0x2f4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <TikTokGame+0x2f8>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
                break;
 8000dae:	bf00      	nop
        }
        game_turn = 0;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <TikTokGame+0x2fc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000db6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dba:	221c      	movs	r2, #28
 8000dbc:	4908      	ldr	r1, [pc, #32]	; (8000de0 <TikTokGame+0x300>)
 8000dbe:	4809      	ldr	r0, [pc, #36]	; (8000de4 <TikTokGame+0x304>)
 8000dc0:	f002 ff90 	bl	8003ce4 <HAL_UART_Transmit>
    }
    HAL_Delay(200);//delay
 8000dc4:	20c8      	movs	r0, #200	; 0xc8
 8000dc6:	f000 fab3 	bl	8001330 <HAL_Delay>
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001e0 	.word	0x200001e0
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	200001d8 	.word	0x200001d8
 8000ddc:	200001dc 	.word	0x200001dc
 8000de0:	08005604 	.word	0x08005604
 8000de4:	2000007c 	.word	0x2000007c

08000de8 <LEDdisplay>:

void LEDdisplay() {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	switch (game_winner) {
 8000dec:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <LEDdisplay+0xa8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d028      	beq.n	8000e46 <LEDdisplay+0x5e>
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	dc49      	bgt.n	8000e8c <LEDdisplay+0xa4>
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d046      	beq.n	8000e8a <LEDdisplay+0xa2>
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d000      	beq.n	8000e02 <LEDdisplay+0x1a>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\n", strlen("But now what?? Let's play again I know You still fun\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
	            break;
	    }
}
 8000e00:	e044      	b.n	8000e8c <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <LEDdisplay+0xac>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <LEDdisplay+0xb0>)
 8000e0a:	2205      	movs	r2, #5
 8000e0c:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <LEDdisplay+0xa8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000e14:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <LEDdisplay+0xb4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI Win!! Humanity Lost!\n", strlen("AI Win!! Humanity Lost!\n"), HAL_MAX_DELAY);
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1e:	2218      	movs	r2, #24
 8000e20:	491f      	ldr	r1, [pc, #124]	; (8000ea0 <LEDdisplay+0xb8>)
 8000e22:	4820      	ldr	r0, [pc, #128]	; (8000ea4 <LEDdisplay+0xbc>)
 8000e24:	f002 ff5e 	bl	8003ce4 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Try again we believe in you\n", strlen("Try again we believe in you\n"), HAL_MAX_DELAY);
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	221c      	movs	r2, #28
 8000e2e:	491e      	ldr	r1, [pc, #120]	; (8000ea8 <LEDdisplay+0xc0>)
 8000e30:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <LEDdisplay+0xbc>)
 8000e32:	f002 ff57 	bl	8003ce4 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	2228      	movs	r2, #40	; 0x28
 8000e3c:	491b      	ldr	r1, [pc, #108]	; (8000eac <LEDdisplay+0xc4>)
 8000e3e:	4819      	ldr	r0, [pc, #100]	; (8000ea4 <LEDdisplay+0xbc>)
 8000e40:	f002 ff50 	bl	8003ce4 <HAL_UART_Transmit>
	            break;
 8000e44:	e022      	b.n	8000e8c <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <LEDdisplay+0xac>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <LEDdisplay+0xb0>)
 8000e4e:	2205      	movs	r2, #5
 8000e50:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <LEDdisplay+0xa8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <LEDdisplay+0xb4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	221c      	movs	r2, #28
 8000e64:	4912      	ldr	r1, [pc, #72]	; (8000eb0 <LEDdisplay+0xc8>)
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <LEDdisplay+0xbc>)
 8000e68:	f002 ff3c 	bl	8003ce4 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\n", strlen("But now what?? Let's play again I know You still fun\n"), HAL_MAX_DELAY);
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	2235      	movs	r2, #53	; 0x35
 8000e72:	4910      	ldr	r1, [pc, #64]	; (8000eb4 <LEDdisplay+0xcc>)
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <LEDdisplay+0xbc>)
 8000e76:	f002 ff35 	bl	8003ce4 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2228      	movs	r2, #40	; 0x28
 8000e80:	490a      	ldr	r1, [pc, #40]	; (8000eac <LEDdisplay+0xc4>)
 8000e82:	4808      	ldr	r0, [pc, #32]	; (8000ea4 <LEDdisplay+0xbc>)
 8000e84:	f002 ff2e 	bl	8003ce4 <HAL_UART_Transmit>
	            break;
 8000e88:	e000      	b.n	8000e8c <LEDdisplay+0xa4>
	            break;
 8000e8a:	bf00      	nop
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001d8 	.word	0x200001d8
 8000e94:	200001e0 	.word	0x200001e0
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	200001dc 	.word	0x200001dc
 8000ea0:	08005624 	.word	0x08005624
 8000ea4:	2000007c 	.word	0x2000007c
 8000ea8:	08005640 	.word	0x08005640
 8000eac:	08005660 	.word	0x08005660
 8000eb0:	0800568c 	.word	0x0800568c
 8000eb4:	080056ac 	.word	0x080056ac

08000eb8 <CoinLeftUART>:
void CoinLeftUART() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
	 char coin_left_message[30]; // Buffer to store the message
	    sprintf(coin_left_message, "Coin left is %d\r\n", game_left); // Use \r\n for proper newline
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <CoinLeftUART+0x34>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	490a      	ldr	r1, [pc, #40]	; (8000ef0 <CoinLeftUART+0x38>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 fe80 	bl	8004bcc <siprintf>
	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)coin_left_message, strlen(coin_left_message), HAL_MAX_DELAY);
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f9b0 	bl	8000234 <strlen>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4639      	mov	r1, r7
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <CoinLeftUART+0x3c>)
 8000ee0:	f002 ff00 	bl	8003ce4 <HAL_UART_Transmit>
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	080056e4 	.word	0x080056e4
 8000ef4:	2000007c 	.word	0x2000007c

08000ef8 <HAL_SPI_TxRxCpltCallback>:
//	}
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	4803      	ldr	r0, [pc, #12]	; (8000f14 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000f06:	f000 fd45 	bl	8001994 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	48000c00 	.word	0x48000c00

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_MspInit+0x44>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_MspInit+0x44>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6613      	str	r3, [r2, #96]	; 0x60
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x44>)
 8000f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x44>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x44>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x44>)
 8000f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f5a:	f000 fdfb 	bl	8001b54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b09e      	sub	sp, #120	; 0x78
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2254      	movs	r2, #84	; 0x54
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f003 fe3d 	bl	8004c0c <memset>
  if(huart->Instance==LPUART1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <HAL_UART_MspInit+0xa8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d136      	bne.n	800100a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f9c:	2320      	movs	r3, #32
 8000f9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fb11 	bl	80025d0 <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fb4:	f7ff ffb0 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_UART_MspInit+0xac>)
 8000fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fbc:	4a16      	ldr	r2, [pc, #88]	; (8001018 <HAL_UART_MspInit+0xac>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_UART_MspInit+0xac>)
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0xac>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_UART_MspInit+0xac>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_MspInit+0xac>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001000:	4619      	mov	r1, r3
 8001002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001006:	f000 fb2b 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3778      	adds	r7, #120	; 0x78
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40008000 	.word	0x40008000
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <HAL_SPI_MspInit+0x8c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d130      	bne.n	80010a0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_SPI_MspInit+0x90>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a1a      	ldr	r2, [pc, #104]	; (80010ac <HAL_SPI_MspInit+0x90>)
 8001044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_SPI_MspInit+0x90>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_SPI_MspInit+0x90>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <HAL_SPI_MspInit+0x90>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_SPI_MspInit+0x90>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800106e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001080:	2306      	movs	r3, #6
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4809      	ldr	r0, [pc, #36]	; (80010b0 <HAL_SPI_MspInit+0x94>)
 800108c:	f000 fae8 	bl	8001660 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2033      	movs	r0, #51	; 0x33
 8001096:	f000 fa48 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800109a:	2033      	movs	r0, #51	; 0x33
 800109c:	f000 fa5f 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40003c00 	.word	0x40003c00
 80010ac:	40021000 	.word	0x40021000
 80010b0:	48000800 	.word	0x48000800

080010b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_TIM_Base_MspInit+0x38>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10b      	bne.n	80010de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_TIM_Base_MspInit+0x3c>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_TIM_Base_MspInit+0x3c>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_TIM_Base_MspInit+0x3c>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40000400 	.word	0x40000400
 80010f0:	40021000 	.word	0x40021000

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f8d8 	bl	80012f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800114c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001150:	f000 fc38 	bl	80019c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <SPI3_IRQHandler+0x10>)
 800115e:	f001 fddf 	bl	8002d20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000110 	.word	0x20000110

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f003 fd3e 	bl	8004c1c <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20020000 	.word	0x20020000
 80011cc:	00000400 	.word	0x00000400
 80011d0:	20000244 	.word	0x20000244
 80011d4:	20000398 	.word	0x20000398

080011d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SystemInit+0x20>)
 80011de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <SystemInit+0x20>)
 80011e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001200:	f7ff ffea 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopForever+0x6>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopForever+0xe>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopForever+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f003 fcfd 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800122e:	f7ff f9dd 	bl	80005ec <main>

08001232 <LoopForever>:

LoopForever:
    b LoopForever
 8001232:	e7fe      	b.n	8001232 <LoopForever>
  ldr   r0, =_estack
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001240:	0800577c 	.word	0x0800577c
  ldr r2, =_sbss
 8001244:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001248:	20000394 	.word	0x20000394

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>

0800124e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001258:	2003      	movs	r0, #3
 800125a:	f000 f95b 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f80e 	bl	8001280 <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	71fb      	strb	r3, [r7, #7]
 800126e:	e001      	b.n	8001274 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001270:	f7ff fe58 	bl	8000f24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001274:	79fb      	ldrb	r3, [r7, #7]

}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_InitTick+0x68>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d022      	beq.n	80012da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_InitTick+0x6c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_InitTick+0x68>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f966 	bl	800157a <HAL_SYSTICK_Config>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10f      	bne.n	80012d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	d809      	bhi.n	80012ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ba:	2200      	movs	r2, #0
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	f04f 30ff 	mov.w	r0, #4294967295
 80012c2:	f000 f932 	bl	800152a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_InitTick+0x70>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	e007      	b.n	80012de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	e004      	b.n	80012de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e001      	b.n	80012de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000000c 	.word	0x2000000c
 80012ec:	20000004 	.word	0x20000004
 80012f0:	20000008 	.word	0x20000008

080012f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_IncTick+0x1c>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x20>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4413      	add	r3, r2
 8001302:	4a03      	ldr	r2, [pc, #12]	; (8001310 <HAL_IncTick+0x1c>)
 8001304:	6013      	str	r3, [r2, #0]
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	20000248 	.word	0x20000248
 8001314:	2000000c 	.word	0x2000000c

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000248 	.word	0x20000248

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d004      	beq.n	8001354 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_Delay+0x40>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4413      	add	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001354:	bf00      	nop
 8001356:	f7ff ffdf 	bl	8001318 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	429a      	cmp	r2, r3
 8001364:	d8f7      	bhi.n	8001356 <HAL_Delay+0x26>
  {
  }
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000000c 	.word	0x2000000c

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	; (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff40 	bl	80013bc <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff33 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa4 	bl	80014d0 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d00d      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2204      	movs	r2, #4
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e047      	b.n	8001656 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 020e 	bic.w	r2, r2, #14
 80015d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0201 	bic.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 021f 	and.w	r2, r3, #31
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001612:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00c      	beq.n	8001636 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001634:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
    }
  }
  return status;
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800166e:	e15a      	b.n	8001926 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2101      	movs	r1, #1
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 814c 	beq.w	8001920 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d005      	beq.n	80016a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800169c:	2b02      	cmp	r3, #2
 800169e:	d130      	bne.n	8001702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 0201 	and.w	r2, r3, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b03      	cmp	r3, #3
 800170c:	d017      	beq.n	800173e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d123      	bne.n	8001792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	6939      	ldr	r1, [r7, #16]
 800178e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0203 	and.w	r2, r3, #3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80a6 	beq.w	8001920 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d4:	4b5b      	ldr	r3, [pc, #364]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 80017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d8:	4a5a      	ldr	r2, [pc, #360]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6613      	str	r3, [r2, #96]	; 0x60
 80017e0:	4b58      	ldr	r3, [pc, #352]	; (8001944 <HAL_GPIO_Init+0x2e4>)
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ec:	4a56      	ldr	r2, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001816:	d01f      	beq.n	8001858 <HAL_GPIO_Init+0x1f8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x2ec>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d019      	beq.n	8001854 <HAL_GPIO_Init+0x1f4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x2f0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d013      	beq.n	8001850 <HAL_GPIO_Init+0x1f0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2f4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d00d      	beq.n	800184c <HAL_GPIO_Init+0x1ec>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_GPIO_Init+0x2f8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d007      	beq.n	8001848 <HAL_GPIO_Init+0x1e8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_GPIO_Init+0x2fc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d101      	bne.n	8001844 <HAL_GPIO_Init+0x1e4>
 8001840:	2305      	movs	r3, #5
 8001842:	e00a      	b.n	800185a <HAL_GPIO_Init+0x1fa>
 8001844:	2306      	movs	r3, #6
 8001846:	e008      	b.n	800185a <HAL_GPIO_Init+0x1fa>
 8001848:	2304      	movs	r3, #4
 800184a:	e006      	b.n	800185a <HAL_GPIO_Init+0x1fa>
 800184c:	2303      	movs	r3, #3
 800184e:	e004      	b.n	800185a <HAL_GPIO_Init+0x1fa>
 8001850:	2302      	movs	r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x1fa>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <HAL_GPIO_Init+0x1fa>
 8001858:	2300      	movs	r3, #0
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	f002 0203 	and.w	r2, r2, #3
 8001860:	0092      	lsls	r2, r2, #2
 8001862:	4093      	lsls	r3, r2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800186a:	4937      	ldr	r1, [pc, #220]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	3302      	adds	r3, #2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001878:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_GPIO_Init+0x300>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800189c:	4a30      	ldr	r2, [pc, #192]	; (8001960 <HAL_GPIO_Init+0x300>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018c6:	4a26      	ldr	r2, [pc, #152]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018cc:	4b24      	ldr	r3, [pc, #144]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f0:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <HAL_GPIO_Init+0x300>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_GPIO_Init+0x300>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3301      	adds	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	f47f ae9d 	bne.w	8001670 <HAL_GPIO_Init+0x10>
  }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000
 8001948:	40010000 	.word	0x40010000
 800194c:	48000400 	.word	0x48000400
 8001950:	48000800 	.word	0x48000800
 8001954:	48000c00 	.word	0x48000c00
 8001958:	48001000 	.word	0x48001000
 800195c:	48001400 	.word	0x48001400
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d002      	beq.n	8001982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e001      	b.n	8001986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001986:	7bfb      	ldrb	r3, [r7, #15]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f806 	bl	80019f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d141      	bne.n	8001a9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	d131      	bne.n	8001a8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a28:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2e:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a40:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a48:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2232      	movs	r2, #50	; 0x32
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	0c9b      	lsrs	r3, r3, #18
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5e:	e002      	b.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d102      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f2      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a7a:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a86:	d158      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e057      	b.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a92:	4a2d      	ldr	r2, [pc, #180]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a9c:	e04d      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d141      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab2:	d131      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2232      	movs	r2, #50	; 0x32
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	0c9b      	lsrs	r3, r3, #18
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aea:	e002      	b.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d102      	bne.n	8001b06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f2      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d112      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e011      	b.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b28:	e007      	b.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	431bde83 	.word	0x431bde83

08001b54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b62:	6093      	str	r3, [r2, #8]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40007000 	.word	0x40007000

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e2fe      	b.n	8002184 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d075      	beq.n	8001c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b92:	4b97      	ldr	r3, [pc, #604]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9c:	4b94      	ldr	r3, [pc, #592]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3e>
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x44>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d10b      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d05b      	beq.n	8001c7c <HAL_RCC_OscConfig+0x108>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d157      	bne.n	8001c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e2d9      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d106      	bne.n	8001be8 <HAL_RCC_OscConfig+0x74>
 8001bda:	4b85      	ldr	r3, [pc, #532]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a84      	ldr	r2, [pc, #528]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01d      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x98>
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a7e      	ldr	r2, [pc, #504]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b7c      	ldr	r3, [pc, #496]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a7b      	ldr	r2, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a74      	ldr	r2, [pc, #464]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fb74 	bl	8001318 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fb70 	bl	8001318 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e29e      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4b6a      	ldr	r3, [pc, #424]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0xc0>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb60 	bl	8001318 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fb5c 	bl	8001318 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e28a      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0xe8>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d075      	beq.n	8001d76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c8a:	4b59      	ldr	r3, [pc, #356]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c94:	4b56      	ldr	r3, [pc, #344]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d102      	bne.n	8001caa <HAL_RCC_OscConfig+0x136>
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d002      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x13c>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11f      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x154>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e25d      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	061b      	lsls	r3, r3, #24
 8001cd6:	4946      	ldr	r1, [pc, #280]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cdc:	4b45      	ldr	r3, [pc, #276]	; (8001df4 <HAL_RCC_OscConfig+0x280>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff facd 	bl	8001280 <HAL_InitTick>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d043      	beq.n	8001d74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e249      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d023      	beq.n	8001d40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb08 	bl	8001318 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fb04 	bl	8001318 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e232      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1e:	4b34      	ldr	r3, [pc, #208]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b31      	ldr	r3, [pc, #196]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	061b      	lsls	r3, r3, #24
 8001d38:	492d      	ldr	r1, [pc, #180]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
 8001d3e:	e01a      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a2a      	ldr	r2, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fae4 	bl	8001318 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d54:	f7ff fae0 	bl	8001318 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e20e      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x1e0>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d041      	beq.n	8001e06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fabd 	bl	8001318 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da2:	f7ff fab9 	bl	8001318 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e1e7      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db4:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0ef      	beq.n	8001da2 <HAL_RCC_OscConfig+0x22e>
 8001dc2:	e020      	b.n	8001e06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd4:	f7ff faa0 	bl	8001318 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dda:	e00d      	b.n	8001df8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fa9c 	bl	8001318 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d906      	bls.n	8001df8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e1ca      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df8:	4b8c      	ldr	r3, [pc, #560]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ea      	bne.n	8001ddc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80a6 	beq.w	8001f60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e18:	4b84      	ldr	r3, [pc, #528]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2b4>
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0x2b6>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00d      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3a:	4b7c      	ldr	r3, [pc, #496]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e46:	2301      	movs	r3, #1
 8001e48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4a:	4b79      	ldr	r3, [pc, #484]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d118      	bne.n	8001e88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e62:	f7ff fa59 	bl	8001318 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6a:	f7ff fa55 	bl	8001318 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e183      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7c:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x4bc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d108      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x32e>
 8001e90:	4b66      	ldr	r3, [pc, #408]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a65      	ldr	r2, [pc, #404]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea0:	e024      	b.n	8001eec <HAL_RCC_OscConfig+0x378>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b05      	cmp	r3, #5
 8001ea8:	d110      	bne.n	8001ecc <HAL_RCC_OscConfig+0x358>
 8001eaa:	4b60      	ldr	r3, [pc, #384]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	4a5e      	ldr	r2, [pc, #376]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f043 0304 	orr.w	r3, r3, #4
 8001eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eba:	4b5c      	ldr	r3, [pc, #368]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	4a5a      	ldr	r2, [pc, #360]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eca:	e00f      	b.n	8001eec <HAL_RCC_OscConfig+0x378>
 8001ecc:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	4a56      	ldr	r2, [pc, #344]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	4a52      	ldr	r2, [pc, #328]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d016      	beq.n	8001f22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fa10 	bl	8001318 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efc:	f7ff fa0c 	bl	8001318 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e138      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f12:	4b46      	ldr	r3, [pc, #280]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ed      	beq.n	8001efc <HAL_RCC_OscConfig+0x388>
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f7ff f9f9 	bl	8001318 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff f9f5 	bl	8001318 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e121      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ed      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d03c      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01c      	beq.n	8001fae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f74:	4b2d      	ldr	r3, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f7a:	4a2c      	ldr	r2, [pc, #176]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f84:	f7ff f9c8 	bl	8001318 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8c:	f7ff f9c4 	bl	8001318 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0f2      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ef      	beq.n	8001f8c <HAL_RCC_OscConfig+0x418>
 8001fac:	e01b      	b.n	8001fe6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbe:	f7ff f9ab 	bl	8001318 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc6:	f7ff f9a7 	bl	8001318 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0d5      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1ef      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 80c9 	beq.w	8002182 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff0:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	f000 8083 	beq.w	8002104 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d15e      	bne.n	80020c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_RCC_OscConfig+0x4b8>)
 800200c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f981 	bl	8001318 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002018:	e00c      	b.n	8002034 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff f97d 	bl	8001318 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d905      	bls.n	8002034 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0ab      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
 800202c:	40021000 	.word	0x40021000
 8002030:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	4b55      	ldr	r3, [pc, #340]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ec      	bne.n	800201a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002040:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4b52      	ldr	r3, [pc, #328]	; (8002190 <HAL_RCC_OscConfig+0x61c>)
 8002046:	4013      	ands	r3, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6a11      	ldr	r1, [r2, #32]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002050:	3a01      	subs	r2, #1
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800205a:	0212      	lsls	r2, r2, #8
 800205c:	4311      	orrs	r1, r2
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002062:	0852      	lsrs	r2, r2, #1
 8002064:	3a01      	subs	r2, #1
 8002066:	0552      	lsls	r2, r2, #21
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800206e:	0852      	lsrs	r2, r2, #1
 8002070:	3a01      	subs	r2, #1
 8002072:	0652      	lsls	r2, r2, #25
 8002074:	4311      	orrs	r1, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800207a:	06d2      	lsls	r2, r2, #27
 800207c:	430a      	orrs	r2, r1
 800207e:	4943      	ldr	r1, [pc, #268]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002080:	4313      	orrs	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b41      	ldr	r3, [pc, #260]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a40      	ldr	r2, [pc, #256]	; (800218c <HAL_RCC_OscConfig+0x618>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002090:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a3d      	ldr	r2, [pc, #244]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f93c 	bl	8001318 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff f938 	bl	8001318 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e066      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x530>
 80020c2:	e05e      	b.n	8002182 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d0:	f7ff f922 	bl	8001318 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff f91e 	bl	8001318 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04c      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4924      	ldr	r1, [pc, #144]	; (800218c <HAL_RCC_OscConfig+0x618>)
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_OscConfig+0x620>)
 80020fe:	4013      	ands	r3, r2
 8002100:	60cb      	str	r3, [r1, #12]
 8002102:	e03e      	b.n	8002182 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e039      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_OscConfig+0x618>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 0203 	and.w	r2, r3, #3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	429a      	cmp	r2, r3
 8002122:	d12c      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	3b01      	subs	r3, #1
 8002130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	429a      	cmp	r2, r3
 8002134:	d123      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d11b      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d113      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d109      	bne.n	800217e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	019f800c 	.word	0x019f800c
 8002194:	feeefffc 	.word	0xfeeefffc

08002198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e11e      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b91      	ldr	r3, [pc, #580]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b8e      	ldr	r3, [pc, #568]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	498c      	ldr	r1, [pc, #560]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b8a      	ldr	r3, [pc, #552]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e106      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d073      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d129      	bne.n	8002248 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f4:	4b81      	ldr	r3, [pc, #516]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0f4      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002204:	f000 f99e 	bl	8002544 <RCC_GetSysClockFreqFromPLLSource>
 8002208:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <HAL_RCC_ClockConfig+0x268>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d93f      	bls.n	8002292 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002212:	4b7a      	ldr	r3, [pc, #488]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002226:	2b00      	cmp	r3, #0
 8002228:	d033      	beq.n	8002292 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12f      	bne.n	8002292 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002232:	4b72      	ldr	r3, [pc, #456]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800223a:	4a70      	ldr	r2, [pc, #448]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 800223c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002240:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e024      	b.n	8002292 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d107      	bne.n	8002260 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d109      	bne.n	8002270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0c6      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	4b66      	ldr	r3, [pc, #408]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0be      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002270:	f000 f8ce 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 8002274:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4a61      	ldr	r2, [pc, #388]	; (8002400 <HAL_RCC_ClockConfig+0x268>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d909      	bls.n	8002292 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800227e:	4b5f      	ldr	r3, [pc, #380]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002286:	4a5d      	ldr	r2, [pc, #372]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b5a      	ldr	r3, [pc, #360]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4957      	ldr	r1, [pc, #348]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a4:	f7ff f838 	bl	8001318 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7ff f834 	bl	8001318 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e095      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d023      	beq.n	8002328 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002304:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800230c:	4a3b      	ldr	r2, [pc, #236]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 800230e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002312:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002314:	4b39      	ldr	r3, [pc, #228]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4936      	ldr	r1, [pc, #216]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
 8002326:	e008      	b.n	800233a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b80      	cmp	r3, #128	; 0x80
 800232c:	d105      	bne.n	800233a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800232e:	4b33      	ldr	r3, [pc, #204]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002338:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d21d      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 020f 	bic.w	r2, r3, #15
 8002350:	4929      	ldr	r1, [pc, #164]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002358:	f7fe ffde 	bl	8001318 <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7fe ffda 	bl	8001318 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e03b      	b.n	80023ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_RCC_ClockConfig+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d1ed      	bne.n	8002360 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4917      	ldr	r1, [pc, #92]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490f      	ldr	r1, [pc, #60]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023c2:	f000 f825 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_RCC_ClockConfig+0x264>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490c      	ldr	r1, [pc, #48]	; (8002404 <HAL_RCC_ClockConfig+0x26c>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	fa22 f303 	lsr.w	r3, r2, r3
 80023de:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x270>)
 80023e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_RCC_ClockConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe ff4a 	bl	8001280 <HAL_InitTick>
 80023ec:	4603      	mov	r3, r0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40021000 	.word	0x40021000
 8002400:	04c4b400 	.word	0x04c4b400
 8002404:	080056f8 	.word	0x080056f8
 8002408:	20000004 	.word	0x20000004
 800240c:	20000008 	.word	0x20000008

08002410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002416:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d102      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e047      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d102      	bne.n	800243a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	e03e      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d136      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d10c      	bne.n	800247e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246e:	68d2      	ldr	r2, [r2, #12]
 8002470:	0a12      	lsrs	r2, r2, #8
 8002472:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	617b      	str	r3, [r7, #20]
      break;
 800247c:	e00c      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800247e:	4a13      	ldr	r2, [pc, #76]	; (80024cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	4a10      	ldr	r2, [pc, #64]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002488:	68d2      	ldr	r2, [r2, #12]
 800248a:	0a12      	lsrs	r2, r2, #8
 800248c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0e5b      	lsrs	r3, r3, #25
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	3301      	adds	r3, #1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	e001      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024b8:	693b      	ldr	r3, [r7, #16]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	016e3600 	.word	0x016e3600

080024d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d8:	4b03      	ldr	r3, [pc, #12]	; (80024e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80024da:	681b      	ldr	r3, [r3, #0]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	20000004 	.word	0x20000004

080024ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024f0:	f7ff fff0 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4904      	ldr	r1, [pc, #16]	; (8002514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08005708 	.word	0x08005708

08002518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800251c:	f7ff ffda 	bl	80024d4 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0adb      	lsrs	r3, r3, #11
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4904      	ldr	r1, [pc, #16]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	f003 031f 	and.w	r3, r3, #31
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000
 8002540:	08005708 	.word	0x08005708

08002544 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002544:	b480      	push	{r7}
 8002546:	b087      	sub	sp, #28
 8002548:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3301      	adds	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d10c      	bne.n	8002582 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002572:	68d2      	ldr	r2, [r2, #12]
 8002574:	0a12      	lsrs	r2, r2, #8
 8002576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
    break;
 8002580:	e00c      	b.n	800259c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	0a12      	lsrs	r2, r2, #8
 8002590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
    break;
 800259a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0e5b      	lsrs	r3, r3, #25
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025b6:	687b      	ldr	r3, [r7, #4]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	016e3600 	.word	0x016e3600
 80025cc:	00f42400 	.word	0x00f42400

080025d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d8:	2300      	movs	r3, #0
 80025da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025dc:	2300      	movs	r3, #0
 80025de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8098 	beq.w	800271e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b40      	ldr	r3, [pc, #256]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	6593      	str	r3, [r2, #88]	; 0x58
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261a:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a39      	ldr	r2, [pc, #228]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002626:	f7fe fe77 	bl	8001318 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800262c:	e009      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fe73 	bl	8001318 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d902      	bls.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	74fb      	strb	r3, [r7, #19]
        break;
 8002640:	e005      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0ef      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800264e:	7cfb      	ldrb	r3, [r7, #19]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d159      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01e      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	d019      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800267a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800267c:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a1b      	ldr	r2, [pc, #108]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800269c:	4a18      	ldr	r2, [pc, #96]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fe33 	bl	8001318 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b4:	e00b      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fe2f 	bl	8001318 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d902      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	74fb      	strb	r3, [r7, #19]
            break;
 80026cc:	e006      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0ec      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e2:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026f8:	e008      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	74bb      	strb	r3, [r7, #18]
 80026fe:	e005      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002700:	40021000 	.word	0x40021000
 8002704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270c:	7c7b      	ldrb	r3, [r7, #17]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d105      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002712:	4ba7      	ldr	r3, [pc, #668]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4aa6      	ldr	r2, [pc, #664]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272a:	4ba1      	ldr	r3, [pc, #644]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	f023 0203 	bic.w	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	499d      	ldr	r1, [pc, #628]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00a      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800274c:	4b98      	ldr	r3, [pc, #608]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f023 020c 	bic.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4995      	ldr	r1, [pc, #596]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00a      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800276e:	4b90      	ldr	r3, [pc, #576]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002774:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	498c      	ldr	r1, [pc, #560]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00a      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002790:	4b87      	ldr	r3, [pc, #540]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002796:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	4984      	ldr	r1, [pc, #528]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027b2:	4b7f      	ldr	r3, [pc, #508]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	497b      	ldr	r1, [pc, #492]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027d4:	4b76      	ldr	r3, [pc, #472]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	4973      	ldr	r1, [pc, #460]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f6:	4b6e      	ldr	r3, [pc, #440]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	496a      	ldr	r1, [pc, #424]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002818:	4b65      	ldr	r3, [pc, #404]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4962      	ldr	r1, [pc, #392]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	4959      	ldr	r1, [pc, #356]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800285c:	4b54      	ldr	r3, [pc, #336]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286a:	4951      	ldr	r1, [pc, #324]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	4948      	ldr	r1, [pc, #288]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028a0:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4940      	ldr	r1, [pc, #256]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028d8:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	4932      	ldr	r1, [pc, #200]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002916:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291e:	4924      	ldr	r1, [pc, #144]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	4916      	ldr	r1, [pc, #88]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002972:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d019      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299e:	d109      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a02      	ldr	r2, [pc, #8]	; (80029b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
 80029ac:	e002      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4926      	ldr	r1, [pc, #152]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a20      	ldr	r2, [pc, #128]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a06:	4918      	ldr	r1, [pc, #96]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a30:	4b0d      	ldr	r3, [pc, #52]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	490a      	ldr	r1, [pc, #40]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a04      	ldr	r2, [pc, #16]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40021000 	.word	0x40021000

08002a6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e09d      	b.n	8002bba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d108      	bne.n	8002a98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8e:	d009      	beq.n	8002aa4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
 8002a96:	e005      	b.n	8002aa4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe faac 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ae4:	d902      	bls.n	8002aec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e002      	b.n	8002af2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002afa:	d007      	beq.n	8002b0c <HAL_SPI_Init+0xa0>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b04:	d002      	beq.n	8002b0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b44:	431a      	orrs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	ea42 0103 	orr.w	r1, r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	f003 0204 	and.w	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b88:	ea42 0103 	orr.w	r1, r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bdc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002be4:	7dbb      	ldrb	r3, [r7, #22]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d00d      	beq.n	8002c06 <HAL_SPI_TransmitReceive_IT+0x42>
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bf0:	d106      	bne.n	8002c00 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002bfa:	7dbb      	ldrb	r3, [r7, #22]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d002      	beq.n	8002c06 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002c00:	2302      	movs	r3, #2
 8002c02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c04:	e07d      	b.n	8002d02 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_SPI_TransmitReceive_IT+0x54>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_SPI_TransmitReceive_IT+0x54>
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c1c:	e071      	b.n	8002d02 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_SPI_TransmitReceive_IT+0x68>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e06b      	b.n	8002d04 <HAL_SPI_TransmitReceive_IT+0x140>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d003      	beq.n	8002c48 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2205      	movs	r2, #5
 8002c44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	887a      	ldrh	r2, [r7, #2]
 8002c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	887a      	ldrh	r2, [r7, #2]
 8002c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c7e:	d906      	bls.n	8002c8e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002c84:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002c8a:	651a      	str	r2, [r3, #80]	; 0x50
 8002c8c:	e005      	b.n	8002c9a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002c92:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <HAL_SPI_TransmitReceive_IT+0x158>)
 8002c98:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca2:	d802      	bhi.n	8002caa <HAL_SPI_TransmitReceive_IT+0xe6>
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d908      	bls.n	8002cbc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e007      	b.n	8002ccc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cca:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d007      	beq.n	8002cea <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002d00:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	371c      	adds	r7, #28
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	080030ab 	.word	0x080030ab
 8002d14:	08003111 	.word	0x08003111
 8002d18:	08002f5b 	.word	0x08002f5b
 8002d1c:	08003019 	.word	0x08003019

08002d20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10e      	bne.n	8002d60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d009      	beq.n	8002d60 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
    return;
 8002d5e:	e0ce      	b.n	8002efe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_SPI_IRQHandler+0x5e>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	4798      	blx	r3
    return;
 8002d7c:	e0bf      	b.n	8002efe <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f003 0320 	and.w	r3, r3, #32
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <HAL_SPI_IRQHandler+0x7e>
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 80b0 	beq.w	8002efe <HAL_SPI_IRQHandler+0x1de>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80aa 	beq.w	8002efe <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d023      	beq.n	8002dfc <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d011      	beq.n	8002de4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc4:	f043 0204 	orr.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	e00b      	b.n	8002dfc <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]
        return;
 8002dfa:	e080      	b.n	8002efe <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d014      	beq.n	8002e30 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00c      	beq.n	8002e54 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	f043 0208 	orr.w	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d04f      	beq.n	8002efc <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e6a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_SPI_IRQHandler+0x168>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d034      	beq.n	8002ef2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0203 	bic.w	r2, r2, #3
 8002e96:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d011      	beq.n	8002ec4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_SPI_IRQHandler+0x1e4>)
 8002ea6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fb70 	bl	8001592 <HAL_DMA_Abort_IT>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d016      	beq.n	8002efa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <HAL_SPI_IRQHandler+0x1e4>)
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe fb5a 	bl	8001592 <HAL_DMA_Abort_IT>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002ef0:	e003      	b.n	8002efa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f812 	bl	8002f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ef8:	e000      	b.n	8002efc <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002efa:	bf00      	nop
    return;
 8002efc:	bf00      	nop
  }
}
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	08002f31 	.word	0x08002f31

08002f08 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff ffe5 	bl	8002f1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d923      	bls.n	8002fb6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	1c9a      	adds	r2, r3, #2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	3b02      	subs	r3, #2
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d11f      	bne.n	8002fe4 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	e016      	b.n	8002fe4 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f103 020c 	add.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	b2d2      	uxtb	r2, r2
 8002fc6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10f      	bne.n	8003010 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ffe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa14 	bl	8003438 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d912      	bls.n	8003050 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	881a      	ldrh	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303a:	1c9a      	adds	r2, r3, #2
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b02      	subs	r3, #2
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800304e:	e012      	b.n	8003076 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d110      	bne.n	80030a2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800308e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f9cb 	bl	8003438 <SPI_CloseRxTx_ISR>
    }
  }
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	b292      	uxth	r2, r2
 80030be:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	1c9a      	adds	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	3b01      	subs	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f998 	bl	8003438 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d110      	bne.n	8003168 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003154:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f968 	bl	8003438 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003180:	f7fe f8ca 	bl	8001318 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4413      	add	r3, r2
 800318e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003190:	f7fe f8c2 	bl	8001318 <HAL_GetTick>
 8003194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	015b      	lsls	r3, r3, #5
 800319c:	0d1b      	lsrs	r3, r3, #20
 800319e:	69fa      	ldr	r2, [r7, #28]
 80031a0:	fb02 f303 	mul.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031a6:	e054      	b.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ae:	d050      	beq.n	8003252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031b0:	f7fe f8b2 	bl	8001318 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d902      	bls.n	80031c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d13d      	bne.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031de:	d111      	bne.n	8003204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e8:	d004      	beq.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d107      	bne.n	8003204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320c:	d10f      	bne.n	800322e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800322c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e017      	b.n	8003272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3b01      	subs	r3, #1
 8003250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	bf0c      	ite	eq
 8003262:	2301      	moveq	r3, #1
 8003264:	2300      	movne	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	429a      	cmp	r2, r3
 800326e:	d19b      	bne.n	80031a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000004 	.word	0x20000004

08003280 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003292:	f7fe f841 	bl	8001318 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032a2:	f7fe f839 	bl	8001318 <HAL_GetTick>
 80032a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	330c      	adds	r3, #12
 80032ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032b0:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00da      	lsls	r2, r3, #3
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	0d1b      	lsrs	r3, r3, #20
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	fb02 f303 	mul.w	r3, r2, r3
 80032c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032c8:	e060      	b.n	800338c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032d0:	d107      	bne.n	80032e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d050      	beq.n	800338c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032ea:	f7fe f815 	bl	8001318 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d902      	bls.n	8003300 <SPI_WaitFifoStateUntilTimeout+0x80>
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d13d      	bne.n	800337c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685a      	ldr	r2, [r3, #4]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800330e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003318:	d111      	bne.n	800333e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003322:	d004      	beq.n	800332e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332c:	d107      	bne.n	800333e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800333c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d10f      	bne.n	8003368 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003366:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e010      	b.n	800339e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	3b01      	subs	r3, #1
 800338a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	429a      	cmp	r2, r3
 800339a:	d196      	bne.n	80032ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3728      	adds	r7, #40	; 0x28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000004 	.word	0x20000004

080033ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2200      	movs	r2, #0
 80033c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff ff5b 	bl	8003280 <SPI_WaitFifoStateUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	f043 0220 	orr.w	r2, r3, #32
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e027      	b.n	8003430 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2180      	movs	r1, #128	; 0x80
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f7ff fec0 	bl	8003170 <SPI_WaitFlagStateUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033fa:	f043 0220 	orr.w	r2, r3, #32
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e014      	b.n	8003430 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f7ff ff34 	bl	8003280 <SPI_WaitFifoStateUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d007      	beq.n	800342e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e000      	b.n	8003430 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003440:	f7fd ff6a 	bl	8001318 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0220 	bic.w	r2, r2, #32
 8003454:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	2164      	movs	r1, #100	; 0x64
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ffa6 	bl	80033ac <SPI_EndRxTxTransaction>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d005      	beq.n	8003472 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	2b00      	cmp	r3, #0
 8003478:	d115      	bne.n	80034a6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b04      	cmp	r3, #4
 8003484:	d107      	bne.n	8003496 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff fd3a 	bl	8002f08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003494:	e00e      	b.n	80034b4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd fd2a 	bl	8000ef8 <HAL_SPI_TxRxCpltCallback>
}
 80034a4:	e006      	b.n	80034b4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fd34 	bl	8002f1c <HAL_SPI_ErrorCallback>
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e049      	b.n	8003562 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fde6 	bl	80010b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 f9bc 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d001      	beq.n	8003584 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04c      	b.n	800361e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a26      	ldr	r2, [pc, #152]	; (800362c <HAL_TIM_Base_Start+0xc0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d022      	beq.n	80035dc <HAL_TIM_Base_Start+0x70>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d01d      	beq.n	80035dc <HAL_TIM_Base_Start+0x70>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a22      	ldr	r2, [pc, #136]	; (8003630 <HAL_TIM_Base_Start+0xc4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_TIM_Base_Start+0x70>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a21      	ldr	r2, [pc, #132]	; (8003634 <HAL_TIM_Base_Start+0xc8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d013      	beq.n	80035dc <HAL_TIM_Base_Start+0x70>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1f      	ldr	r2, [pc, #124]	; (8003638 <HAL_TIM_Base_Start+0xcc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_TIM_Base_Start+0x70>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <HAL_TIM_Base_Start+0xd0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_TIM_Base_Start+0x70>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1c      	ldr	r2, [pc, #112]	; (8003640 <HAL_TIM_Base_Start+0xd4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_Base_Start+0x70>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1b      	ldr	r2, [pc, #108]	; (8003644 <HAL_TIM_Base_Start+0xd8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d115      	bne.n	8003608 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_TIM_Base_Start+0xdc>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d015      	beq.n	800361a <HAL_TIM_Base_Start+0xae>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f4:	d011      	beq.n	800361a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f042 0201 	orr.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003606:	e008      	b.n	800361a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e000      	b.n	800361c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800
 8003638:	40000c00 	.word	0x40000c00
 800363c:	40013400 	.word	0x40013400
 8003640:	40014000 	.word	0x40014000
 8003644:	40015000 	.word	0x40015000
 8003648:	00010007 	.word	0x00010007

0800364c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_TIM_ConfigClockSource+0x1c>
 8003664:	2302      	movs	r3, #2
 8003666:	e0f6      	b.n	8003856 <HAL_TIM_ConfigClockSource+0x20a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003686:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800368a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a6f      	ldr	r2, [pc, #444]	; (8003860 <HAL_TIM_ConfigClockSource+0x214>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	f000 80c1 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 80036a8:	4a6d      	ldr	r2, [pc, #436]	; (8003860 <HAL_TIM_ConfigClockSource+0x214>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	f200 80c6 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 80036b0:	4a6c      	ldr	r2, [pc, #432]	; (8003864 <HAL_TIM_ConfigClockSource+0x218>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f000 80b9 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 80036b8:	4a6a      	ldr	r2, [pc, #424]	; (8003864 <HAL_TIM_ConfigClockSource+0x218>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	f200 80be 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 80036c0:	4a69      	ldr	r2, [pc, #420]	; (8003868 <HAL_TIM_ConfigClockSource+0x21c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	f000 80b1 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 80036c8:	4a67      	ldr	r2, [pc, #412]	; (8003868 <HAL_TIM_ConfigClockSource+0x21c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	f200 80b6 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 80036d0:	4a66      	ldr	r2, [pc, #408]	; (800386c <HAL_TIM_ConfigClockSource+0x220>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	f000 80a9 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 80036d8:	4a64      	ldr	r2, [pc, #400]	; (800386c <HAL_TIM_ConfigClockSource+0x220>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	f200 80ae 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 80036e0:	4a63      	ldr	r2, [pc, #396]	; (8003870 <HAL_TIM_ConfigClockSource+0x224>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	f000 80a1 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 80036e8:	4a61      	ldr	r2, [pc, #388]	; (8003870 <HAL_TIM_ConfigClockSource+0x224>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	f200 80a6 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 80036f0:	4a60      	ldr	r2, [pc, #384]	; (8003874 <HAL_TIM_ConfigClockSource+0x228>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	f000 8099 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 80036f8:	4a5e      	ldr	r2, [pc, #376]	; (8003874 <HAL_TIM_ConfigClockSource+0x228>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	f200 809e 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 8003700:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003704:	f000 8091 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 8003708:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800370c:	f200 8096 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 8003710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003714:	f000 8089 	beq.w	800382a <HAL_TIM_ConfigClockSource+0x1de>
 8003718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371c:	f200 808e 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 8003720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003724:	d03e      	beq.n	80037a4 <HAL_TIM_ConfigClockSource+0x158>
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	f200 8087 	bhi.w	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	f000 8086 	beq.w	8003842 <HAL_TIM_ConfigClockSource+0x1f6>
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373a:	d87f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 800373c:	2b70      	cmp	r3, #112	; 0x70
 800373e:	d01a      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x12a>
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d87b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 8003744:	2b60      	cmp	r3, #96	; 0x60
 8003746:	d050      	beq.n	80037ea <HAL_TIM_ConfigClockSource+0x19e>
 8003748:	2b60      	cmp	r3, #96	; 0x60
 800374a:	d877      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d03c      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0x17e>
 8003750:	2b50      	cmp	r3, #80	; 0x50
 8003752:	d873      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	d058      	beq.n	800380a <HAL_TIM_ConfigClockSource+0x1be>
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d86f      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 800375c:	2b30      	cmp	r3, #48	; 0x30
 800375e:	d064      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x1de>
 8003760:	2b30      	cmp	r3, #48	; 0x30
 8003762:	d86b      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 8003764:	2b20      	cmp	r3, #32
 8003766:	d060      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x1de>
 8003768:	2b20      	cmp	r3, #32
 800376a:	d867      	bhi.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d05c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x1de>
 8003770:	2b10      	cmp	r3, #16
 8003772:	d05a      	beq.n	800382a <HAL_TIM_ConfigClockSource+0x1de>
 8003774:	e062      	b.n	800383c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003786:	f000 f9a7 	bl	8003ad8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	609a      	str	r2, [r3, #8]
      break;
 80037a2:	e04f      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b4:	f000 f990 	bl	8003ad8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c6:	609a      	str	r2, [r3, #8]
      break;
 80037c8:	e03c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d6:	461a      	mov	r2, r3
 80037d8:	f000 f902 	bl	80039e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2150      	movs	r1, #80	; 0x50
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f95b 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 80037e8:	e02c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037f6:	461a      	mov	r2, r3
 80037f8:	f000 f921 	bl	8003a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2160      	movs	r1, #96	; 0x60
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f94b 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003808:	e01c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003816:	461a      	mov	r2, r3
 8003818:	f000 f8e2 	bl	80039e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2140      	movs	r1, #64	; 0x40
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f93b 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003828:	e00c      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4619      	mov	r1, r3
 8003834:	4610      	mov	r0, r2
 8003836:	f000 f932 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 800383a:	e003      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
      break;
 8003840:	e000      	b.n	8003844 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003854:	7bfb      	ldrb	r3, [r7, #15]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	00100070 	.word	0x00100070
 8003864:	00100060 	.word	0x00100060
 8003868:	00100050 	.word	0x00100050
 800386c:	00100040 	.word	0x00100040
 8003870:	00100030 	.word	0x00100030
 8003874:	00100020 	.word	0x00100020

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a4c      	ldr	r2, [pc, #304]	; (80039bc <TIM_Base_SetConfig+0x144>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d017      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d013      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a49      	ldr	r2, [pc, #292]	; (80039c0 <TIM_Base_SetConfig+0x148>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00f      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <TIM_Base_SetConfig+0x14c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a47      	ldr	r2, [pc, #284]	; (80039c8 <TIM_Base_SetConfig+0x150>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a46      	ldr	r2, [pc, #280]	; (80039cc <TIM_Base_SetConfig+0x154>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a39      	ldr	r2, [pc, #228]	; (80039bc <TIM_Base_SetConfig+0x144>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d023      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d01f      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <TIM_Base_SetConfig+0x148>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a35      	ldr	r2, [pc, #212]	; (80039c4 <TIM_Base_SetConfig+0x14c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <TIM_Base_SetConfig+0x150>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <TIM_Base_SetConfig+0x154>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <TIM_Base_SetConfig+0x15c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <TIM_Base_SetConfig+0x160>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a31      	ldr	r2, [pc, #196]	; (80039dc <TIM_Base_SetConfig+0x164>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <TIM_Base_SetConfig+0x144>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <TIM_Base_SetConfig+0x154>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00f      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <TIM_Base_SetConfig+0x15c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00b      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <TIM_Base_SetConfig+0x160>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <TIM_Base_SetConfig+0x164>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]
  }
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000c00 	.word	0x40000c00
 80039cc:	40013400 	.word	0x40013400
 80039d0:	40015000 	.word	0x40015000
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 030a 	bic.w	r3, r3, #10
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f023 0210 	bic.w	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e074      	b.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a34      	ldr	r2, [pc, #208]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a31      	ldr	r2, [pc, #196]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a21      	ldr	r2, [pc, #132]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d022      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d01d      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d018      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00e      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a11      	ldr	r2, [pc, #68]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10c      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40013400 	.word	0x40013400
 8003c30:	40015000 	.word	0x40015000
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	40014000 	.word	0x40014000

08003c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e042      	b.n	8003cdc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7fd f97f 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2224      	movs	r2, #36	; 0x24
 8003c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0201 	bic.w	r2, r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fc7a 	bl	8004588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f97b 	bl	8003f90 <UART_SetConfig>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e01b      	b.n	8003cdc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0201 	orr.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fcf9 	bl	80046cc <UART_CheckIdleState>
 8003cda:	4603      	mov	r3, r0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d17b      	bne.n	8003df6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <HAL_UART_Transmit+0x26>
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e074      	b.n	8003df8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2221      	movs	r2, #33	; 0x21
 8003d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1e:	f7fd fafb 	bl	8001318 <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	88fa      	ldrh	r2, [r7, #6]
 8003d28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	88fa      	ldrh	r2, [r7, #6]
 8003d30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3c:	d108      	bne.n	8003d50 <HAL_UART_Transmit+0x6c>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d104      	bne.n	8003d50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	61bb      	str	r3, [r7, #24]
 8003d4e:	e003      	b.n	8003d58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d58:	e030      	b.n	8003dbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2180      	movs	r1, #128	; 0x80
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fd5b 	bl	8004820 <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e03d      	b.n	8003df8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	3302      	adds	r3, #2
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	e007      	b.n	8003daa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	3b01      	subs	r3, #1
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1c8      	bne.n	8003d5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2140      	movs	r1, #64	; 0x40
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 fd24 	bl	8004820 <UART_WaitOnFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e006      	b.n	8003df8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	e000      	b.n	8003df8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
  }
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3720      	adds	r7, #32
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	f040 80b5 	bne.w	8003f86 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_UART_Receive+0x28>
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0ad      	b.n	8003f88 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2222      	movs	r2, #34	; 0x22
 8003e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e42:	f7fd fa69 	bl	8001318 <HAL_GetTick>
 8003e46:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e60:	d10e      	bne.n	8003e80 <HAL_UART_Receive+0x80>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_UART_Receive+0x76>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e74:	e02d      	b.n	8003ed2 <HAL_UART_Receive+0xd2>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e7e:	e028      	b.n	8003ed2 <HAL_UART_Receive+0xd2>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10d      	bne.n	8003ea4 <HAL_UART_Receive+0xa4>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d104      	bne.n	8003e9a <HAL_UART_Receive+0x9a>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	22ff      	movs	r2, #255	; 0xff
 8003e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e98:	e01b      	b.n	8003ed2 <HAL_UART_Receive+0xd2>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	227f      	movs	r2, #127	; 0x7f
 8003e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ea2:	e016      	b.n	8003ed2 <HAL_UART_Receive+0xd2>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eac:	d10d      	bne.n	8003eca <HAL_UART_Receive+0xca>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d104      	bne.n	8003ec0 <HAL_UART_Receive+0xc0>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	227f      	movs	r2, #127	; 0x7f
 8003eba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ebe:	e008      	b.n	8003ed2 <HAL_UART_Receive+0xd2>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	223f      	movs	r2, #63	; 0x3f
 8003ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ec8:	e003      	b.n	8003ed2 <HAL_UART_Receive+0xd2>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ed8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee2:	d108      	bne.n	8003ef6 <HAL_UART_Receive+0xf6>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e003      	b.n	8003efe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003efe:	e036      	b.n	8003f6e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2200      	movs	r2, #0
 8003f08:	2120      	movs	r1, #32
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fc88 	bl	8004820 <UART_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e032      	b.n	8003f88 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10c      	bne.n	8003f42 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	8a7b      	ldrh	r3, [r7, #18]
 8003f32:	4013      	ands	r3, r2
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	3302      	adds	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
 8003f40:	e00c      	b.n	8003f5c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	8a7b      	ldrh	r3, [r7, #18]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	4013      	ands	r3, r2
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1c2      	bne.n	8003f00 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	e000      	b.n	8003f88 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003f86:	2302      	movs	r3, #2
  }
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f94:	b08c      	sub	sp, #48	; 0x30
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4baa      	ldr	r3, [pc, #680]	; (8004268 <UART_SetConfig+0x2d8>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	6812      	ldr	r2, [r2, #0]
 8003fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a9f      	ldr	r2, [pc, #636]	; (800426c <UART_SetConfig+0x2dc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004006:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004010:	430b      	orrs	r3, r1
 8004012:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f023 010f 	bic.w	r1, r3, #15
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a90      	ldr	r2, [pc, #576]	; (8004270 <UART_SetConfig+0x2e0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d125      	bne.n	8004080 <UART_SetConfig+0xf0>
 8004034:	4b8f      	ldr	r3, [pc, #572]	; (8004274 <UART_SetConfig+0x2e4>)
 8004036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b03      	cmp	r3, #3
 8004040:	d81a      	bhi.n	8004078 <UART_SetConfig+0xe8>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0xb8>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	08004059 	.word	0x08004059
 800404c:	08004069 	.word	0x08004069
 8004050:	08004061 	.word	0x08004061
 8004054:	08004071 	.word	0x08004071
 8004058:	2301      	movs	r3, #1
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e116      	b.n	800428e <UART_SetConfig+0x2fe>
 8004060:	2302      	movs	r3, #2
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004066:	e112      	b.n	800428e <UART_SetConfig+0x2fe>
 8004068:	2304      	movs	r3, #4
 800406a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406e:	e10e      	b.n	800428e <UART_SetConfig+0x2fe>
 8004070:	2308      	movs	r3, #8
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004076:	e10a      	b.n	800428e <UART_SetConfig+0x2fe>
 8004078:	2310      	movs	r3, #16
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407e:	e106      	b.n	800428e <UART_SetConfig+0x2fe>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <UART_SetConfig+0x2e8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d138      	bne.n	80040fc <UART_SetConfig+0x16c>
 800408a:	4b7a      	ldr	r3, [pc, #488]	; (8004274 <UART_SetConfig+0x2e4>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f003 030c 	and.w	r3, r3, #12
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d82d      	bhi.n	80040f4 <UART_SetConfig+0x164>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x110>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	080040f5 	.word	0x080040f5
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040e5 	.word	0x080040e5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040dd 	.word	0x080040dd
 80040c4:	080040f5 	.word	0x080040f5
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	080040f5 	.word	0x080040f5
 80040d0:	080040ed 	.word	0x080040ed
 80040d4:	2300      	movs	r3, #0
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040da:	e0d8      	b.n	800428e <UART_SetConfig+0x2fe>
 80040dc:	2302      	movs	r3, #2
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e2:	e0d4      	b.n	800428e <UART_SetConfig+0x2fe>
 80040e4:	2304      	movs	r3, #4
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ea:	e0d0      	b.n	800428e <UART_SetConfig+0x2fe>
 80040ec:	2308      	movs	r3, #8
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f2:	e0cc      	b.n	800428e <UART_SetConfig+0x2fe>
 80040f4:	2310      	movs	r3, #16
 80040f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040fa:	e0c8      	b.n	800428e <UART_SetConfig+0x2fe>
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a5e      	ldr	r2, [pc, #376]	; (800427c <UART_SetConfig+0x2ec>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d125      	bne.n	8004152 <UART_SetConfig+0x1c2>
 8004106:	4b5b      	ldr	r3, [pc, #364]	; (8004274 <UART_SetConfig+0x2e4>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004110:	2b30      	cmp	r3, #48	; 0x30
 8004112:	d016      	beq.n	8004142 <UART_SetConfig+0x1b2>
 8004114:	2b30      	cmp	r3, #48	; 0x30
 8004116:	d818      	bhi.n	800414a <UART_SetConfig+0x1ba>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d00a      	beq.n	8004132 <UART_SetConfig+0x1a2>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d814      	bhi.n	800414a <UART_SetConfig+0x1ba>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <UART_SetConfig+0x19a>
 8004124:	2b10      	cmp	r3, #16
 8004126:	d008      	beq.n	800413a <UART_SetConfig+0x1aa>
 8004128:	e00f      	b.n	800414a <UART_SetConfig+0x1ba>
 800412a:	2300      	movs	r3, #0
 800412c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004130:	e0ad      	b.n	800428e <UART_SetConfig+0x2fe>
 8004132:	2302      	movs	r3, #2
 8004134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004138:	e0a9      	b.n	800428e <UART_SetConfig+0x2fe>
 800413a:	2304      	movs	r3, #4
 800413c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004140:	e0a5      	b.n	800428e <UART_SetConfig+0x2fe>
 8004142:	2308      	movs	r3, #8
 8004144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004148:	e0a1      	b.n	800428e <UART_SetConfig+0x2fe>
 800414a:	2310      	movs	r3, #16
 800414c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004150:	e09d      	b.n	800428e <UART_SetConfig+0x2fe>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a4a      	ldr	r2, [pc, #296]	; (8004280 <UART_SetConfig+0x2f0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d125      	bne.n	80041a8 <UART_SetConfig+0x218>
 800415c:	4b45      	ldr	r3, [pc, #276]	; (8004274 <UART_SetConfig+0x2e4>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004166:	2bc0      	cmp	r3, #192	; 0xc0
 8004168:	d016      	beq.n	8004198 <UART_SetConfig+0x208>
 800416a:	2bc0      	cmp	r3, #192	; 0xc0
 800416c:	d818      	bhi.n	80041a0 <UART_SetConfig+0x210>
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d00a      	beq.n	8004188 <UART_SetConfig+0x1f8>
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d814      	bhi.n	80041a0 <UART_SetConfig+0x210>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <UART_SetConfig+0x1f0>
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d008      	beq.n	8004190 <UART_SetConfig+0x200>
 800417e:	e00f      	b.n	80041a0 <UART_SetConfig+0x210>
 8004180:	2300      	movs	r3, #0
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004186:	e082      	b.n	800428e <UART_SetConfig+0x2fe>
 8004188:	2302      	movs	r3, #2
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418e:	e07e      	b.n	800428e <UART_SetConfig+0x2fe>
 8004190:	2304      	movs	r3, #4
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004196:	e07a      	b.n	800428e <UART_SetConfig+0x2fe>
 8004198:	2308      	movs	r3, #8
 800419a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419e:	e076      	b.n	800428e <UART_SetConfig+0x2fe>
 80041a0:	2310      	movs	r3, #16
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a6:	e072      	b.n	800428e <UART_SetConfig+0x2fe>
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a35      	ldr	r2, [pc, #212]	; (8004284 <UART_SetConfig+0x2f4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d12a      	bne.n	8004208 <UART_SetConfig+0x278>
 80041b2:	4b30      	ldr	r3, [pc, #192]	; (8004274 <UART_SetConfig+0x2e4>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c0:	d01a      	beq.n	80041f8 <UART_SetConfig+0x268>
 80041c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c6:	d81b      	bhi.n	8004200 <UART_SetConfig+0x270>
 80041c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041cc:	d00c      	beq.n	80041e8 <UART_SetConfig+0x258>
 80041ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d2:	d815      	bhi.n	8004200 <UART_SetConfig+0x270>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <UART_SetConfig+0x250>
 80041d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041dc:	d008      	beq.n	80041f0 <UART_SetConfig+0x260>
 80041de:	e00f      	b.n	8004200 <UART_SetConfig+0x270>
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e6:	e052      	b.n	800428e <UART_SetConfig+0x2fe>
 80041e8:	2302      	movs	r3, #2
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ee:	e04e      	b.n	800428e <UART_SetConfig+0x2fe>
 80041f0:	2304      	movs	r3, #4
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f6:	e04a      	b.n	800428e <UART_SetConfig+0x2fe>
 80041f8:	2308      	movs	r3, #8
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fe:	e046      	b.n	800428e <UART_SetConfig+0x2fe>
 8004200:	2310      	movs	r3, #16
 8004202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004206:	e042      	b.n	800428e <UART_SetConfig+0x2fe>
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a17      	ldr	r2, [pc, #92]	; (800426c <UART_SetConfig+0x2dc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d13a      	bne.n	8004288 <UART_SetConfig+0x2f8>
 8004212:	4b18      	ldr	r3, [pc, #96]	; (8004274 <UART_SetConfig+0x2e4>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800421c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004220:	d01a      	beq.n	8004258 <UART_SetConfig+0x2c8>
 8004222:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004226:	d81b      	bhi.n	8004260 <UART_SetConfig+0x2d0>
 8004228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800422c:	d00c      	beq.n	8004248 <UART_SetConfig+0x2b8>
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	d815      	bhi.n	8004260 <UART_SetConfig+0x2d0>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <UART_SetConfig+0x2b0>
 8004238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423c:	d008      	beq.n	8004250 <UART_SetConfig+0x2c0>
 800423e:	e00f      	b.n	8004260 <UART_SetConfig+0x2d0>
 8004240:	2300      	movs	r3, #0
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004246:	e022      	b.n	800428e <UART_SetConfig+0x2fe>
 8004248:	2302      	movs	r3, #2
 800424a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424e:	e01e      	b.n	800428e <UART_SetConfig+0x2fe>
 8004250:	2304      	movs	r3, #4
 8004252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004256:	e01a      	b.n	800428e <UART_SetConfig+0x2fe>
 8004258:	2308      	movs	r3, #8
 800425a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800425e:	e016      	b.n	800428e <UART_SetConfig+0x2fe>
 8004260:	2310      	movs	r3, #16
 8004262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004266:	e012      	b.n	800428e <UART_SetConfig+0x2fe>
 8004268:	cfff69f3 	.word	0xcfff69f3
 800426c:	40008000 	.word	0x40008000
 8004270:	40013800 	.word	0x40013800
 8004274:	40021000 	.word	0x40021000
 8004278:	40004400 	.word	0x40004400
 800427c:	40004800 	.word	0x40004800
 8004280:	40004c00 	.word	0x40004c00
 8004284:	40005000 	.word	0x40005000
 8004288:	2310      	movs	r3, #16
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4aae      	ldr	r2, [pc, #696]	; (800454c <UART_SetConfig+0x5bc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	f040 8097 	bne.w	80043c8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800429a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d823      	bhi.n	80042ea <UART_SetConfig+0x35a>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x318>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042eb 	.word	0x080042eb
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042eb 	.word	0x080042eb
 80042b8:	080042db 	.word	0x080042db
 80042bc:	080042eb 	.word	0x080042eb
 80042c0:	080042eb 	.word	0x080042eb
 80042c4:	080042eb 	.word	0x080042eb
 80042c8:	080042e3 	.word	0x080042e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042cc:	f7fe f90e 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042d2:	e010      	b.n	80042f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d4:	4b9e      	ldr	r3, [pc, #632]	; (8004550 <UART_SetConfig+0x5c0>)
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042d8:	e00d      	b.n	80042f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042da:	f7fe f899 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042e0:	e009      	b.n	80042f6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042e8:	e005      	b.n	80042f6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8130 	beq.w	800455e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	4a94      	ldr	r2, [pc, #592]	; (8004554 <UART_SetConfig+0x5c4>)
 8004304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004308:	461a      	mov	r2, r3
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004310:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4413      	add	r3, r2
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	429a      	cmp	r2, r3
 8004320:	d305      	bcc.n	800432e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	429a      	cmp	r2, r3
 800432c:	d903      	bls.n	8004336 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004334:	e113      	b.n	800455e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	2200      	movs	r2, #0
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	60fa      	str	r2, [r7, #12]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	4a84      	ldr	r2, [pc, #528]	; (8004554 <UART_SetConfig+0x5c4>)
 8004344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004348:	b29b      	uxth	r3, r3
 800434a:	2200      	movs	r2, #0
 800434c:	603b      	str	r3, [r7, #0]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004354:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004358:	f7fb ffca 	bl	80002f0 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	020b      	lsls	r3, r1, #8
 800436e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004372:	0202      	lsls	r2, r0, #8
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	6849      	ldr	r1, [r1, #4]
 8004378:	0849      	lsrs	r1, r1, #1
 800437a:	2000      	movs	r0, #0
 800437c:	460c      	mov	r4, r1
 800437e:	4605      	mov	r5, r0
 8004380:	eb12 0804 	adds.w	r8, r2, r4
 8004384:	eb43 0905 	adc.w	r9, r3, r5
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	469a      	mov	sl, r3
 8004390:	4693      	mov	fp, r2
 8004392:	4652      	mov	r2, sl
 8004394:	465b      	mov	r3, fp
 8004396:	4640      	mov	r0, r8
 8004398:	4649      	mov	r1, r9
 800439a:	f7fb ffa9 	bl	80002f0 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4613      	mov	r3, r2
 80043a4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ac:	d308      	bcc.n	80043c0 <UART_SetConfig+0x430>
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b4:	d204      	bcs.n	80043c0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a3a      	ldr	r2, [r7, #32]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	e0ce      	b.n	800455e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043c6:	e0ca      	b.n	800455e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d0:	d166      	bne.n	80044a0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80043d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d827      	bhi.n	800442a <UART_SetConfig+0x49a>
 80043da:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x450>)
 80043dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800442b 	.word	0x0800442b
 80043f0:	0800441b 	.word	0x0800441b
 80043f4:	0800442b 	.word	0x0800442b
 80043f8:	0800442b 	.word	0x0800442b
 80043fc:	0800442b 	.word	0x0800442b
 8004400:	08004423 	.word	0x08004423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe f872 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 8004408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800440a:	e014      	b.n	8004436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800440c:	f7fe f884 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8004410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004412:	e010      	b.n	8004436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004414:	4b4e      	ldr	r3, [pc, #312]	; (8004550 <UART_SetConfig+0x5c0>)
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004418:	e00d      	b.n	8004436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441a:	f7fd fff9 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 800441e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004420:	e009      	b.n	8004436 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004428:	e005      	b.n	8004436 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8090 	beq.w	800455e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	4a44      	ldr	r2, [pc, #272]	; (8004554 <UART_SetConfig+0x5c4>)
 8004444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004448:	461a      	mov	r2, r3
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004450:	005a      	lsls	r2, r3, #1
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	441a      	add	r2, r3
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	d916      	bls.n	8004498 <UART_SetConfig+0x508>
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d212      	bcs.n	8004498 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f023 030f 	bic.w	r3, r3, #15
 800447a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	085b      	lsrs	r3, r3, #1
 8004480:	b29b      	uxth	r3, r3
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	b29a      	uxth	r2, r3
 8004488:	8bfb      	ldrh	r3, [r7, #30]
 800448a:	4313      	orrs	r3, r2
 800448c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	8bfa      	ldrh	r2, [r7, #30]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	e062      	b.n	800455e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800449e:	e05e      	b.n	800455e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d828      	bhi.n	80044fa <UART_SetConfig+0x56a>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0x520>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044fb 	.word	0x080044fb
 80044c0:	080044eb 	.word	0x080044eb
 80044c4:	080044fb 	.word	0x080044fb
 80044c8:	080044fb 	.word	0x080044fb
 80044cc:	080044fb 	.word	0x080044fb
 80044d0:	080044f3 	.word	0x080044f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe f80a 	bl	80024ec <HAL_RCC_GetPCLK1Freq>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044da:	e014      	b.n	8004506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044dc:	f7fe f81c 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 80044e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044e2:	e010      	b.n	8004506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <UART_SetConfig+0x5c0>)
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044e8:	e00d      	b.n	8004506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fd ff91 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80044ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044f0:	e009      	b.n	8004506 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044f8:	e005      	b.n	8004506 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004504:	bf00      	nop
    }

    if (pclk != 0U)
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	2b00      	cmp	r3, #0
 800450a:	d028      	beq.n	800455e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	4a10      	ldr	r2, [pc, #64]	; (8004554 <UART_SetConfig+0x5c4>)
 8004512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004516:	461a      	mov	r2, r3
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	fbb3 f2f2 	udiv	r2, r3, r2
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	085b      	lsrs	r3, r3, #1
 8004524:	441a      	add	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	fbb2 f3f3 	udiv	r3, r2, r3
 800452e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	2b0f      	cmp	r3, #15
 8004534:	d910      	bls.n	8004558 <UART_SetConfig+0x5c8>
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453c:	d20c      	bcs.n	8004558 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	b29a      	uxth	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	e009      	b.n	800455e <UART_SetConfig+0x5ce>
 800454a:	bf00      	nop
 800454c:	40008000 	.word	0x40008000
 8004550:	00f42400 	.word	0x00f42400
 8004554:	08005710 	.word	0x08005710
      }
      else
      {
        ret = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2201      	movs	r2, #1
 8004562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2201      	movs	r2, #1
 800456a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2200      	movs	r2, #0
 8004578:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800457a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800457e:	4618      	mov	r0, r3
 8004580:	3730      	adds	r7, #48	; 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01a      	beq.n	800469e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d10a      	bne.n	800469e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b098      	sub	sp, #96	; 0x60
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046dc:	f7fc fe1c 	bl	8001318 <HAL_GetTick>
 80046e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d12f      	bne.n	8004750 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f88e 	bl	8004820 <UART_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d022      	beq.n	8004750 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800471e:	653b      	str	r3, [r7, #80]	; 0x50
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004728:	647b      	str	r3, [r7, #68]	; 0x44
 800472a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800472e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e6      	bne.n	800470a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e063      	b.n	8004818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0304 	and.w	r3, r3, #4
 800475a:	2b04      	cmp	r3, #4
 800475c:	d149      	bne.n	80047f2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004766:	2200      	movs	r2, #0
 8004768:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f857 	bl	8004820 <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d03c      	beq.n	80047f2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	e853 3f00 	ldrex	r3, [r3]
 8004784:	623b      	str	r3, [r7, #32]
   return(result);
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800478c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004796:	633b      	str	r3, [r7, #48]	; 0x30
 8004798:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800479c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800479e:	e841 2300 	strex	r3, r2, [r1]
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e6      	bne.n	8004778 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3308      	adds	r3, #8
 80047b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	e853 3f00 	ldrex	r3, [r3]
 80047b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3308      	adds	r3, #8
 80047c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047ca:	61fa      	str	r2, [r7, #28]
 80047cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	69b9      	ldr	r1, [r7, #24]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	617b      	str	r3, [r7, #20]
   return(result);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e5      	bne.n	80047aa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e012      	b.n	8004818 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3758      	adds	r7, #88	; 0x58
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004830:	e04f      	b.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d04b      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483a:	f7fc fd6d 	bl	8001318 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <UART_WaitOnFlagUntilTimeout+0x30>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e04e      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d037      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d034      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d031      	beq.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b08      	cmp	r3, #8
 800487a:	d110      	bne.n	800489e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2208      	movs	r2, #8
 8004882:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f838 	bl	80048fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2208      	movs	r2, #8
 800488e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e029      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ac:	d111      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f81e 	bl	80048fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e00f      	b.n	80048f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69da      	ldr	r2, [r3, #28]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d0a0      	beq.n	8004832 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b095      	sub	sp, #84	; 0x54
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004920:	643b      	str	r3, [r7, #64]	; 0x40
 8004922:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004926:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e6      	bne.n	8004902 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3308      	adds	r3, #8
 800493a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	61fb      	str	r3, [r7, #28]
   return(result);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3308      	adds	r3, #8
 8004956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004960:	e841 2300 	strex	r3, r2, [r1]
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d1e3      	bne.n	8004934 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d118      	bne.n	80049a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	60bb      	str	r3, [r7, #8]
   return(result);
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f023 0310 	bic.w	r3, r3, #16
 8004988:	647b      	str	r3, [r7, #68]	; 0x44
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6979      	ldr	r1, [r7, #20]
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	613b      	str	r3, [r7, #16]
   return(result);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e6      	bne.n	8004974 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80049ba:	bf00      	nop
 80049bc:	3754      	adds	r7, #84	; 0x54
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_UARTEx_DisableFifoMode+0x16>
 80049d8:	2302      	movs	r3, #2
 80049da:	e027      	b.n	8004a2c <HAL_UARTEx_DisableFifoMode+0x66>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2224      	movs	r2, #36	; 0x24
 80049e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0201 	bic.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e02d      	b.n	8004aac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f84f 	bl	8004b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e02d      	b.n	8004b28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2224      	movs	r2, #36	; 0x24
 8004ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f811 	bl	8004b30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d108      	bne.n	8004b52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b50:	e031      	b.n	8004bb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b52:	2308      	movs	r3, #8
 8004b54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b56:	2308      	movs	r3, #8
 8004b58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	0e5b      	lsrs	r3, r3, #25
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	0f5b      	lsrs	r3, r3, #29
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b7a:	7bbb      	ldrb	r3, [r7, #14]
 8004b7c:	7b3a      	ldrb	r2, [r7, #12]
 8004b7e:	4911      	ldr	r1, [pc, #68]	; (8004bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004b80:	5c8a      	ldrb	r2, [r1, r2]
 8004b82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b86:	7b3a      	ldrb	r2, [r7, #12]
 8004b88:	490f      	ldr	r1, [pc, #60]	; (8004bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8004b8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	7b7a      	ldrb	r2, [r7, #13]
 8004b9c:	4909      	ldr	r1, [pc, #36]	; (8004bc4 <UARTEx_SetNbDataToProcess+0x94>)
 8004b9e:	5c8a      	ldrb	r2, [r1, r2]
 8004ba0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ba4:	7b7a      	ldrb	r2, [r7, #13]
 8004ba6:	4908      	ldr	r1, [pc, #32]	; (8004bc8 <UARTEx_SetNbDataToProcess+0x98>)
 8004ba8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004baa:	fb93 f3f2 	sdiv	r3, r3, r2
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004bb6:	bf00      	nop
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	08005728 	.word	0x08005728
 8004bc8:	08005730 	.word	0x08005730

08004bcc <siprintf>:
 8004bcc:	b40e      	push	{r1, r2, r3}
 8004bce:	b500      	push	{lr}
 8004bd0:	b09c      	sub	sp, #112	; 0x70
 8004bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bd4:	9002      	str	r0, [sp, #8]
 8004bd6:	9006      	str	r0, [sp, #24]
 8004bd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bdc:	4809      	ldr	r0, [pc, #36]	; (8004c04 <siprintf+0x38>)
 8004bde:	9107      	str	r1, [sp, #28]
 8004be0:	9104      	str	r1, [sp, #16]
 8004be2:	4909      	ldr	r1, [pc, #36]	; (8004c08 <siprintf+0x3c>)
 8004be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004be8:	9105      	str	r1, [sp, #20]
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	9301      	str	r3, [sp, #4]
 8004bee:	a902      	add	r1, sp, #8
 8004bf0:	f000 f992 	bl	8004f18 <_svfiprintf_r>
 8004bf4:	9b02      	ldr	r3, [sp, #8]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	b01c      	add	sp, #112	; 0x70
 8004bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c00:	b003      	add	sp, #12
 8004c02:	4770      	bx	lr
 8004c04:	2000005c 	.word	0x2000005c
 8004c08:	ffff0208 	.word	0xffff0208

08004c0c <memset>:
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d100      	bne.n	8004c16 <memset+0xa>
 8004c14:	4770      	bx	lr
 8004c16:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1a:	e7f9      	b.n	8004c10 <memset+0x4>

08004c1c <__errno>:
 8004c1c:	4b01      	ldr	r3, [pc, #4]	; (8004c24 <__errno+0x8>)
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	2000005c 	.word	0x2000005c

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4d0d      	ldr	r5, [pc, #52]	; (8004c60 <__libc_init_array+0x38>)
 8004c2c:	4c0d      	ldr	r4, [pc, #52]	; (8004c64 <__libc_init_array+0x3c>)
 8004c2e:	1b64      	subs	r4, r4, r5
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	2600      	movs	r6, #0
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	4d0b      	ldr	r5, [pc, #44]	; (8004c68 <__libc_init_array+0x40>)
 8004c3a:	4c0c      	ldr	r4, [pc, #48]	; (8004c6c <__libc_init_array+0x44>)
 8004c3c:	f000 fc6a 	bl	8005514 <_init>
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	2600      	movs	r6, #0
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	08005774 	.word	0x08005774
 8004c64:	08005774 	.word	0x08005774
 8004c68:	08005774 	.word	0x08005774
 8004c6c:	08005778 	.word	0x08005778

08004c70 <__retarget_lock_acquire_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_release_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <_free_r>:
 8004c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c76:	2900      	cmp	r1, #0
 8004c78:	d044      	beq.n	8004d04 <_free_r+0x90>
 8004c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c7e:	9001      	str	r0, [sp, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f1a1 0404 	sub.w	r4, r1, #4
 8004c86:	bfb8      	it	lt
 8004c88:	18e4      	addlt	r4, r4, r3
 8004c8a:	f000 f8df 	bl	8004e4c <__malloc_lock>
 8004c8e:	4a1e      	ldr	r2, [pc, #120]	; (8004d08 <_free_r+0x94>)
 8004c90:	9801      	ldr	r0, [sp, #4]
 8004c92:	6813      	ldr	r3, [r2, #0]
 8004c94:	b933      	cbnz	r3, 8004ca4 <_free_r+0x30>
 8004c96:	6063      	str	r3, [r4, #4]
 8004c98:	6014      	str	r4, [r2, #0]
 8004c9a:	b003      	add	sp, #12
 8004c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ca0:	f000 b8da 	b.w	8004e58 <__malloc_unlock>
 8004ca4:	42a3      	cmp	r3, r4
 8004ca6:	d908      	bls.n	8004cba <_free_r+0x46>
 8004ca8:	6825      	ldr	r5, [r4, #0]
 8004caa:	1961      	adds	r1, r4, r5
 8004cac:	428b      	cmp	r3, r1
 8004cae:	bf01      	itttt	eq
 8004cb0:	6819      	ldreq	r1, [r3, #0]
 8004cb2:	685b      	ldreq	r3, [r3, #4]
 8004cb4:	1949      	addeq	r1, r1, r5
 8004cb6:	6021      	streq	r1, [r4, #0]
 8004cb8:	e7ed      	b.n	8004c96 <_free_r+0x22>
 8004cba:	461a      	mov	r2, r3
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	b10b      	cbz	r3, 8004cc4 <_free_r+0x50>
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	d9fa      	bls.n	8004cba <_free_r+0x46>
 8004cc4:	6811      	ldr	r1, [r2, #0]
 8004cc6:	1855      	adds	r5, r2, r1
 8004cc8:	42a5      	cmp	r5, r4
 8004cca:	d10b      	bne.n	8004ce4 <_free_r+0x70>
 8004ccc:	6824      	ldr	r4, [r4, #0]
 8004cce:	4421      	add	r1, r4
 8004cd0:	1854      	adds	r4, r2, r1
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	6011      	str	r1, [r2, #0]
 8004cd6:	d1e0      	bne.n	8004c9a <_free_r+0x26>
 8004cd8:	681c      	ldr	r4, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	6053      	str	r3, [r2, #4]
 8004cde:	440c      	add	r4, r1
 8004ce0:	6014      	str	r4, [r2, #0]
 8004ce2:	e7da      	b.n	8004c9a <_free_r+0x26>
 8004ce4:	d902      	bls.n	8004cec <_free_r+0x78>
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	6003      	str	r3, [r0, #0]
 8004cea:	e7d6      	b.n	8004c9a <_free_r+0x26>
 8004cec:	6825      	ldr	r5, [r4, #0]
 8004cee:	1961      	adds	r1, r4, r5
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	bf04      	itt	eq
 8004cf4:	6819      	ldreq	r1, [r3, #0]
 8004cf6:	685b      	ldreq	r3, [r3, #4]
 8004cf8:	6063      	str	r3, [r4, #4]
 8004cfa:	bf04      	itt	eq
 8004cfc:	1949      	addeq	r1, r1, r5
 8004cfe:	6021      	streq	r1, [r4, #0]
 8004d00:	6054      	str	r4, [r2, #4]
 8004d02:	e7ca      	b.n	8004c9a <_free_r+0x26>
 8004d04:	b003      	add	sp, #12
 8004d06:	bd30      	pop	{r4, r5, pc}
 8004d08:	2000038c 	.word	0x2000038c

08004d0c <sbrk_aligned>:
 8004d0c:	b570      	push	{r4, r5, r6, lr}
 8004d0e:	4e0e      	ldr	r6, [pc, #56]	; (8004d48 <sbrk_aligned+0x3c>)
 8004d10:	460c      	mov	r4, r1
 8004d12:	6831      	ldr	r1, [r6, #0]
 8004d14:	4605      	mov	r5, r0
 8004d16:	b911      	cbnz	r1, 8004d1e <sbrk_aligned+0x12>
 8004d18:	f000 fba6 	bl	8005468 <_sbrk_r>
 8004d1c:	6030      	str	r0, [r6, #0]
 8004d1e:	4621      	mov	r1, r4
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 fba1 	bl	8005468 <_sbrk_r>
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	d00a      	beq.n	8004d40 <sbrk_aligned+0x34>
 8004d2a:	1cc4      	adds	r4, r0, #3
 8004d2c:	f024 0403 	bic.w	r4, r4, #3
 8004d30:	42a0      	cmp	r0, r4
 8004d32:	d007      	beq.n	8004d44 <sbrk_aligned+0x38>
 8004d34:	1a21      	subs	r1, r4, r0
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fb96 	bl	8005468 <_sbrk_r>
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d101      	bne.n	8004d44 <sbrk_aligned+0x38>
 8004d40:	f04f 34ff 	mov.w	r4, #4294967295
 8004d44:	4620      	mov	r0, r4
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	20000390 	.word	0x20000390

08004d4c <_malloc_r>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	1ccd      	adds	r5, r1, #3
 8004d52:	f025 0503 	bic.w	r5, r5, #3
 8004d56:	3508      	adds	r5, #8
 8004d58:	2d0c      	cmp	r5, #12
 8004d5a:	bf38      	it	cc
 8004d5c:	250c      	movcc	r5, #12
 8004d5e:	2d00      	cmp	r5, #0
 8004d60:	4607      	mov	r7, r0
 8004d62:	db01      	blt.n	8004d68 <_malloc_r+0x1c>
 8004d64:	42a9      	cmp	r1, r5
 8004d66:	d905      	bls.n	8004d74 <_malloc_r+0x28>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	2600      	movs	r6, #0
 8004d6e:	4630      	mov	r0, r6
 8004d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e48 <_malloc_r+0xfc>
 8004d78:	f000 f868 	bl	8004e4c <__malloc_lock>
 8004d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d80:	461c      	mov	r4, r3
 8004d82:	bb5c      	cbnz	r4, 8004ddc <_malloc_r+0x90>
 8004d84:	4629      	mov	r1, r5
 8004d86:	4638      	mov	r0, r7
 8004d88:	f7ff ffc0 	bl	8004d0c <sbrk_aligned>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	4604      	mov	r4, r0
 8004d90:	d155      	bne.n	8004e3e <_malloc_r+0xf2>
 8004d92:	f8d8 4000 	ldr.w	r4, [r8]
 8004d96:	4626      	mov	r6, r4
 8004d98:	2e00      	cmp	r6, #0
 8004d9a:	d145      	bne.n	8004e28 <_malloc_r+0xdc>
 8004d9c:	2c00      	cmp	r4, #0
 8004d9e:	d048      	beq.n	8004e32 <_malloc_r+0xe6>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	4631      	mov	r1, r6
 8004da4:	4638      	mov	r0, r7
 8004da6:	eb04 0903 	add.w	r9, r4, r3
 8004daa:	f000 fb5d 	bl	8005468 <_sbrk_r>
 8004dae:	4581      	cmp	r9, r0
 8004db0:	d13f      	bne.n	8004e32 <_malloc_r+0xe6>
 8004db2:	6821      	ldr	r1, [r4, #0]
 8004db4:	1a6d      	subs	r5, r5, r1
 8004db6:	4629      	mov	r1, r5
 8004db8:	4638      	mov	r0, r7
 8004dba:	f7ff ffa7 	bl	8004d0c <sbrk_aligned>
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d037      	beq.n	8004e32 <_malloc_r+0xe6>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	442b      	add	r3, r5
 8004dc6:	6023      	str	r3, [r4, #0]
 8004dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d038      	beq.n	8004e42 <_malloc_r+0xf6>
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	42a2      	cmp	r2, r4
 8004dd4:	d12b      	bne.n	8004e2e <_malloc_r+0xe2>
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	605a      	str	r2, [r3, #4]
 8004dda:	e00f      	b.n	8004dfc <_malloc_r+0xb0>
 8004ddc:	6822      	ldr	r2, [r4, #0]
 8004dde:	1b52      	subs	r2, r2, r5
 8004de0:	d41f      	bmi.n	8004e22 <_malloc_r+0xd6>
 8004de2:	2a0b      	cmp	r2, #11
 8004de4:	d917      	bls.n	8004e16 <_malloc_r+0xca>
 8004de6:	1961      	adds	r1, r4, r5
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	6025      	str	r5, [r4, #0]
 8004dec:	bf18      	it	ne
 8004dee:	6059      	strne	r1, [r3, #4]
 8004df0:	6863      	ldr	r3, [r4, #4]
 8004df2:	bf08      	it	eq
 8004df4:	f8c8 1000 	streq.w	r1, [r8]
 8004df8:	5162      	str	r2, [r4, r5]
 8004dfa:	604b      	str	r3, [r1, #4]
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f104 060b 	add.w	r6, r4, #11
 8004e02:	f000 f829 	bl	8004e58 <__malloc_unlock>
 8004e06:	f026 0607 	bic.w	r6, r6, #7
 8004e0a:	1d23      	adds	r3, r4, #4
 8004e0c:	1af2      	subs	r2, r6, r3
 8004e0e:	d0ae      	beq.n	8004d6e <_malloc_r+0x22>
 8004e10:	1b9b      	subs	r3, r3, r6
 8004e12:	50a3      	str	r3, [r4, r2]
 8004e14:	e7ab      	b.n	8004d6e <_malloc_r+0x22>
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	6862      	ldr	r2, [r4, #4]
 8004e1a:	d1dd      	bne.n	8004dd8 <_malloc_r+0x8c>
 8004e1c:	f8c8 2000 	str.w	r2, [r8]
 8004e20:	e7ec      	b.n	8004dfc <_malloc_r+0xb0>
 8004e22:	4623      	mov	r3, r4
 8004e24:	6864      	ldr	r4, [r4, #4]
 8004e26:	e7ac      	b.n	8004d82 <_malloc_r+0x36>
 8004e28:	4634      	mov	r4, r6
 8004e2a:	6876      	ldr	r6, [r6, #4]
 8004e2c:	e7b4      	b.n	8004d98 <_malloc_r+0x4c>
 8004e2e:	4613      	mov	r3, r2
 8004e30:	e7cc      	b.n	8004dcc <_malloc_r+0x80>
 8004e32:	230c      	movs	r3, #12
 8004e34:	603b      	str	r3, [r7, #0]
 8004e36:	4638      	mov	r0, r7
 8004e38:	f000 f80e 	bl	8004e58 <__malloc_unlock>
 8004e3c:	e797      	b.n	8004d6e <_malloc_r+0x22>
 8004e3e:	6025      	str	r5, [r4, #0]
 8004e40:	e7dc      	b.n	8004dfc <_malloc_r+0xb0>
 8004e42:	605b      	str	r3, [r3, #4]
 8004e44:	deff      	udf	#255	; 0xff
 8004e46:	bf00      	nop
 8004e48:	2000038c 	.word	0x2000038c

08004e4c <__malloc_lock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__malloc_lock+0x8>)
 8004e4e:	f7ff bf0f 	b.w	8004c70 <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	20000388 	.word	0x20000388

08004e58 <__malloc_unlock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	; (8004e60 <__malloc_unlock+0x8>)
 8004e5a:	f7ff bf0a 	b.w	8004c72 <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	20000388 	.word	0x20000388

08004e64 <__ssputs_r>:
 8004e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	688e      	ldr	r6, [r1, #8]
 8004e6a:	461f      	mov	r7, r3
 8004e6c:	42be      	cmp	r6, r7
 8004e6e:	680b      	ldr	r3, [r1, #0]
 8004e70:	4682      	mov	sl, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	4690      	mov	r8, r2
 8004e76:	d82c      	bhi.n	8004ed2 <__ssputs_r+0x6e>
 8004e78:	898a      	ldrh	r2, [r1, #12]
 8004e7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e7e:	d026      	beq.n	8004ece <__ssputs_r+0x6a>
 8004e80:	6965      	ldr	r5, [r4, #20]
 8004e82:	6909      	ldr	r1, [r1, #16]
 8004e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e88:	eba3 0901 	sub.w	r9, r3, r1
 8004e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e90:	1c7b      	adds	r3, r7, #1
 8004e92:	444b      	add	r3, r9
 8004e94:	106d      	asrs	r5, r5, #1
 8004e96:	429d      	cmp	r5, r3
 8004e98:	bf38      	it	cc
 8004e9a:	461d      	movcc	r5, r3
 8004e9c:	0553      	lsls	r3, r2, #21
 8004e9e:	d527      	bpl.n	8004ef0 <__ssputs_r+0x8c>
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7ff ff53 	bl	8004d4c <_malloc_r>
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	b360      	cbz	r0, 8004f04 <__ssputs_r+0xa0>
 8004eaa:	6921      	ldr	r1, [r4, #16]
 8004eac:	464a      	mov	r2, r9
 8004eae:	f000 faeb 	bl	8005488 <memcpy>
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ebc:	81a3      	strh	r3, [r4, #12]
 8004ebe:	6126      	str	r6, [r4, #16]
 8004ec0:	6165      	str	r5, [r4, #20]
 8004ec2:	444e      	add	r6, r9
 8004ec4:	eba5 0509 	sub.w	r5, r5, r9
 8004ec8:	6026      	str	r6, [r4, #0]
 8004eca:	60a5      	str	r5, [r4, #8]
 8004ecc:	463e      	mov	r6, r7
 8004ece:	42be      	cmp	r6, r7
 8004ed0:	d900      	bls.n	8004ed4 <__ssputs_r+0x70>
 8004ed2:	463e      	mov	r6, r7
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	4632      	mov	r2, r6
 8004ed8:	4641      	mov	r1, r8
 8004eda:	f000 faab 	bl	8005434 <memmove>
 8004ede:	68a3      	ldr	r3, [r4, #8]
 8004ee0:	1b9b      	subs	r3, r3, r6
 8004ee2:	60a3      	str	r3, [r4, #8]
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	4433      	add	r3, r6
 8004ee8:	6023      	str	r3, [r4, #0]
 8004eea:	2000      	movs	r0, #0
 8004eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef0:	462a      	mov	r2, r5
 8004ef2:	f000 fad7 	bl	80054a4 <_realloc_r>
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d1e0      	bne.n	8004ebe <__ssputs_r+0x5a>
 8004efc:	6921      	ldr	r1, [r4, #16]
 8004efe:	4650      	mov	r0, sl
 8004f00:	f7ff feb8 	bl	8004c74 <_free_r>
 8004f04:	230c      	movs	r3, #12
 8004f06:	f8ca 3000 	str.w	r3, [sl]
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295
 8004f16:	e7e9      	b.n	8004eec <__ssputs_r+0x88>

08004f18 <_svfiprintf_r>:
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	4698      	mov	r8, r3
 8004f1e:	898b      	ldrh	r3, [r1, #12]
 8004f20:	061b      	lsls	r3, r3, #24
 8004f22:	b09d      	sub	sp, #116	; 0x74
 8004f24:	4607      	mov	r7, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	4614      	mov	r4, r2
 8004f2a:	d50e      	bpl.n	8004f4a <_svfiprintf_r+0x32>
 8004f2c:	690b      	ldr	r3, [r1, #16]
 8004f2e:	b963      	cbnz	r3, 8004f4a <_svfiprintf_r+0x32>
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	f7ff ff0b 	bl	8004d4c <_malloc_r>
 8004f36:	6028      	str	r0, [r5, #0]
 8004f38:	6128      	str	r0, [r5, #16]
 8004f3a:	b920      	cbnz	r0, 8004f46 <_svfiprintf_r+0x2e>
 8004f3c:	230c      	movs	r3, #12
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	e0d0      	b.n	80050e8 <_svfiprintf_r+0x1d0>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	616b      	str	r3, [r5, #20]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4e:	2320      	movs	r3, #32
 8004f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f58:	2330      	movs	r3, #48	; 0x30
 8004f5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005100 <_svfiprintf_r+0x1e8>
 8004f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f62:	f04f 0901 	mov.w	r9, #1
 8004f66:	4623      	mov	r3, r4
 8004f68:	469a      	mov	sl, r3
 8004f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6e:	b10a      	cbz	r2, 8004f74 <_svfiprintf_r+0x5c>
 8004f70:	2a25      	cmp	r2, #37	; 0x25
 8004f72:	d1f9      	bne.n	8004f68 <_svfiprintf_r+0x50>
 8004f74:	ebba 0b04 	subs.w	fp, sl, r4
 8004f78:	d00b      	beq.n	8004f92 <_svfiprintf_r+0x7a>
 8004f7a:	465b      	mov	r3, fp
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ff6f 	bl	8004e64 <__ssputs_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	f000 80a9 	beq.w	80050de <_svfiprintf_r+0x1c6>
 8004f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f8e:	445a      	add	r2, fp
 8004f90:	9209      	str	r2, [sp, #36]	; 0x24
 8004f92:	f89a 3000 	ldrb.w	r3, [sl]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80a1 	beq.w	80050de <_svfiprintf_r+0x1c6>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa6:	f10a 0a01 	add.w	sl, sl, #1
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	9307      	str	r3, [sp, #28]
 8004fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb4:	4654      	mov	r4, sl
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbc:	4850      	ldr	r0, [pc, #320]	; (8005100 <_svfiprintf_r+0x1e8>)
 8004fbe:	f7fb f947 	bl	8000250 <memchr>
 8004fc2:	9a04      	ldr	r2, [sp, #16]
 8004fc4:	b9d8      	cbnz	r0, 8004ffe <_svfiprintf_r+0xe6>
 8004fc6:	06d0      	lsls	r0, r2, #27
 8004fc8:	bf44      	itt	mi
 8004fca:	2320      	movmi	r3, #32
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd0:	0711      	lsls	r1, r2, #28
 8004fd2:	bf44      	itt	mi
 8004fd4:	232b      	movmi	r3, #43	; 0x2b
 8004fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fda:	f89a 3000 	ldrb.w	r3, [sl]
 8004fde:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe0:	d015      	beq.n	800500e <_svfiprintf_r+0xf6>
 8004fe2:	9a07      	ldr	r2, [sp, #28]
 8004fe4:	4654      	mov	r4, sl
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f04f 0c0a 	mov.w	ip, #10
 8004fec:	4621      	mov	r1, r4
 8004fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff2:	3b30      	subs	r3, #48	; 0x30
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	d94d      	bls.n	8005094 <_svfiprintf_r+0x17c>
 8004ff8:	b1b0      	cbz	r0, 8005028 <_svfiprintf_r+0x110>
 8004ffa:	9207      	str	r2, [sp, #28]
 8004ffc:	e014      	b.n	8005028 <_svfiprintf_r+0x110>
 8004ffe:	eba0 0308 	sub.w	r3, r0, r8
 8005002:	fa09 f303 	lsl.w	r3, r9, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	46a2      	mov	sl, r4
 800500c:	e7d2      	b.n	8004fb4 <_svfiprintf_r+0x9c>
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	9103      	str	r1, [sp, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfbb      	ittet	lt
 800501a:	425b      	neglt	r3, r3
 800501c:	f042 0202 	orrlt.w	r2, r2, #2
 8005020:	9307      	strge	r3, [sp, #28]
 8005022:	9307      	strlt	r3, [sp, #28]
 8005024:	bfb8      	it	lt
 8005026:	9204      	strlt	r2, [sp, #16]
 8005028:	7823      	ldrb	r3, [r4, #0]
 800502a:	2b2e      	cmp	r3, #46	; 0x2e
 800502c:	d10c      	bne.n	8005048 <_svfiprintf_r+0x130>
 800502e:	7863      	ldrb	r3, [r4, #1]
 8005030:	2b2a      	cmp	r3, #42	; 0x2a
 8005032:	d134      	bne.n	800509e <_svfiprintf_r+0x186>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	9203      	str	r2, [sp, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	bfb8      	it	lt
 8005040:	f04f 33ff 	movlt.w	r3, #4294967295
 8005044:	3402      	adds	r4, #2
 8005046:	9305      	str	r3, [sp, #20]
 8005048:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005110 <_svfiprintf_r+0x1f8>
 800504c:	7821      	ldrb	r1, [r4, #0]
 800504e:	2203      	movs	r2, #3
 8005050:	4650      	mov	r0, sl
 8005052:	f7fb f8fd 	bl	8000250 <memchr>
 8005056:	b138      	cbz	r0, 8005068 <_svfiprintf_r+0x150>
 8005058:	9b04      	ldr	r3, [sp, #16]
 800505a:	eba0 000a 	sub.w	r0, r0, sl
 800505e:	2240      	movs	r2, #64	; 0x40
 8005060:	4082      	lsls	r2, r0
 8005062:	4313      	orrs	r3, r2
 8005064:	3401      	adds	r4, #1
 8005066:	9304      	str	r3, [sp, #16]
 8005068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506c:	4825      	ldr	r0, [pc, #148]	; (8005104 <_svfiprintf_r+0x1ec>)
 800506e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005072:	2206      	movs	r2, #6
 8005074:	f7fb f8ec 	bl	8000250 <memchr>
 8005078:	2800      	cmp	r0, #0
 800507a:	d038      	beq.n	80050ee <_svfiprintf_r+0x1d6>
 800507c:	4b22      	ldr	r3, [pc, #136]	; (8005108 <_svfiprintf_r+0x1f0>)
 800507e:	bb1b      	cbnz	r3, 80050c8 <_svfiprintf_r+0x1b0>
 8005080:	9b03      	ldr	r3, [sp, #12]
 8005082:	3307      	adds	r3, #7
 8005084:	f023 0307 	bic.w	r3, r3, #7
 8005088:	3308      	adds	r3, #8
 800508a:	9303      	str	r3, [sp, #12]
 800508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508e:	4433      	add	r3, r6
 8005090:	9309      	str	r3, [sp, #36]	; 0x24
 8005092:	e768      	b.n	8004f66 <_svfiprintf_r+0x4e>
 8005094:	fb0c 3202 	mla	r2, ip, r2, r3
 8005098:	460c      	mov	r4, r1
 800509a:	2001      	movs	r0, #1
 800509c:	e7a6      	b.n	8004fec <_svfiprintf_r+0xd4>
 800509e:	2300      	movs	r3, #0
 80050a0:	3401      	adds	r4, #1
 80050a2:	9305      	str	r3, [sp, #20]
 80050a4:	4619      	mov	r1, r3
 80050a6:	f04f 0c0a 	mov.w	ip, #10
 80050aa:	4620      	mov	r0, r4
 80050ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b0:	3a30      	subs	r2, #48	; 0x30
 80050b2:	2a09      	cmp	r2, #9
 80050b4:	d903      	bls.n	80050be <_svfiprintf_r+0x1a6>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0c6      	beq.n	8005048 <_svfiprintf_r+0x130>
 80050ba:	9105      	str	r1, [sp, #20]
 80050bc:	e7c4      	b.n	8005048 <_svfiprintf_r+0x130>
 80050be:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c2:	4604      	mov	r4, r0
 80050c4:	2301      	movs	r3, #1
 80050c6:	e7f0      	b.n	80050aa <_svfiprintf_r+0x192>
 80050c8:	ab03      	add	r3, sp, #12
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	462a      	mov	r2, r5
 80050ce:	4b0f      	ldr	r3, [pc, #60]	; (800510c <_svfiprintf_r+0x1f4>)
 80050d0:	a904      	add	r1, sp, #16
 80050d2:	4638      	mov	r0, r7
 80050d4:	f3af 8000 	nop.w
 80050d8:	1c42      	adds	r2, r0, #1
 80050da:	4606      	mov	r6, r0
 80050dc:	d1d6      	bne.n	800508c <_svfiprintf_r+0x174>
 80050de:	89ab      	ldrh	r3, [r5, #12]
 80050e0:	065b      	lsls	r3, r3, #25
 80050e2:	f53f af2d 	bmi.w	8004f40 <_svfiprintf_r+0x28>
 80050e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050e8:	b01d      	add	sp, #116	; 0x74
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ee:	ab03      	add	r3, sp, #12
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	462a      	mov	r2, r5
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <_svfiprintf_r+0x1f4>)
 80050f6:	a904      	add	r1, sp, #16
 80050f8:	4638      	mov	r0, r7
 80050fa:	f000 f879 	bl	80051f0 <_printf_i>
 80050fe:	e7eb      	b.n	80050d8 <_svfiprintf_r+0x1c0>
 8005100:	08005738 	.word	0x08005738
 8005104:	08005742 	.word	0x08005742
 8005108:	00000000 	.word	0x00000000
 800510c:	08004e65 	.word	0x08004e65
 8005110:	0800573e 	.word	0x0800573e

08005114 <_printf_common>:
 8005114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	4616      	mov	r6, r2
 800511a:	4699      	mov	r9, r3
 800511c:	688a      	ldr	r2, [r1, #8]
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005124:	4293      	cmp	r3, r2
 8005126:	bfb8      	it	lt
 8005128:	4613      	movlt	r3, r2
 800512a:	6033      	str	r3, [r6, #0]
 800512c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005130:	4607      	mov	r7, r0
 8005132:	460c      	mov	r4, r1
 8005134:	b10a      	cbz	r2, 800513a <_printf_common+0x26>
 8005136:	3301      	adds	r3, #1
 8005138:	6033      	str	r3, [r6, #0]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	6833      	ldrmi	r3, [r6, #0]
 8005142:	3302      	addmi	r3, #2
 8005144:	6033      	strmi	r3, [r6, #0]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d106      	bne.n	800515c <_printf_common+0x48>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	6832      	ldr	r2, [r6, #0]
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	42ab      	cmp	r3, r5
 800515a:	dc26      	bgt.n	80051aa <_printf_common+0x96>
 800515c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005160:	1e13      	subs	r3, r2, #0
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	bf18      	it	ne
 8005166:	2301      	movne	r3, #1
 8005168:	0692      	lsls	r2, r2, #26
 800516a:	d42b      	bmi.n	80051c4 <_printf_common+0xb0>
 800516c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d01e      	beq.n	80051b8 <_printf_common+0xa4>
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	6922      	ldr	r2, [r4, #16]
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	2b04      	cmp	r3, #4
 8005184:	bf02      	ittt	eq
 8005186:	68e5      	ldreq	r5, [r4, #12]
 8005188:	6833      	ldreq	r3, [r6, #0]
 800518a:	1aed      	subeq	r5, r5, r3
 800518c:	68a3      	ldr	r3, [r4, #8]
 800518e:	bf0c      	ite	eq
 8005190:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005194:	2500      	movne	r5, #0
 8005196:	4293      	cmp	r3, r2
 8005198:	bfc4      	itt	gt
 800519a:	1a9b      	subgt	r3, r3, r2
 800519c:	18ed      	addgt	r5, r5, r3
 800519e:	2600      	movs	r6, #0
 80051a0:	341a      	adds	r4, #26
 80051a2:	42b5      	cmp	r5, r6
 80051a4:	d11a      	bne.n	80051dc <_printf_common+0xc8>
 80051a6:	2000      	movs	r0, #0
 80051a8:	e008      	b.n	80051bc <_printf_common+0xa8>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4652      	mov	r2, sl
 80051ae:	4649      	mov	r1, r9
 80051b0:	4638      	mov	r0, r7
 80051b2:	47c0      	blx	r8
 80051b4:	3001      	adds	r0, #1
 80051b6:	d103      	bne.n	80051c0 <_printf_common+0xac>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c0:	3501      	adds	r5, #1
 80051c2:	e7c6      	b.n	8005152 <_printf_common+0x3e>
 80051c4:	18e1      	adds	r1, r4, r3
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	2030      	movs	r0, #48	; 0x30
 80051ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ce:	4422      	add	r2, r4
 80051d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051d8:	3302      	adds	r3, #2
 80051da:	e7c7      	b.n	800516c <_printf_common+0x58>
 80051dc:	2301      	movs	r3, #1
 80051de:	4622      	mov	r2, r4
 80051e0:	4649      	mov	r1, r9
 80051e2:	4638      	mov	r0, r7
 80051e4:	47c0      	blx	r8
 80051e6:	3001      	adds	r0, #1
 80051e8:	d0e6      	beq.n	80051b8 <_printf_common+0xa4>
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7d9      	b.n	80051a2 <_printf_common+0x8e>
	...

080051f0 <_printf_i>:
 80051f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f4:	7e0f      	ldrb	r7, [r1, #24]
 80051f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051f8:	2f78      	cmp	r7, #120	; 0x78
 80051fa:	4691      	mov	r9, r2
 80051fc:	4680      	mov	r8, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	469a      	mov	sl, r3
 8005202:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005206:	d807      	bhi.n	8005218 <_printf_i+0x28>
 8005208:	2f62      	cmp	r7, #98	; 0x62
 800520a:	d80a      	bhi.n	8005222 <_printf_i+0x32>
 800520c:	2f00      	cmp	r7, #0
 800520e:	f000 80d4 	beq.w	80053ba <_printf_i+0x1ca>
 8005212:	2f58      	cmp	r7, #88	; 0x58
 8005214:	f000 80c0 	beq.w	8005398 <_printf_i+0x1a8>
 8005218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800521c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005220:	e03a      	b.n	8005298 <_printf_i+0xa8>
 8005222:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005226:	2b15      	cmp	r3, #21
 8005228:	d8f6      	bhi.n	8005218 <_printf_i+0x28>
 800522a:	a101      	add	r1, pc, #4	; (adr r1, 8005230 <_printf_i+0x40>)
 800522c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005230:	08005289 	.word	0x08005289
 8005234:	0800529d 	.word	0x0800529d
 8005238:	08005219 	.word	0x08005219
 800523c:	08005219 	.word	0x08005219
 8005240:	08005219 	.word	0x08005219
 8005244:	08005219 	.word	0x08005219
 8005248:	0800529d 	.word	0x0800529d
 800524c:	08005219 	.word	0x08005219
 8005250:	08005219 	.word	0x08005219
 8005254:	08005219 	.word	0x08005219
 8005258:	08005219 	.word	0x08005219
 800525c:	080053a1 	.word	0x080053a1
 8005260:	080052c9 	.word	0x080052c9
 8005264:	0800535b 	.word	0x0800535b
 8005268:	08005219 	.word	0x08005219
 800526c:	08005219 	.word	0x08005219
 8005270:	080053c3 	.word	0x080053c3
 8005274:	08005219 	.word	0x08005219
 8005278:	080052c9 	.word	0x080052c9
 800527c:	08005219 	.word	0x08005219
 8005280:	08005219 	.word	0x08005219
 8005284:	08005363 	.word	0x08005363
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	602a      	str	r2, [r5, #0]
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005298:	2301      	movs	r3, #1
 800529a:	e09f      	b.n	80053dc <_printf_i+0x1ec>
 800529c:	6820      	ldr	r0, [r4, #0]
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	0607      	lsls	r7, r0, #24
 80052a2:	f103 0104 	add.w	r1, r3, #4
 80052a6:	6029      	str	r1, [r5, #0]
 80052a8:	d501      	bpl.n	80052ae <_printf_i+0xbe>
 80052aa:	681e      	ldr	r6, [r3, #0]
 80052ac:	e003      	b.n	80052b6 <_printf_i+0xc6>
 80052ae:	0646      	lsls	r6, r0, #25
 80052b0:	d5fb      	bpl.n	80052aa <_printf_i+0xba>
 80052b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	da03      	bge.n	80052c2 <_printf_i+0xd2>
 80052ba:	232d      	movs	r3, #45	; 0x2d
 80052bc:	4276      	negs	r6, r6
 80052be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052c2:	485a      	ldr	r0, [pc, #360]	; (800542c <_printf_i+0x23c>)
 80052c4:	230a      	movs	r3, #10
 80052c6:	e012      	b.n	80052ee <_printf_i+0xfe>
 80052c8:	682b      	ldr	r3, [r5, #0]
 80052ca:	6820      	ldr	r0, [r4, #0]
 80052cc:	1d19      	adds	r1, r3, #4
 80052ce:	6029      	str	r1, [r5, #0]
 80052d0:	0605      	lsls	r5, r0, #24
 80052d2:	d501      	bpl.n	80052d8 <_printf_i+0xe8>
 80052d4:	681e      	ldr	r6, [r3, #0]
 80052d6:	e002      	b.n	80052de <_printf_i+0xee>
 80052d8:	0641      	lsls	r1, r0, #25
 80052da:	d5fb      	bpl.n	80052d4 <_printf_i+0xe4>
 80052dc:	881e      	ldrh	r6, [r3, #0]
 80052de:	4853      	ldr	r0, [pc, #332]	; (800542c <_printf_i+0x23c>)
 80052e0:	2f6f      	cmp	r7, #111	; 0x6f
 80052e2:	bf0c      	ite	eq
 80052e4:	2308      	moveq	r3, #8
 80052e6:	230a      	movne	r3, #10
 80052e8:	2100      	movs	r1, #0
 80052ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052ee:	6865      	ldr	r5, [r4, #4]
 80052f0:	60a5      	str	r5, [r4, #8]
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	bfa2      	ittt	ge
 80052f6:	6821      	ldrge	r1, [r4, #0]
 80052f8:	f021 0104 	bicge.w	r1, r1, #4
 80052fc:	6021      	strge	r1, [r4, #0]
 80052fe:	b90e      	cbnz	r6, 8005304 <_printf_i+0x114>
 8005300:	2d00      	cmp	r5, #0
 8005302:	d04b      	beq.n	800539c <_printf_i+0x1ac>
 8005304:	4615      	mov	r5, r2
 8005306:	fbb6 f1f3 	udiv	r1, r6, r3
 800530a:	fb03 6711 	mls	r7, r3, r1, r6
 800530e:	5dc7      	ldrb	r7, [r0, r7]
 8005310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005314:	4637      	mov	r7, r6
 8005316:	42bb      	cmp	r3, r7
 8005318:	460e      	mov	r6, r1
 800531a:	d9f4      	bls.n	8005306 <_printf_i+0x116>
 800531c:	2b08      	cmp	r3, #8
 800531e:	d10b      	bne.n	8005338 <_printf_i+0x148>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	07de      	lsls	r6, r3, #31
 8005324:	d508      	bpl.n	8005338 <_printf_i+0x148>
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	6861      	ldr	r1, [r4, #4]
 800532a:	4299      	cmp	r1, r3
 800532c:	bfde      	ittt	le
 800532e:	2330      	movle	r3, #48	; 0x30
 8005330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005334:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005338:	1b52      	subs	r2, r2, r5
 800533a:	6122      	str	r2, [r4, #16]
 800533c:	f8cd a000 	str.w	sl, [sp]
 8005340:	464b      	mov	r3, r9
 8005342:	aa03      	add	r2, sp, #12
 8005344:	4621      	mov	r1, r4
 8005346:	4640      	mov	r0, r8
 8005348:	f7ff fee4 	bl	8005114 <_printf_common>
 800534c:	3001      	adds	r0, #1
 800534e:	d14a      	bne.n	80053e6 <_printf_i+0x1f6>
 8005350:	f04f 30ff 	mov.w	r0, #4294967295
 8005354:	b004      	add	sp, #16
 8005356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	f043 0320 	orr.w	r3, r3, #32
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	4833      	ldr	r0, [pc, #204]	; (8005430 <_printf_i+0x240>)
 8005364:	2778      	movs	r7, #120	; 0x78
 8005366:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6829      	ldr	r1, [r5, #0]
 800536e:	061f      	lsls	r7, r3, #24
 8005370:	f851 6b04 	ldr.w	r6, [r1], #4
 8005374:	d402      	bmi.n	800537c <_printf_i+0x18c>
 8005376:	065f      	lsls	r7, r3, #25
 8005378:	bf48      	it	mi
 800537a:	b2b6      	uxthmi	r6, r6
 800537c:	07df      	lsls	r7, r3, #31
 800537e:	bf48      	it	mi
 8005380:	f043 0320 	orrmi.w	r3, r3, #32
 8005384:	6029      	str	r1, [r5, #0]
 8005386:	bf48      	it	mi
 8005388:	6023      	strmi	r3, [r4, #0]
 800538a:	b91e      	cbnz	r6, 8005394 <_printf_i+0x1a4>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	2310      	movs	r3, #16
 8005396:	e7a7      	b.n	80052e8 <_printf_i+0xf8>
 8005398:	4824      	ldr	r0, [pc, #144]	; (800542c <_printf_i+0x23c>)
 800539a:	e7e4      	b.n	8005366 <_printf_i+0x176>
 800539c:	4615      	mov	r5, r2
 800539e:	e7bd      	b.n	800531c <_printf_i+0x12c>
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	6826      	ldr	r6, [r4, #0]
 80053a4:	6961      	ldr	r1, [r4, #20]
 80053a6:	1d18      	adds	r0, r3, #4
 80053a8:	6028      	str	r0, [r5, #0]
 80053aa:	0635      	lsls	r5, r6, #24
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0x1c4>
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	e002      	b.n	80053ba <_printf_i+0x1ca>
 80053b4:	0670      	lsls	r0, r6, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0x1c0>
 80053b8:	8019      	strh	r1, [r3, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	4615      	mov	r5, r2
 80053c0:	e7bc      	b.n	800533c <_printf_i+0x14c>
 80053c2:	682b      	ldr	r3, [r5, #0]
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	602a      	str	r2, [r5, #0]
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4628      	mov	r0, r5
 80053d0:	f7fa ff3e 	bl	8000250 <memchr>
 80053d4:	b108      	cbz	r0, 80053da <_printf_i+0x1ea>
 80053d6:	1b40      	subs	r0, r0, r5
 80053d8:	6060      	str	r0, [r4, #4]
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	2300      	movs	r3, #0
 80053e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e4:	e7aa      	b.n	800533c <_printf_i+0x14c>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	462a      	mov	r2, r5
 80053ea:	4649      	mov	r1, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	47d0      	blx	sl
 80053f0:	3001      	adds	r0, #1
 80053f2:	d0ad      	beq.n	8005350 <_printf_i+0x160>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	079b      	lsls	r3, r3, #30
 80053f8:	d413      	bmi.n	8005422 <_printf_i+0x232>
 80053fa:	68e0      	ldr	r0, [r4, #12]
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	4298      	cmp	r0, r3
 8005400:	bfb8      	it	lt
 8005402:	4618      	movlt	r0, r3
 8005404:	e7a6      	b.n	8005354 <_printf_i+0x164>
 8005406:	2301      	movs	r3, #1
 8005408:	4632      	mov	r2, r6
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d09d      	beq.n	8005350 <_printf_i+0x160>
 8005414:	3501      	adds	r5, #1
 8005416:	68e3      	ldr	r3, [r4, #12]
 8005418:	9903      	ldr	r1, [sp, #12]
 800541a:	1a5b      	subs	r3, r3, r1
 800541c:	42ab      	cmp	r3, r5
 800541e:	dcf2      	bgt.n	8005406 <_printf_i+0x216>
 8005420:	e7eb      	b.n	80053fa <_printf_i+0x20a>
 8005422:	2500      	movs	r5, #0
 8005424:	f104 0619 	add.w	r6, r4, #25
 8005428:	e7f5      	b.n	8005416 <_printf_i+0x226>
 800542a:	bf00      	nop
 800542c:	08005749 	.word	0x08005749
 8005430:	0800575a 	.word	0x0800575a

08005434 <memmove>:
 8005434:	4288      	cmp	r0, r1
 8005436:	b510      	push	{r4, lr}
 8005438:	eb01 0402 	add.w	r4, r1, r2
 800543c:	d902      	bls.n	8005444 <memmove+0x10>
 800543e:	4284      	cmp	r4, r0
 8005440:	4623      	mov	r3, r4
 8005442:	d807      	bhi.n	8005454 <memmove+0x20>
 8005444:	1e43      	subs	r3, r0, #1
 8005446:	42a1      	cmp	r1, r4
 8005448:	d008      	beq.n	800545c <memmove+0x28>
 800544a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800544e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005452:	e7f8      	b.n	8005446 <memmove+0x12>
 8005454:	4402      	add	r2, r0
 8005456:	4601      	mov	r1, r0
 8005458:	428a      	cmp	r2, r1
 800545a:	d100      	bne.n	800545e <memmove+0x2a>
 800545c:	bd10      	pop	{r4, pc}
 800545e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005466:	e7f7      	b.n	8005458 <memmove+0x24>

08005468 <_sbrk_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4d06      	ldr	r5, [pc, #24]	; (8005484 <_sbrk_r+0x1c>)
 800546c:	2300      	movs	r3, #0
 800546e:	4604      	mov	r4, r0
 8005470:	4608      	mov	r0, r1
 8005472:	602b      	str	r3, [r5, #0]
 8005474:	f7fb fe7a 	bl	800116c <_sbrk>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_sbrk_r+0x1a>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_sbrk_r+0x1a>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20000384 	.word	0x20000384

08005488 <memcpy>:
 8005488:	440a      	add	r2, r1
 800548a:	4291      	cmp	r1, r2
 800548c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005490:	d100      	bne.n	8005494 <memcpy+0xc>
 8005492:	4770      	bx	lr
 8005494:	b510      	push	{r4, lr}
 8005496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800549e:	4291      	cmp	r1, r2
 80054a0:	d1f9      	bne.n	8005496 <memcpy+0xe>
 80054a2:	bd10      	pop	{r4, pc}

080054a4 <_realloc_r>:
 80054a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a8:	4680      	mov	r8, r0
 80054aa:	4614      	mov	r4, r2
 80054ac:	460e      	mov	r6, r1
 80054ae:	b921      	cbnz	r1, 80054ba <_realloc_r+0x16>
 80054b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b4:	4611      	mov	r1, r2
 80054b6:	f7ff bc49 	b.w	8004d4c <_malloc_r>
 80054ba:	b92a      	cbnz	r2, 80054c8 <_realloc_r+0x24>
 80054bc:	f7ff fbda 	bl	8004c74 <_free_r>
 80054c0:	4625      	mov	r5, r4
 80054c2:	4628      	mov	r0, r5
 80054c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c8:	f000 f81b 	bl	8005502 <_malloc_usable_size_r>
 80054cc:	4284      	cmp	r4, r0
 80054ce:	4607      	mov	r7, r0
 80054d0:	d802      	bhi.n	80054d8 <_realloc_r+0x34>
 80054d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054d6:	d812      	bhi.n	80054fe <_realloc_r+0x5a>
 80054d8:	4621      	mov	r1, r4
 80054da:	4640      	mov	r0, r8
 80054dc:	f7ff fc36 	bl	8004d4c <_malloc_r>
 80054e0:	4605      	mov	r5, r0
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d0ed      	beq.n	80054c2 <_realloc_r+0x1e>
 80054e6:	42bc      	cmp	r4, r7
 80054e8:	4622      	mov	r2, r4
 80054ea:	4631      	mov	r1, r6
 80054ec:	bf28      	it	cs
 80054ee:	463a      	movcs	r2, r7
 80054f0:	f7ff ffca 	bl	8005488 <memcpy>
 80054f4:	4631      	mov	r1, r6
 80054f6:	4640      	mov	r0, r8
 80054f8:	f7ff fbbc 	bl	8004c74 <_free_r>
 80054fc:	e7e1      	b.n	80054c2 <_realloc_r+0x1e>
 80054fe:	4635      	mov	r5, r6
 8005500:	e7df      	b.n	80054c2 <_realloc_r+0x1e>

08005502 <_malloc_usable_size_r>:
 8005502:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005506:	1f18      	subs	r0, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfbc      	itt	lt
 800550c:	580b      	ldrlt	r3, [r1, r0]
 800550e:	18c0      	addlt	r0, r0, r3
 8005510:	4770      	bx	lr
	...

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
