
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005450  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005900  08005900  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005908  08005908  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000060  08005970  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005970  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146dc  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002766  00000000  00000000  000347af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e89  00000000  00000000  00038190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c3d  00000000  00000000  00039019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157c4  00000000  00000000  0005fc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fde17  00000000  00000000  0007541a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005428  00000000  00000000  00173234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0017865c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005618 	.word	0x08005618

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08005618 	.word	0x08005618

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 feaf 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f848 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f968 	bl	80008cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005fc:	f000 f890 	bl	8000720 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000600:	f000 f8d8 	bl	80007b4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000604:	f000 f914 	bl	8000830 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 8000608:	4818      	ldr	r0, [pc, #96]	; (800066c <main+0x80>)
 800060a:	f003 f831 	bl	8003670 <HAL_TIM_Base_Start>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\nYou need to PICK 1 or 2 coins VS AI\n", strlen("\nYou need to PICK 1 or 2 coins VS AI\n"), HAL_MAX_DELAY);
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	2225      	movs	r2, #37	; 0x25
 8000614:	4916      	ldr	r1, [pc, #88]	; (8000670 <main+0x84>)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <main+0x88>)
 8000618:	f003 fbe6 	bl	8003de8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Who pick the last coin Win!!\n", strlen("Who pick the last coin Win!!\n"), HAL_MAX_DELAY);
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	221d      	movs	r2, #29
 8000622:	4915      	ldr	r1, [pc, #84]	; (8000678 <main+0x8c>)
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0x88>)
 8000626:	f003 fbdf 	bl	8003de8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"If you're ready please type\n", strlen("If you're ready please type\n"), HAL_MAX_DELAY);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	221c      	movs	r2, #28
 8000630:	4912      	ldr	r1, [pc, #72]	; (800067c <main+0x90>)
 8000632:	4810      	ldr	r0, [pc, #64]	; (8000674 <main+0x88>)
 8000634:	f003 fbd8 	bl	8003de8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"wanna play this game so bad\n", strlen("wanna play this game so bad\n"), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	221c      	movs	r2, #28
 800063e:	4910      	ldr	r1, [pc, #64]	; (8000680 <main+0x94>)
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x88>)
 8000642:	f003 fbd1 	bl	8003de8 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"and now you can join\n", strlen("and now you can join\n"), HAL_MAX_DELAY);
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	2215      	movs	r2, #21
 800064c:	490d      	ldr	r1, [pc, #52]	; (8000684 <main+0x98>)
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0x88>)
 8000650:	f003 fbca 	bl	8003de8 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  AreYouReadyToPlay();
 8000654:	f000 f9ca 	bl	80009ec <AreYouReadyToPlay>
	      SPITxRx_readIO();
 8000658:	f000 fa18 	bl	8000a8c <SPITxRx_readIO>
	      TikTokGame();
 800065c:	f000 fa40 	bl	8000ae0 <TikTokGame>
	      CoinLeftUART();
 8000660:	f000 fcac 	bl	8000fbc <CoinLeftUART>
	      LEDdisplay();
 8000664:	f000 fc42 	bl	8000eec <LEDdisplay>
  {
 8000668:	e7f4      	b.n	8000654 <main+0x68>
 800066a:	bf00      	nop
 800066c:	20000174 	.word	0x20000174
 8000670:	08005630 	.word	0x08005630
 8000674:	2000007c 	.word	0x2000007c
 8000678:	08005658 	.word	0x08005658
 800067c:	08005678 	.word	0x08005678
 8000680:	08005698 	.word	0x08005698
 8000684:	080056b8 	.word	0x080056b8

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2238      	movs	r2, #56	; 0x38
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fb3a 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f001 fa30 	bl	8001b10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ca:	2355      	movs	r3, #85	; 0x55
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 faca 	bl	8001c78 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ea:	f000 fc97 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fdc8 	bl	800229c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000712:	f000 fc83 	bl	800101c <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <MX_LPUART1_UART_Init+0x90>)
 8000728:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800072c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000730:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f003 faf0 	bl	8003d48 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 fc55 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000776:	f004 f9e1 	bl	8004b3c <HAL_UARTEx_SetTxFifoThreshold>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000780:	f000 fc4c 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000788:	f004 fa16 	bl	8004bb8 <HAL_UARTEx_SetRxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000792:	f000 fc43 	bl	800101c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000798:	f004 f997 	bl	8004aca <HAL_UARTEx_DisableFifoMode>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007a2:	f000 fc3b 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	40008000 	.word	0x40008000

080007b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_SPI3_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_SPI3_Init+0x74>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_SPI3_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI3_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_SPI3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI3_Init+0x74>)
 80007e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ea:	2238      	movs	r2, #56	; 0x38
 80007ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI3_Init+0x74>)
 8000802:	2207      	movs	r2, #7
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI3_Init+0x74>)
 800080e:	2208      	movs	r2, #8
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_SPI3_Init+0x74>)
 8000814:	f002 f9ac 	bl	8002b70 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 fbfd 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000110 	.word	0x20000110
 800082c:	40003c00 	.word	0x40003c00

08000830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000850:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <MX_TIM3_Init+0x98>)
 8000852:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000856:	f244 2267 	movw	r2, #16999	; 0x4267
 800085a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM3_Init+0x94>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000864:	2263      	movs	r2, #99	; 0x63
 8000866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_TIM3_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000876:	f002 fea3 	bl	80035c0 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000880:	f000 fbcc 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000892:	f002 ff5d 	bl	8003750 <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800089c:	f000 fbbe 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_TIM3_Init+0x94>)
 80008ae:	f003 f9b5 	bl	8003c1c <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008b8:	f000 fbb0 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000174 	.word	0x20000174
 80008c8:	40000400 	.word	0x40000400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a3e      	ldr	r2, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a38      	ldr	r2, [pc, #224]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a32      	ldr	r2, [pc, #200]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_GPIO_Init+0x114>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f001 f899 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2104      	movs	r1, #4
 800096a:	481e      	ldr	r0, [pc, #120]	; (80009e4 <MX_GPIO_Init+0x118>)
 800096c:	f001 f894 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4818      	ldr	r0, [pc, #96]	; (80009e8 <MX_GPIO_Init+0x11c>)
 8000988:	f000 feec 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098c:	2320      	movs	r3, #32
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 fedd 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_GPIO_Init+0x118>)
 80009c2:	f000 fecf 	bl	8001764 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2028      	movs	r0, #40	; 0x28
 80009cc:	f000 fe2f 	bl	800162e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d0:	2028      	movs	r0, #40	; 0x28
 80009d2:	f000 fe46 	bl	8001662 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000c00 	.word	0x48000c00
 80009e8:	48000800 	.word	0x48000800

080009ec <AreYouReadyToPlay>:

/* USER CODE BEGIN 4 */
void AreYouReadyToPlay() {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
    while (1) {
        if (ReadyToPlay == 1) // If already ready to play, break the loop
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <AreYouReadyToPlay+0x84>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d034      	beq.n	8000a64 <AreYouReadyToPlay+0x78>
            break;

        memset(RxBuffer, 0, sizeof(RxBuffer)); // Clear the receive buffer
 80009fa:	221b      	movs	r2, #27
 80009fc:	2100      	movs	r1, #0
 80009fe:	481d      	ldr	r0, [pc, #116]	; (8000a74 <AreYouReadyToPlay+0x88>)
 8000a00:	f004 f986 	bl	8004d10 <memset>

        HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, RxBuffer, 27, HAL_MAX_DELAY);
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	221b      	movs	r2, #27
 8000a0a:	491a      	ldr	r1, [pc, #104]	; (8000a74 <AreYouReadyToPlay+0x88>)
 8000a0c:	481a      	ldr	r0, [pc, #104]	; (8000a78 <AreYouReadyToPlay+0x8c>)
 8000a0e:	f003 fa79 	bl	8003f04 <HAL_UART_Receive>
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]

        if (status == HAL_OK && strcmp((char*)RxBuffer, "wanna play this game so bad") == 0) {//correct condition
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d111      	bne.n	8000a40 <AreYouReadyToPlay+0x54>
 8000a1c:	4917      	ldr	r1, [pc, #92]	; (8000a7c <AreYouReadyToPlay+0x90>)
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <AreYouReadyToPlay+0x88>)
 8000a20:	f7ff fbfe 	bl	8000220 <strcmp>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10a      	bne.n	8000a40 <AreYouReadyToPlay+0x54>
            ReadyToPlay=1; //you are ready to play
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <AreYouReadyToPlay+0x84>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Welcome Your Turn start!\n", strlen("Welcome Your Turn start!\n"), HAL_MAX_DELAY);
 8000a30:	f04f 33ff 	mov.w	r3, #4294967295
 8000a34:	2219      	movs	r2, #25
 8000a36:	4912      	ldr	r1, [pc, #72]	; (8000a80 <AreYouReadyToPlay+0x94>)
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <AreYouReadyToPlay+0x8c>)
 8000a3a:	f003 f9d5 	bl	8003de8 <HAL_UART_Transmit>
            break; // Exit the loop once condition is met
 8000a3e:	e012      	b.n	8000a66 <AreYouReadyToPlay+0x7a>
        }
        else {
            ReadyToPlay=0;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <AreYouReadyToPlay+0x84>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Do you really wanna play? Just type\n", strlen("Do you really wanna play? Just type\n"), HAL_MAX_DELAY);
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	2224      	movs	r2, #36	; 0x24
 8000a4c:	490d      	ldr	r1, [pc, #52]	; (8000a84 <AreYouReadyToPlay+0x98>)
 8000a4e:	480a      	ldr	r0, [pc, #40]	; (8000a78 <AreYouReadyToPlay+0x8c>)
 8000a50:	f003 f9ca 	bl	8003de8 <HAL_UART_Transmit>
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"wanna play this game so bad\n", strlen("wanna play this game so bad\n"), HAL_MAX_DELAY);
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	221c      	movs	r2, #28
 8000a5a:	490b      	ldr	r1, [pc, #44]	; (8000a88 <AreYouReadyToPlay+0x9c>)
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <AreYouReadyToPlay+0x8c>)
 8000a5e:	f003 f9c3 	bl	8003de8 <HAL_UART_Transmit>
    while (1) {
 8000a62:	e7c6      	b.n	80009f2 <AreYouReadyToPlay+0x6>
            break;
 8000a64:	bf00      	nop
        }
    }
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000200 	.word	0x20000200
 8000a74:	200001e4 	.word	0x200001e4
 8000a78:	2000007c 	.word	0x2000007c
 8000a7c:	080056d0 	.word	0x080056d0
 8000a80:	080056ec 	.word	0x080056ec
 8000a84:	08005708 	.word	0x08005708
 8000a88:	08005698 	.word	0x08005698

08000a8c <SPITxRx_readIO>:
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
HAL_Delay(5);
}

void SPITxRx_readIO()
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000a90:	2104      	movs	r1, #4
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <SPITxRx_readIO+0x44>)
 8000a94:	f000 ffe8 	bl	8001a68 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d016      	beq.n	8000acc <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <SPITxRx_readIO+0x44>)
 8000aa4:	f000 fff8 	bl	8001a98 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000aaa:	2241      	movs	r2, #65	; 0x41
 8000aac:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000ab0:	2212      	movs	r2, #18
 8000ab2:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SPITxRx_readIO+0x4c>)
 8000ac4:	4903      	ldr	r1, [pc, #12]	; (8000ad4 <SPITxRx_readIO+0x48>)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <SPITxRx_readIO+0x50>)
 8000ac8:	f002 f8fe 	bl	8002cc8 <HAL_SPI_TransmitReceive_IT>
}
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	48000c00 	.word	0x48000c00
 8000ad4:	200001cc 	.word	0x200001cc
 8000ad8:	200001c0 	.word	0x200001c0
 8000adc:	20000110 	.word	0x20000110

08000ae0 <TikTokGame>:

void TikTokGame()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 8000ae4:	4bac      	ldr	r3, [pc, #688]	; (8000d98 <TikTokGame+0x2b8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f040 8188 	bne.w	8000dfe <TikTokGame+0x31e>
    {
    	switch (game_left) {
 8000aee:	4bab      	ldr	r3, [pc, #684]	; (8000d9c <TikTokGame+0x2bc>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	f200 81e1 	bhi.w	8000ebc <TikTokGame+0x3dc>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <TikTokGame+0x20>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000d23 	.word	0x08000d23
 8000b04:	08000c73 	.word	0x08000c73
 8000b08:	08000bc3 	.word	0x08000bc3
 8000b0c:	08000ebd 	.word	0x08000ebd
 8000b10:	08000b15 	.word	0x08000b15
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 8000b14:	4ba2      	ldr	r3, [pc, #648]	; (8000da0 <TikTokGame+0x2c0>)
 8000b16:	789b      	ldrb	r3, [r3, #2]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d84f      	bhi.n	8000bbe <TikTokGame+0xde>
 8000b1e:	a201      	add	r2, pc, #4	; (adr r2, 8000b24 <TikTokGame+0x44>)
 8000b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b24:	08000b89 	.word	0x08000b89
 8000b28:	08000bbf 	.word	0x08000bbf
 8000b2c:	08000b61 	.word	0x08000b61
 8000b30:	08000b39 	.word	0x08000b39
 8000b34:	08000bbf 	.word	0x08000bbf
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000b38:	4b9a      	ldr	r3, [pc, #616]	; (8000da4 <TikTokGame+0x2c4>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000b3e:	4b97      	ldr	r3, [pc, #604]	; (8000d9c <TikTokGame+0x2bc>)
 8000b40:	2204      	movs	r2, #4
 8000b42:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b44:	4b98      	ldr	r3, [pc, #608]	; (8000da8 <TikTokGame+0x2c8>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b4a:	4b93      	ldr	r3, [pc, #588]	; (8000d98 <TikTokGame+0x2b8>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\n", strlen("You pick 1\n"), HAL_MAX_DELAY);
 8000b50:	f04f 33ff 	mov.w	r3, #4294967295
 8000b54:	220b      	movs	r2, #11
 8000b56:	4995      	ldr	r1, [pc, #596]	; (8000dac <TikTokGame+0x2cc>)
 8000b58:	4895      	ldr	r0, [pc, #596]	; (8000db0 <TikTokGame+0x2d0>)
 8000b5a:	f003 f945 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000b5e:	e02f      	b.n	8000bc0 <TikTokGame+0xe0>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000b60:	4b90      	ldr	r3, [pc, #576]	; (8000da4 <TikTokGame+0x2c4>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 8000b66:	4b8d      	ldr	r3, [pc, #564]	; (8000d9c <TikTokGame+0x2bc>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b6c:	4b8e      	ldr	r3, [pc, #568]	; (8000da8 <TikTokGame+0x2c8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b72:	4b89      	ldr	r3, [pc, #548]	; (8000d98 <TikTokGame+0x2b8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 2\n", strlen("You pick 2\n"), HAL_MAX_DELAY);
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	220b      	movs	r2, #11
 8000b7e:	498d      	ldr	r1, [pc, #564]	; (8000db4 <TikTokGame+0x2d4>)
 8000b80:	488b      	ldr	r0, [pc, #556]	; (8000db0 <TikTokGame+0x2d0>)
 8000b82:	f003 f931 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000b86:	e01b      	b.n	8000bc0 <TikTokGame+0xe0>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000b88:	4b86      	ldr	r3, [pc, #536]	; (8000da4 <TikTokGame+0x2c4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000b8e:	4b83      	ldr	r3, [pc, #524]	; (8000d9c <TikTokGame+0x2bc>)
 8000b90:	2205      	movs	r2, #5
 8000b92:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b94:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <TikTokGame+0x2c8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000b9a:	4b7f      	ldr	r3, [pc, #508]	; (8000d98 <TikTokGame+0x2b8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\n", strlen("Loser gonna keep restart\n"), HAL_MAX_DELAY);
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	2219      	movs	r2, #25
 8000ba6:	4984      	ldr	r1, [pc, #528]	; (8000db8 <TikTokGame+0x2d8>)
 8000ba8:	4881      	ldr	r0, [pc, #516]	; (8000db0 <TikTokGame+0x2d0>)
 8000baa:	f003 f91d 	bl	8003de8 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\n", strlen("Your Turn NOW!!\n"), HAL_MAX_DELAY);
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	4981      	ldr	r1, [pc, #516]	; (8000dbc <TikTokGame+0x2dc>)
 8000bb6:	487e      	ldr	r0, [pc, #504]	; (8000db0 <TikTokGame+0x2d0>)
 8000bb8:	f003 f916 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000bbc:	e000      	b.n	8000bc0 <TikTokGame+0xe0>
    	            default: // multi press do nothing
    	                break;
 8000bbe:	bf00      	nop
    	        }
    	        break;
 8000bc0:	e17c      	b.n	8000ebc <TikTokGame+0x3dc>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 8000bc2:	4b77      	ldr	r3, [pc, #476]	; (8000da0 <TikTokGame+0x2c0>)
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	3b03      	subs	r3, #3
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d850      	bhi.n	8000c6e <TikTokGame+0x18e>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <TikTokGame+0xf4>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000c39 	.word	0x08000c39
 8000bd8:	08000c6f 	.word	0x08000c6f
 8000bdc:	08000c11 	.word	0x08000c11
 8000be0:	08000be9 	.word	0x08000be9
 8000be4:	08000c6f 	.word	0x08000c6f
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000be8:	4b6e      	ldr	r3, [pc, #440]	; (8000da4 <TikTokGame+0x2c4>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000bee:	4b6b      	ldr	r3, [pc, #428]	; (8000d9c <TikTokGame+0x2bc>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000bf4:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <TikTokGame+0x2c8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000bfa:	4b67      	ldr	r3, [pc, #412]	; (8000d98 <TikTokGame+0x2b8>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\n", strlen("You pick 1\n"), HAL_MAX_DELAY);
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295
 8000c04:	220b      	movs	r2, #11
 8000c06:	4969      	ldr	r1, [pc, #420]	; (8000dac <TikTokGame+0x2cc>)
 8000c08:	4869      	ldr	r0, [pc, #420]	; (8000db0 <TikTokGame+0x2d0>)
 8000c0a:	f003 f8ed 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000c0e:	e02f      	b.n	8000c70 <TikTokGame+0x190>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000c10:	4b64      	ldr	r3, [pc, #400]	; (8000da4 <TikTokGame+0x2c4>)
 8000c12:	2202      	movs	r2, #2
 8000c14:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000c16:	4b61      	ldr	r3, [pc, #388]	; (8000d9c <TikTokGame+0x2bc>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c1c:	4b62      	ldr	r3, [pc, #392]	; (8000da8 <TikTokGame+0x2c8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000c22:	4b5d      	ldr	r3, [pc, #372]	; (8000d98 <TikTokGame+0x2b8>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 2\n", strlen("You pick 2\n"), HAL_MAX_DELAY);
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	220b      	movs	r2, #11
 8000c2e:	4961      	ldr	r1, [pc, #388]	; (8000db4 <TikTokGame+0x2d4>)
 8000c30:	485f      	ldr	r0, [pc, #380]	; (8000db0 <TikTokGame+0x2d0>)
 8000c32:	f003 f8d9 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000c36:	e01b      	b.n	8000c70 <TikTokGame+0x190>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000c38:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <TikTokGame+0x2c4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000c3e:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <TikTokGame+0x2bc>)
 8000c40:	2205      	movs	r2, #5
 8000c42:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c44:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <TikTokGame+0x2c8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <TikTokGame+0x2b8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\n", strlen("Loser gonna keep restart\n"), HAL_MAX_DELAY);
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	2219      	movs	r2, #25
 8000c56:	4958      	ldr	r1, [pc, #352]	; (8000db8 <TikTokGame+0x2d8>)
 8000c58:	4855      	ldr	r0, [pc, #340]	; (8000db0 <TikTokGame+0x2d0>)
 8000c5a:	f003 f8c5 	bl	8003de8 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\n", strlen("Your Turn NOW!!\n"), HAL_MAX_DELAY);
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	2210      	movs	r2, #16
 8000c64:	4955      	ldr	r1, [pc, #340]	; (8000dbc <TikTokGame+0x2dc>)
 8000c66:	4852      	ldr	r0, [pc, #328]	; (8000db0 <TikTokGame+0x2d0>)
 8000c68:	f003 f8be 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000c6c:	e000      	b.n	8000c70 <TikTokGame+0x190>
    	            default: // multi press do nothing
    	                break;
 8000c6e:	bf00      	nop
    	        }
    	        break;
 8000c70:	e124      	b.n	8000ebc <TikTokGame+0x3dc>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000c72:	4b4b      	ldr	r3, [pc, #300]	; (8000da0 <TikTokGame+0x2c0>)
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	3b03      	subs	r3, #3
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d850      	bhi.n	8000d1e <TikTokGame+0x23e>
 8000c7c:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <TikTokGame+0x1a4>)
 8000c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c82:	bf00      	nop
 8000c84:	08000ce9 	.word	0x08000ce9
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000cc1 	.word	0x08000cc1
 8000c90:	08000c99 	.word	0x08000c99
 8000c94:	08000d1f 	.word	0x08000d1f
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000c98:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <TikTokGame+0x2c4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <TikTokGame+0x2bc>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000ca4:	4b40      	ldr	r3, [pc, #256]	; (8000da8 <TikTokGame+0x2c8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <TikTokGame+0x2b8>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\n", strlen("You pick 1\n"), HAL_MAX_DELAY);
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	220b      	movs	r2, #11
 8000cb6:	493d      	ldr	r1, [pc, #244]	; (8000dac <TikTokGame+0x2cc>)
 8000cb8:	483d      	ldr	r0, [pc, #244]	; (8000db0 <TikTokGame+0x2d0>)
 8000cba:	f003 f895 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000cbe:	e02f      	b.n	8000d20 <TikTokGame+0x240>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000cc0:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <TikTokGame+0x2c4>)
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <TikTokGame+0x2bc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000ccc:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <TikTokGame+0x2c8>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000cd2:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <TikTokGame+0x2b8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 2\n", strlen("You pick 2\n"), HAL_MAX_DELAY);
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	220b      	movs	r2, #11
 8000cde:	4935      	ldr	r1, [pc, #212]	; (8000db4 <TikTokGame+0x2d4>)
 8000ce0:	4833      	ldr	r0, [pc, #204]	; (8000db0 <TikTokGame+0x2d0>)
 8000ce2:	f003 f881 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000ce6:	e01b      	b.n	8000d20 <TikTokGame+0x240>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <TikTokGame+0x2c4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000cee:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <TikTokGame+0x2bc>)
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <TikTokGame+0x2c8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <TikTokGame+0x2b8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\n", strlen("Loser gonna keep restart\n"), HAL_MAX_DELAY);
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	2219      	movs	r2, #25
 8000d06:	492c      	ldr	r1, [pc, #176]	; (8000db8 <TikTokGame+0x2d8>)
 8000d08:	4829      	ldr	r0, [pc, #164]	; (8000db0 <TikTokGame+0x2d0>)
 8000d0a:	f003 f86d 	bl	8003de8 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\n", strlen("Your Turn NOW!!\n"), HAL_MAX_DELAY);
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	2210      	movs	r2, #16
 8000d14:	4929      	ldr	r1, [pc, #164]	; (8000dbc <TikTokGame+0x2dc>)
 8000d16:	4826      	ldr	r0, [pc, #152]	; (8000db0 <TikTokGame+0x2d0>)
 8000d18:	f003 f866 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000d1c:	e000      	b.n	8000d20 <TikTokGame+0x240>
    	            default: // multi press do nothing
    	                break;
 8000d1e:	bf00      	nop
    	        }
    	        break;
 8000d20:	e0cc      	b.n	8000ebc <TikTokGame+0x3dc>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000d22:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <TikTokGame+0x2c0>)
 8000d24:	789b      	ldrb	r3, [r3, #2]
 8000d26:	3b03      	subs	r3, #3
 8000d28:	2b04      	cmp	r3, #4
 8000d2a:	d866      	bhi.n	8000dfa <TikTokGame+0x31a>
 8000d2c:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <TikTokGame+0x254>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	08000dc5 	.word	0x08000dc5
 8000d38:	08000dfb 	.word	0x08000dfb
 8000d3c:	08000d71 	.word	0x08000d71
 8000d40:	08000d49 	.word	0x08000d49
 8000d44:	08000dfb 	.word	0x08000dfb
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000d48:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <TikTokGame+0x2c4>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <TikTokGame+0x2bc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <TikTokGame+0x2c8>)
 8000d56:	2202      	movs	r2, #2
 8000d58:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <TikTokGame+0x2b8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\n", strlen("You pick 1\n"), HAL_MAX_DELAY);
 8000d60:	f04f 33ff 	mov.w	r3, #4294967295
 8000d64:	220b      	movs	r2, #11
 8000d66:	4911      	ldr	r1, [pc, #68]	; (8000dac <TikTokGame+0x2cc>)
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <TikTokGame+0x2d0>)
 8000d6a:	f003 f83d 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000d6e:	e045      	b.n	8000dfc <TikTokGame+0x31c>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <TikTokGame+0x2c4>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <TikTokGame+0x2bc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <TikTokGame+0x2c8>)
 8000d7e:	2202      	movs	r2, #2
 8000d80:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <TikTokGame+0x2b8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Are you blind? I gonna let you pick 1\n", strlen("Are you blind? I gonna let you pick 1\n"), HAL_MAX_DELAY);
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	2226      	movs	r2, #38	; 0x26
 8000d8e:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <TikTokGame+0x2e0>)
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <TikTokGame+0x2d0>)
 8000d92:	f003 f829 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000d96:	e031      	b.n	8000dfc <TikTokGame+0x31c>
 8000d98:	200001dc 	.word	0x200001dc
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	200001c0 	.word	0x200001c0
 8000da4:	200001e0 	.word	0x200001e0
 8000da8:	200001d8 	.word	0x200001d8
 8000dac:	08005730 	.word	0x08005730
 8000db0:	2000007c 	.word	0x2000007c
 8000db4:	0800573c 	.word	0x0800573c
 8000db8:	08005748 	.word	0x08005748
 8000dbc:	08005764 	.word	0x08005764
 8000dc0:	08005778 	.word	0x08005778
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000dc4:	4b40      	ldr	r3, [pc, #256]	; (8000ec8 <TikTokGame+0x3e8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000dca:	4b40      	ldr	r3, [pc, #256]	; (8000ecc <TikTokGame+0x3ec>)
 8000dcc:	2205      	movs	r2, #5
 8000dce:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <TikTokGame+0x3f0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000dd6:	4b3f      	ldr	r3, [pc, #252]	; (8000ed4 <TikTokGame+0x3f4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\n", strlen("Loser gonna keep restart\n"), HAL_MAX_DELAY);
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	2219      	movs	r2, #25
 8000de2:	493d      	ldr	r1, [pc, #244]	; (8000ed8 <TikTokGame+0x3f8>)
 8000de4:	483d      	ldr	r0, [pc, #244]	; (8000edc <TikTokGame+0x3fc>)
 8000de6:	f002 ffff 	bl	8003de8 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\n", strlen("Your Turn NOW!!\n"), HAL_MAX_DELAY);
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	2210      	movs	r2, #16
 8000df0:	493b      	ldr	r1, [pc, #236]	; (8000ee0 <TikTokGame+0x400>)
 8000df2:	483a      	ldr	r0, [pc, #232]	; (8000edc <TikTokGame+0x3fc>)
 8000df4:	f002 fff8 	bl	8003de8 <HAL_UART_Transmit>
    	                break;
 8000df8:	e000      	b.n	8000dfc <TikTokGame+0x31c>
    	            default: // multi press do nothing
    	                break;
 8000dfa:	bf00      	nop
    	        }
    	        break;
 8000dfc:	e05e      	b.n	8000ebc <TikTokGame+0x3dc>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <TikTokGame+0x3ec>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d84f      	bhi.n	8000ea8 <TikTokGame+0x3c8>
 8000e08:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <TikTokGame+0x330>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e87 	.word	0x08000e87
 8000e14:	08000e65 	.word	0x08000e65
 8000e18:	08000e43 	.word	0x08000e43
 8000e1c:	08000e21 	.word	0x08000e21
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <TikTokGame+0x3e8>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000e26:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <TikTokGame+0x3ec>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <TikTokGame+0x3f0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 1\n", strlen("AI pick 1\n"), HAL_MAX_DELAY);
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	220a      	movs	r2, #10
 8000e38:	492a      	ldr	r1, [pc, #168]	; (8000ee4 <TikTokGame+0x404>)
 8000e3a:	4828      	ldr	r0, [pc, #160]	; (8000edc <TikTokGame+0x3fc>)
 8000e3c:	f002 ffd4 	bl	8003de8 <HAL_UART_Transmit>
                break;
 8000e40:	e032      	b.n	8000ea8 <TikTokGame+0x3c8>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <TikTokGame+0x3e8>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <TikTokGame+0x3ec>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <TikTokGame+0x3f0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 1\n", strlen("AI pick 1\n"), HAL_MAX_DELAY);
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	220a      	movs	r2, #10
 8000e5a:	4922      	ldr	r1, [pc, #136]	; (8000ee4 <TikTokGame+0x404>)
 8000e5c:	481f      	ldr	r0, [pc, #124]	; (8000edc <TikTokGame+0x3fc>)
 8000e5e:	f002 ffc3 	bl	8003de8 <HAL_UART_Transmit>
                break;
 8000e62:	e021      	b.n	8000ea8 <TikTokGame+0x3c8>
            case 2:
                // statements
                game_pick = 2; // pick2
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <TikTokGame+0x3e8>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <TikTokGame+0x3ec>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <TikTokGame+0x3f0>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 2\n", strlen("AI pick 2\n"), HAL_MAX_DELAY);
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	220a      	movs	r2, #10
 8000e7c:	491a      	ldr	r1, [pc, #104]	; (8000ee8 <TikTokGame+0x408>)
 8000e7e:	4817      	ldr	r0, [pc, #92]	; (8000edc <TikTokGame+0x3fc>)
 8000e80:	f002 ffb2 	bl	8003de8 <HAL_UART_Transmit>
                break;
 8000e84:	e010      	b.n	8000ea8 <TikTokGame+0x3c8>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <TikTokGame+0x3e8>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <TikTokGame+0x3ec>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <TikTokGame+0x3f0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 1\n", strlen("AI pick 1\n"), HAL_MAX_DELAY);
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9c:	220a      	movs	r2, #10
 8000e9e:	4911      	ldr	r1, [pc, #68]	; (8000ee4 <TikTokGame+0x404>)
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <TikTokGame+0x3fc>)
 8000ea2:	f002 ffa1 	bl	8003de8 <HAL_UART_Transmit>
                break;
 8000ea6:	bf00      	nop
        }
        game_turn = 0;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <TikTokGame+0x3f4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\n", strlen("Your Turn NOW!!\n"), HAL_MAX_DELAY);
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	490a      	ldr	r1, [pc, #40]	; (8000ee0 <TikTokGame+0x400>)
 8000eb6:	4809      	ldr	r0, [pc, #36]	; (8000edc <TikTokGame+0x3fc>)
 8000eb8:	f002 ff96 	bl	8003de8 <HAL_UART_Transmit>
    }
    HAL_Delay(250);//delay
 8000ebc:	20fa      	movs	r0, #250	; 0xfa
 8000ebe:	f000 fab9 	bl	8001434 <HAL_Delay>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001e0 	.word	0x200001e0
 8000ecc:	20000000 	.word	0x20000000
 8000ed0:	200001d8 	.word	0x200001d8
 8000ed4:	200001dc 	.word	0x200001dc
 8000ed8:	08005748 	.word	0x08005748
 8000edc:	2000007c 	.word	0x2000007c
 8000ee0:	08005764 	.word	0x08005764
 8000ee4:	080057a0 	.word	0x080057a0
 8000ee8:	080057ac 	.word	0x080057ac

08000eec <LEDdisplay>:

void LEDdisplay() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	switch (game_winner) {
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <LEDdisplay+0xa8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d028      	beq.n	8000f4a <LEDdisplay+0x5e>
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	dc49      	bgt.n	8000f90 <LEDdisplay+0xa4>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d046      	beq.n	8000f8e <LEDdisplay+0xa2>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d000      	beq.n	8000f06 <LEDdisplay+0x1a>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\n", strlen("But now what?? Let's play again I know You still fun\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
	            break;
	    }
}
 8000f04:	e044      	b.n	8000f90 <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <LEDdisplay+0xac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <LEDdisplay+0xb0>)
 8000f0e:	2205      	movs	r2, #5
 8000f10:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <LEDdisplay+0xa8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000f18:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <LEDdisplay+0xb4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI Win!! Humanity Lost!\n", strlen("AI Win!! Humanity Lost!\n"), HAL_MAX_DELAY);
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	2218      	movs	r2, #24
 8000f24:	491f      	ldr	r1, [pc, #124]	; (8000fa4 <LEDdisplay+0xb8>)
 8000f26:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <LEDdisplay+0xbc>)
 8000f28:	f002 ff5e 	bl	8003de8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Try again we believe in you\n", strlen("Try again we believe in you\n"), HAL_MAX_DELAY);
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	221c      	movs	r2, #28
 8000f32:	491e      	ldr	r1, [pc, #120]	; (8000fac <LEDdisplay+0xc0>)
 8000f34:	481c      	ldr	r0, [pc, #112]	; (8000fa8 <LEDdisplay+0xbc>)
 8000f36:	f002 ff57 	bl	8003de8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	2228      	movs	r2, #40	; 0x28
 8000f40:	491b      	ldr	r1, [pc, #108]	; (8000fb0 <LEDdisplay+0xc4>)
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <LEDdisplay+0xbc>)
 8000f44:	f002 ff50 	bl	8003de8 <HAL_UART_Transmit>
	            break;
 8000f48:	e022      	b.n	8000f90 <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <LEDdisplay+0xac>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <LEDdisplay+0xb0>)
 8000f52:	2205      	movs	r2, #5
 8000f54:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <LEDdisplay+0xa8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <LEDdisplay+0xb4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	221c      	movs	r2, #28
 8000f68:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <LEDdisplay+0xc8>)
 8000f6a:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <LEDdisplay+0xbc>)
 8000f6c:	f002 ff3c 	bl	8003de8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\n", strlen("But now what?? Let's play again I know You still fun\n"), HAL_MAX_DELAY);
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	2235      	movs	r2, #53	; 0x35
 8000f76:	4910      	ldr	r1, [pc, #64]	; (8000fb8 <LEDdisplay+0xcc>)
 8000f78:	480b      	ldr	r0, [pc, #44]	; (8000fa8 <LEDdisplay+0xbc>)
 8000f7a:	f002 ff35 	bl	8003de8 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	2228      	movs	r2, #40	; 0x28
 8000f84:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <LEDdisplay+0xc4>)
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <LEDdisplay+0xbc>)
 8000f88:	f002 ff2e 	bl	8003de8 <HAL_UART_Transmit>
	            break;
 8000f8c:	e000      	b.n	8000f90 <LEDdisplay+0xa4>
	            break;
 8000f8e:	bf00      	nop
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200001d8 	.word	0x200001d8
 8000f98:	200001e0 	.word	0x200001e0
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	200001dc 	.word	0x200001dc
 8000fa4:	080057b8 	.word	0x080057b8
 8000fa8:	2000007c 	.word	0x2000007c
 8000fac:	080057d4 	.word	0x080057d4
 8000fb0:	080057f4 	.word	0x080057f4
 8000fb4:	08005820 	.word	0x08005820
 8000fb8:	08005840 	.word	0x08005840

08000fbc <CoinLeftUART>:
void CoinLeftUART() {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
	 char coin_left_message[30]; // Buffer to store the message
	    sprintf(coin_left_message, "Coin left is %d\r\n", game_left); // Use \r\n for proper newline
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <CoinLeftUART+0x34>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	490a      	ldr	r1, [pc, #40]	; (8000ff4 <CoinLeftUART+0x38>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f003 fe80 	bl	8004cd0 <siprintf>
	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)coin_left_message, strlen(coin_left_message), HAL_MAX_DELAY);
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f92e 	bl	8000234 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4639      	mov	r1, r7
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <CoinLeftUART+0x3c>)
 8000fe4:	f002 ff00 	bl	8003de8 <HAL_UART_Transmit>
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	08005878 	.word	0x08005878
 8000ff8:	2000007c 	.word	0x2000007c

08000ffc <HAL_SPI_TxRxCpltCallback>:
//	}
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8001004:	2201      	movs	r2, #1
 8001006:	2104      	movs	r1, #4
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_SPI_TxRxCpltCallback+0x1c>)
 800100a:	f000 fd45 	bl	8001a98 <HAL_GPIO_WritePin>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	48000c00 	.word	0x48000c00

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_MspInit+0x44>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_MspInit+0x44>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6613      	str	r3, [r2, #96]	; 0x60
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_MspInit+0x44>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x44>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x44>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x44>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800105e:	f000 fdfb 	bl	8001c58 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b09e      	sub	sp, #120	; 0x78
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	2254      	movs	r2, #84	; 0x54
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fe3d 	bl	8004d10 <memset>
  if(huart->Instance==LPUART1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_UART_MspInit+0xa8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d136      	bne.n	800110e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010a0:	2320      	movs	r3, #32
 80010a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fb11 	bl	80026d4 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b8:	f7ff ffb0 	bl	800101c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_UART_MspInit+0xac>)
 80010be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c0:	4a16      	ldr	r2, [pc, #88]	; (800111c <HAL_UART_MspInit+0xac>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <HAL_UART_MspInit+0xac>)
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <HAL_UART_MspInit+0xac>)
 80010d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d8:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_UART_MspInit+0xac>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <HAL_UART_MspInit+0xac>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010ec:	230c      	movs	r3, #12
 80010ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010fc:	230c      	movs	r3, #12
 80010fe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f000 fb2b 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800110e:	bf00      	nop
 8001110:	3778      	adds	r7, #120	; 0x78
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40008000 	.word	0x40008000
 800111c:	40021000 	.word	0x40021000

08001120 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_SPI_MspInit+0x8c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d130      	bne.n	80011a4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_SPI_MspInit+0x90>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a1a      	ldr	r2, [pc, #104]	; (80011b0 <HAL_SPI_MspInit+0x90>)
 8001148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_SPI_MspInit+0x90>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_SPI_MspInit+0x90>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <HAL_SPI_MspInit+0x90>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_SPI_MspInit+0x90>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001172:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001184:	2306      	movs	r3, #6
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4809      	ldr	r0, [pc, #36]	; (80011b4 <HAL_SPI_MspInit+0x94>)
 8001190:	f000 fae8 	bl	8001764 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2033      	movs	r0, #51	; 0x33
 800119a:	f000 fa48 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800119e:	2033      	movs	r0, #51	; 0x33
 80011a0:	f000 fa5f 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40003c00 	.word	0x40003c00
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800

080011b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_TIM_Base_MspInit+0x38>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d10b      	bne.n	80011e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_TIM_Base_MspInit+0x3c>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x3c>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_TIM_Base_MspInit+0x3c>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40000400 	.word	0x40000400
 80011f4:	40021000 	.word	0x40021000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <NMI_Handler+0x4>

080011fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <HardFault_Handler+0x4>

08001204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <MemManage_Handler+0x4>

0800120a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <UsageFault_Handler+0x4>

08001216 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001244:	f000 f8d8 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}

0800124c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001250:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001254:	f000 fc38 	bl	8001ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <SPI3_IRQHandler+0x10>)
 8001262:	f001 fddf 	bl	8002e24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000110 	.word	0x20000110

08001270 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001278:	4a14      	ldr	r2, [pc, #80]	; (80012cc <_sbrk+0x5c>)
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <_sbrk+0x60>)
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <_sbrk+0x64>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d102      	bne.n	8001292 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <_sbrk+0x64>)
 800128e:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <_sbrk+0x68>)
 8001290:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	429a      	cmp	r2, r3
 800129e:	d207      	bcs.n	80012b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a0:	f003 fd3e 	bl	8004d20 <__errno>
 80012a4:	4603      	mov	r3, r0
 80012a6:	220c      	movs	r2, #12
 80012a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	e009      	b.n	80012c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b6:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_sbrk+0x64>)
 80012c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012c2:	68fb      	ldr	r3, [r7, #12]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20020000 	.word	0x20020000
 80012d0:	00000400 	.word	0x00000400
 80012d4:	20000204 	.word	0x20000204
 80012d8:	20000358 	.word	0x20000358

080012dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001302:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ffea 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f003 fcfd 	bl	8004d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff f95b 	bl	80005ec <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   r0, =_estack
 8001338:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001344:	08005910 	.word	0x08005910
  ldr r2, =_sbss
 8001348:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800134c:	20000354 	.word	0x20000354

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>

08001352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f95b 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	2000      	movs	r0, #0
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fe58 	bl	8001028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]

}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d022      	beq.n	80013de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_InitTick+0x6c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_InitTick+0x68>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f966 	bl	800167e <HAL_SYSTICK_Config>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10f      	bne.n	80013d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b0f      	cmp	r3, #15
 80013bc:	d809      	bhi.n	80013d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013be:	2200      	movs	r2, #0
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	f04f 30ff 	mov.w	r0, #4294967295
 80013c6:	f000 f932 	bl	800162e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_InitTick+0x70>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e007      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e004      	b.n	80013e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	73fb      	strb	r3, [r7, #15]
 80013dc:	e001      	b.n	80013e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4413      	add	r3, r2
 8001406:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x1c>)
 8001408:	6013      	str	r3, [r2, #0]
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	20000208 	.word	0x20000208
 8001418:	2000000c 	.word	0x2000000c

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000208 	.word	0x20000208

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d004      	beq.n	8001458 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_Delay+0x40>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001458:	bf00      	nop
 800145a:	f7ff ffdf 	bl	800141c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	429a      	cmp	r2, r3
 8001468:	d8f7      	bhi.n	800145a <HAL_Delay+0x26>
  {
  }
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000000c 	.word	0x2000000c

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff40 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff33 	bl	80014dc <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa4 	bl	80015d4 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d00d      	beq.n	80016ca <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2204      	movs	r2, #4
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e047      	b.n	800175a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 020e 	bic.w	r2, r2, #14
 80016d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f003 021f 	and.w	r2, r3, #31
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2101      	movs	r1, #1
 8001708:	fa01 f202 	lsl.w	r2, r1, r2
 800170c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001716:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00c      	beq.n	800173a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800172e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001738:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	4798      	blx	r3
    }
  }
  return status;
 800175a:	7bfb      	ldrb	r3, [r7, #15]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001772:	e15a      	b.n	8001a2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 814c 	beq.w	8001a24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0303 	and.w	r3, r3, #3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d005      	beq.n	80017a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d130      	bne.n	8001806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017da:	2201      	movs	r2, #1
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 0201 	and.w	r2, r3, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	2b03      	cmp	r3, #3
 8001810:	d017      	beq.n	8001842 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d123      	bne.n	8001896 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	220f      	movs	r2, #15
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	08da      	lsrs	r2, r3, #3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3208      	adds	r2, #8
 8001890:	6939      	ldr	r1, [r7, #16]
 8001892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0203 	and.w	r2, r3, #3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a6 	beq.w	8001a24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d8:	4b5b      	ldr	r3, [pc, #364]	; (8001a48 <HAL_GPIO_Init+0x2e4>)
 80018da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018dc:	4a5a      	ldr	r2, [pc, #360]	; (8001a48 <HAL_GPIO_Init+0x2e4>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6613      	str	r3, [r2, #96]	; 0x60
 80018e4:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_GPIO_Init+0x2e4>)
 80018e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f0:	4a56      	ldr	r2, [pc, #344]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	089b      	lsrs	r3, r3, #2
 80018f6:	3302      	adds	r3, #2
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800191a:	d01f      	beq.n	800195c <HAL_GPIO_Init+0x1f8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_GPIO_Init+0x2ec>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d019      	beq.n	8001958 <HAL_GPIO_Init+0x1f4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a4b      	ldr	r2, [pc, #300]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d013      	beq.n	8001954 <HAL_GPIO_Init+0x1f0>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a4a      	ldr	r2, [pc, #296]	; (8001a58 <HAL_GPIO_Init+0x2f4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_GPIO_Init+0x1ec>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a49      	ldr	r2, [pc, #292]	; (8001a5c <HAL_GPIO_Init+0x2f8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0x1e8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <HAL_GPIO_Init+0x2fc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_GPIO_Init+0x1e4>
 8001944:	2305      	movs	r3, #5
 8001946:	e00a      	b.n	800195e <HAL_GPIO_Init+0x1fa>
 8001948:	2306      	movs	r3, #6
 800194a:	e008      	b.n	800195e <HAL_GPIO_Init+0x1fa>
 800194c:	2304      	movs	r3, #4
 800194e:	e006      	b.n	800195e <HAL_GPIO_Init+0x1fa>
 8001950:	2303      	movs	r3, #3
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1fa>
 8001954:	2302      	movs	r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1fa>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1fa>
 800195c:	2300      	movs	r3, #0
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800196e:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800197c:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <HAL_GPIO_Init+0x300>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a0:	4a30      	ldr	r2, [pc, #192]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019a6:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ca:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019d0:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <HAL_GPIO_Init+0x300>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a1e:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <HAL_GPIO_Init+0x300>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f ae9d 	bne.w	8001774 <HAL_GPIO_Init+0x10>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	48001000 	.word	0x48001000
 8001a60:	48001400 	.word	0x48001400
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	887b      	ldrh	r3, [r7, #2]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d006      	beq.n	8001aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f806 	bl	8001af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d141      	bne.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2a:	d131      	bne.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b32:	4a46      	ldr	r2, [pc, #280]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3c:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b44:	4a41      	ldr	r2, [pc, #260]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2232      	movs	r2, #50	; 0x32
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	4a3f      	ldr	r2, [pc, #252]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b62:	e002      	b.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d102      	bne.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f2      	bne.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b7e:	4b33      	ldr	r3, [pc, #204]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8a:	d158      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e057      	b.n	8001c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b90:	4b2e      	ldr	r3, [pc, #184]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b96:	4a2d      	ldr	r2, [pc, #180]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ba0:	e04d      	b.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba8:	d141      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001baa:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d131      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bbe:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd0:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2232      	movs	r2, #50	; 0x32
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	0c9b      	lsrs	r3, r3, #18
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bee:	e002      	b.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c02:	d102      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f2      	bne.n	8001bf0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c16:	d112      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e011      	b.n	8001c40 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c22:	4a0a      	ldr	r2, [pc, #40]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c2c:	e007      	b.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c36:	4a05      	ldr	r2, [pc, #20]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	20000004 	.word	0x20000004
 8001c54:	431bde83 	.word	0x431bde83

08001c58 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c66:	6093      	str	r3, [r2, #8]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e2fe      	b.n	8002288 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d075      	beq.n	8001d82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4b97      	ldr	r3, [pc, #604]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d102      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3e>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_OscConfig+0x44>
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d10b      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	4b8d      	ldr	r3, [pc, #564]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d05b      	beq.n	8001d80 <HAL_RCC_OscConfig+0x108>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d157      	bne.n	8001d80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e2d9      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d106      	bne.n	8001cec <HAL_RCC_OscConfig+0x74>
 8001cde:	4b85      	ldr	r3, [pc, #532]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a84      	ldr	r2, [pc, #528]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e01d      	b.n	8001d28 <HAL_RCC_OscConfig+0xb0>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf4:	d10c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x98>
 8001cf6:	4b7f      	ldr	r3, [pc, #508]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7e      	ldr	r2, [pc, #504]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b7c      	ldr	r3, [pc, #496]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7b      	ldr	r2, [pc, #492]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0xb0>
 8001d10:	4b78      	ldr	r3, [pc, #480]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a77      	ldr	r2, [pc, #476]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b75      	ldr	r3, [pc, #468]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a74      	ldr	r2, [pc, #464]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff fb74 	bl	800141c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d38:	f7ff fb70 	bl	800141c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e29e      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	4b6a      	ldr	r3, [pc, #424]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0xc0>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fb60 	bl	800141c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff fb5c 	bl	800141c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e28a      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0xe8>
 8001d7e:	e000      	b.n	8001d82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d075      	beq.n	8001e7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d98:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d102      	bne.n	8001dae <HAL_RCC_OscConfig+0x136>
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d002      	beq.n	8001db4 <HAL_RCC_OscConfig+0x13c>
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d11f      	bne.n	8001df4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_OscConfig+0x154>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e25d      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b49      	ldr	r3, [pc, #292]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	4946      	ldr	r1, [pc, #280]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001de0:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff facd 	bl	8001384 <HAL_InitTick>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d043      	beq.n	8001e78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e249      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfc:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fb08 	bl	800141c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff fb04 	bl	800141c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e232      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e22:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	061b      	lsls	r3, r3, #24
 8001e3c:	492d      	ldr	r1, [pc, #180]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	604b      	str	r3, [r1, #4]
 8001e42:	e01a      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2a      	ldr	r2, [pc, #168]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff fae4 	bl	800141c <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fae0 	bl	800141c <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e20e      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1e0>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d041      	beq.n	8001f0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d01c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e94:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001e96:	f043 0301 	orr.w	r3, r3, #1
 8001e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fabd 	bl	800141c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fab9 	bl	800141c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1e7      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0ef      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x22e>
 8001ec6:	e020      	b.n	8001f0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ece:	4a09      	ldr	r2, [pc, #36]	; (8001ef4 <HAL_RCC_OscConfig+0x27c>)
 8001ed0:	f023 0301 	bic.w	r3, r3, #1
 8001ed4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff faa0 	bl	800141c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ede:	e00d      	b.n	8001efc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fa9c 	bl	800141c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d906      	bls.n	8001efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1ca      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001efc:	4b8c      	ldr	r3, [pc, #560]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ea      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80a6 	beq.w	8002064 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f1c:	4b84      	ldr	r3, [pc, #528]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2b4>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x2b6>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00d      	beq.n	8001f4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b7f      	ldr	r3, [pc, #508]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	4a7e      	ldr	r2, [pc, #504]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f3e:	4b7c      	ldr	r3, [pc, #496]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4e:	4b79      	ldr	r3, [pc, #484]	; (8002134 <HAL_RCC_OscConfig+0x4bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x4bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x4bc>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7ff fa59 	bl	800141c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7ff fa55 	bl	800141c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e183      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x4bc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d108      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x32e>
 8001f94:	4b66      	ldr	r3, [pc, #408]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a65      	ldr	r2, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	e024      	b.n	8001ff0 <HAL_RCC_OscConfig+0x378>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d110      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x358>
 8001fae:	4b60      	ldr	r3, [pc, #384]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	4a5e      	ldr	r2, [pc, #376]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fce:	e00f      	b.n	8001ff0 <HAL_RCC_OscConfig+0x378>
 8001fd0:	4b57      	ldr	r3, [pc, #348]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	4a56      	ldr	r2, [pc, #344]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d016      	beq.n	8002026 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff8:	f7ff fa10 	bl	800141c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002000:	f7ff fa0c 	bl	800141c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	; 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e138      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002016:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ed      	beq.n	8002000 <HAL_RCC_OscConfig+0x388>
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7ff f9f9 	bl	800141c <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff f9f5 	bl	800141c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e121      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002044:	4b3a      	ldr	r3, [pc, #232]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ed      	bne.n	800202e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b35      	ldr	r3, [pc, #212]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a34      	ldr	r2, [pc, #208]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d03c      	beq.n	80020ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207e:	4a2c      	ldr	r2, [pc, #176]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff f9c8 	bl	800141c <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002090:	f7ff f9c4 	bl	800141c <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0f2      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 80020a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0ef      	beq.n	8002090 <HAL_RCC_OscConfig+0x418>
 80020b0:	e01b      	b.n	80020ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 80020b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b8:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7ff f9ab 	bl	800141c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ca:	f7ff f9a7 	bl	800141c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0d5      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 80020de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1ef      	bne.n	80020ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80c9 	beq.w	8002286 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f4:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 030c 	and.w	r3, r3, #12
 80020fc:	2b0c      	cmp	r3, #12
 80020fe:	f000 8083 	beq.w	8002208 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d15e      	bne.n	80021c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x4b8>)
 8002110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002116:	f7ff f981 	bl	800141c <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	e00c      	b.n	8002138 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff f97d 	bl	800141c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d905      	bls.n	8002138 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0ab      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
 8002130:	40021000 	.word	0x40021000
 8002134:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	4b55      	ldr	r3, [pc, #340]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ec      	bne.n	800211e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002144:	4b52      	ldr	r3, [pc, #328]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <HAL_RCC_OscConfig+0x61c>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6a11      	ldr	r1, [r2, #32]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002154:	3a01      	subs	r2, #1
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	4311      	orrs	r1, r2
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800215e:	0212      	lsls	r2, r2, #8
 8002160:	4311      	orrs	r1, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	3a01      	subs	r2, #1
 800216a:	0552      	lsls	r2, r2, #21
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002172:	0852      	lsrs	r2, r2, #1
 8002174:	3a01      	subs	r2, #1
 8002176:	0652      	lsls	r2, r2, #25
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800217e:	06d2      	lsls	r2, r2, #27
 8002180:	430a      	orrs	r2, r1
 8002182:	4943      	ldr	r1, [pc, #268]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 8002184:	4313      	orrs	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a40      	ldr	r2, [pc, #256]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7ff f93c 	bl	800141c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f938 	bl	800141c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e066      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b35      	ldr	r3, [pc, #212]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x530>
 80021c6:	e05e      	b.n	8002286 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a30      	ldr	r2, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 80021ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d4:	f7ff f922 	bl	800141c <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021dc:	f7ff f91e 	bl	800141c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e04c      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4924      	ldr	r1, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_RCC_OscConfig+0x620>)
 8002202:	4013      	ands	r3, r2
 8002204:	60cb      	str	r3, [r1, #12]
 8002206:	e03e      	b.n	8002286 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e039      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0203 	and.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	429a      	cmp	r2, r3
 8002226:	d12c      	bne.n	8002282 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d123      	bne.n	8002282 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d11b      	bne.n	8002282 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d113      	bne.n	8002282 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800226a:	429a      	cmp	r2, r3
 800226c:	d109      	bne.n	8002282 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002278:	085b      	lsrs	r3, r3, #1
 800227a:	3b01      	subs	r3, #1
 800227c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227e:	429a      	cmp	r2, r3
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	019f800c 	.word	0x019f800c
 8002298:	feeefffc 	.word	0xfeeefffc

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e11e      	b.n	80024f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b91      	ldr	r3, [pc, #580]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d910      	bls.n	80022e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b8e      	ldr	r3, [pc, #568]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 020f 	bic.w	r2, r3, #15
 80022ca:	498c      	ldr	r1, [pc, #560]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d2:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d001      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e106      	b.n	80024f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d073      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b03      	cmp	r3, #3
 80022f6:	d129      	bne.n	800234c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f8:	4b81      	ldr	r3, [pc, #516]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0f4      	b.n	80024f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002308:	f000 f99e 	bl	8002648 <RCC_GetSysClockFreqFromPLLSource>
 800230c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4a7c      	ldr	r2, [pc, #496]	; (8002504 <HAL_RCC_ClockConfig+0x268>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d93f      	bls.n	8002396 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002316:	4b7a      	ldr	r3, [pc, #488]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d009      	beq.n	8002336 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800232a:	2b00      	cmp	r3, #0
 800232c:	d033      	beq.n	8002396 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d12f      	bne.n	8002396 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002336:	4b72      	ldr	r3, [pc, #456]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800233e:	4a70      	ldr	r2, [pc, #448]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e024      	b.n	8002396 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d107      	bne.n	8002364 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002354:	4b6a      	ldr	r3, [pc, #424]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0c6      	b.n	80024f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0be      	b.n	80024f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002374:	f000 f8ce 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 8002378:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_RCC_ClockConfig+0x268>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d909      	bls.n	8002396 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800238a:	4a5d      	ldr	r2, [pc, #372]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 800238c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002390:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002396:	4b5a      	ldr	r3, [pc, #360]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4957      	ldr	r1, [pc, #348]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a8:	f7ff f838 	bl	800141c <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7ff f834 	bl	800141c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e095      	b.n	80024f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 020c 	and.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1eb      	bne.n	80023b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d023      	beq.n	800242c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f0:	4b43      	ldr	r3, [pc, #268]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a42      	ldr	r2, [pc, #264]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80023f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002408:	4b3d      	ldr	r3, [pc, #244]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002410:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002416:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b39      	ldr	r3, [pc, #228]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	4936      	ldr	r1, [pc, #216]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
 800242a:	e008      	b.n	800243e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b80      	cmp	r3, #128	; 0x80
 8002430:	d105      	bne.n	800243e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002432:	4b33      	ldr	r3, [pc, #204]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4a32      	ldr	r2, [pc, #200]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002438:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d21d      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f023 020f 	bic.w	r2, r3, #15
 8002454:	4929      	ldr	r1, [pc, #164]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800245c:	f7fe ffde 	bl	800141c <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7fe ffda 	bl	800141c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e03b      	b.n	80024f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_ClockConfig+0x260>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d1ed      	bne.n	8002464 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4917      	ldr	r1, [pc, #92]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490f      	ldr	r1, [pc, #60]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024c6:	f000 f825 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490c      	ldr	r1, [pc, #48]	; (8002508 <HAL_RCC_ClockConfig+0x26c>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a0a      	ldr	r2, [pc, #40]	; (800250c <HAL_RCC_ClockConfig+0x270>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe ff4a 	bl	8001384 <HAL_InitTick>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
 8002504:	04c4b400 	.word	0x04c4b400
 8002508:	0800588c 	.word	0x0800588c
 800250c:	20000004 	.word	0x20000004
 8002510:	20000008 	.word	0x20000008

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b04      	cmp	r3, #4
 8002524:	d102      	bne.n	800252c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	e047      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d102      	bne.n	800253e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	e03e      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800253e:	4b23      	ldr	r3, [pc, #140]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d136      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002554:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3301      	adds	r3, #1
 8002560:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d10c      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002568:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002572:	68d2      	ldr	r2, [r2, #12]
 8002574:	0a12      	lsrs	r2, r2, #8
 8002576:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	617b      	str	r3, [r7, #20]
      break;
 8002580:	e00c      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002582:	4a13      	ldr	r2, [pc, #76]	; (80025d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	fbb2 f3f3 	udiv	r3, r2, r3
 800258a:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800258c:	68d2      	ldr	r2, [r2, #12]
 800258e:	0a12      	lsrs	r2, r2, #8
 8002590:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002594:	fb02 f303 	mul.w	r3, r2, r3
 8002598:	617b      	str	r3, [r7, #20]
      break;
 800259a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0e5b      	lsrs	r3, r3, #25
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	e001      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025bc:	693b      	ldr	r3, [r7, #16]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	371c      	adds	r7, #28
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	016e3600 	.word	0x016e3600

080025d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000004 	.word	0x20000004

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4904      	ldr	r1, [pc, #16]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	f003 031f 	and.w	r3, r3, #31
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	0800589c 	.word	0x0800589c

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002620:	f7ff ffda 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0adb      	lsrs	r3, r3, #11
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40021000 	.word	0x40021000
 8002644:	0800589c 	.word	0x0800589c

08002648 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3301      	adds	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d10c      	bne.n	8002686 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002676:	68d2      	ldr	r2, [r2, #12]
 8002678:	0a12      	lsrs	r2, r2, #8
 800267a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
    break;
 8002684:	e00c      	b.n	80026a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	0a12      	lsrs	r2, r2, #8
 8002694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    break;
 800269e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	0e5b      	lsrs	r3, r3, #25
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ba:	687b      	ldr	r3, [r7, #4]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000
 80026cc:	016e3600 	.word	0x016e3600
 80026d0:	00f42400 	.word	0x00f42400

080026d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026dc:	2300      	movs	r3, #0
 80026de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026e0:	2300      	movs	r3, #0
 80026e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8098 	beq.w	8002822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10d      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	4b40      	ldr	r3, [pc, #256]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6593      	str	r3, [r2, #88]	; 0x58
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271a:	2301      	movs	r3, #1
 800271c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a39      	ldr	r2, [pc, #228]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002728:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800272a:	f7fe fe77 	bl	800141c <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002730:	e009      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fe73 	bl	800141c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d902      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	74fb      	strb	r3, [r7, #19]
        break;
 8002744:	e005      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002746:	4b30      	ldr	r3, [pc, #192]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ef      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d159      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002758:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002762:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01e      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	d019      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002774:	4b23      	ldr	r3, [pc, #140]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002790:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027a0:	4a18      	ldr	r2, [pc, #96]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d016      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7fe fe33 	bl	800141c <HAL_GetTick>
 80027b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b8:	e00b      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fe2f 	bl	800141c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d902      	bls.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	74fb      	strb	r3, [r7, #19]
            break;
 80027d0:	e006      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ec      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10b      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	4903      	ldr	r1, [pc, #12]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027fc:	e008      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	74bb      	strb	r3, [r7, #18]
 8002802:	e005      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002810:	7c7b      	ldrb	r3, [r7, #17]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d105      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002816:	4ba7      	ldr	r3, [pc, #668]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	4aa6      	ldr	r2, [pc, #664]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002820:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800282e:	4ba1      	ldr	r3, [pc, #644]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f023 0203 	bic.w	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	499d      	ldr	r1, [pc, #628]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002850:	4b98      	ldr	r3, [pc, #608]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f023 020c 	bic.w	r2, r3, #12
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	4995      	ldr	r1, [pc, #596]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002872:	4b90      	ldr	r3, [pc, #576]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	498c      	ldr	r1, [pc, #560]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002894:	4b87      	ldr	r3, [pc, #540]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	4984      	ldr	r1, [pc, #528]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028b6:	4b7f      	ldr	r3, [pc, #508]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	497b      	ldr	r1, [pc, #492]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d8:	4b76      	ldr	r3, [pc, #472]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	4973      	ldr	r1, [pc, #460]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028fa:	4b6e      	ldr	r3, [pc, #440]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	496a      	ldr	r1, [pc, #424]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800291c:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4962      	ldr	r1, [pc, #392]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800293e:	4b5d      	ldr	r3, [pc, #372]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	4959      	ldr	r1, [pc, #356]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002960:	4b54      	ldr	r3, [pc, #336]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	4951      	ldr	r1, [pc, #324]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002982:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4948      	ldr	r1, [pc, #288]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a4:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4940      	ldr	r1, [pc, #256]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c4:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a3a      	ldr	r2, [pc, #232]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029dc:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ea:	4932      	ldr	r1, [pc, #200]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fa:	d105      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a14:	4b27      	ldr	r3, [pc, #156]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	4924      	ldr	r1, [pc, #144]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a1e      	ldr	r2, [pc, #120]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5a:	4916      	ldr	r1, [pc, #88]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a10      	ldr	r2, [pc, #64]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d019      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4908      	ldr	r1, [pc, #32]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa2:	d109      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a02      	ldr	r2, [pc, #8]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d015      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ac4:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4926      	ldr	r1, [pc, #152]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ae2:	d105      	bne.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a20      	ldr	r2, [pc, #128]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b0a:	4918      	ldr	r1, [pc, #96]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b34:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b42:	490a      	ldr	r1, [pc, #40]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b52:	d105      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b60:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000

08002b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e09d      	b.n	8002cbe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d108      	bne.n	8002b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b92:	d009      	beq.n	8002ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
 8002b9a:	e005      	b.n	8002ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe faac 	bl	8001120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002be8:	d902      	bls.n	8002bf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	e002      	b.n	8002bf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bfe:	d007      	beq.n	8002c10 <HAL_SPI_Init+0xa0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	ea42 0103 	orr.w	r1, r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	f003 0204 	and.w	r2, r3, #4
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ce0:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ce8:	7dbb      	ldrb	r3, [r7, #22]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d00d      	beq.n	8002d0a <HAL_SPI_TransmitReceive_IT+0x42>
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cf4:	d106      	bne.n	8002d04 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002cfe:	7dbb      	ldrb	r3, [r7, #22]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d002      	beq.n	8002d0a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
 8002d06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d08:	e07d      	b.n	8002e06 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_SPI_TransmitReceive_IT+0x54>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_SPI_TransmitReceive_IT+0x54>
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d20:	e071      	b.n	8002e06 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_SPI_TransmitReceive_IT+0x68>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e06b      	b.n	8002e08 <HAL_SPI_TransmitReceive_IT+0x140>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d003      	beq.n	8002d4c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2205      	movs	r2, #5
 8002d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	887a      	ldrh	r2, [r7, #2]
 8002d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	887a      	ldrh	r2, [r7, #2]
 8002d76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d82:	d906      	bls.n	8002d92 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002d88:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	; (8002e18 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002d8e:	651a      	str	r2, [r3, #80]	; 0x50
 8002d90:	e005      	b.n	8002d9e <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <HAL_SPI_TransmitReceive_IT+0x154>)
 8002d96:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002d9c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002da6:	d802      	bhi.n	8002dae <HAL_SPI_TransmitReceive_IT+0xe6>
 8002da8:	887b      	ldrh	r3, [r7, #2]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d908      	bls.n	8002dc0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e007      	b.n	8002dd0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dce:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d007      	beq.n	8002dee <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dec:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002e04:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	080031af 	.word	0x080031af
 8002e18:	08003215 	.word	0x08003215
 8002e1c:	0800305f 	.word	0x0800305f
 8002e20:	0800311d 	.word	0x0800311d

08002e24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10e      	bne.n	8002e64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d009      	beq.n	8002e64 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
    return;
 8002e62:	e0ce      	b.n	8003002 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_SPI_IRQHandler+0x5e>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d004      	beq.n	8002e82 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
    return;
 8002e80:	e0bf      	b.n	8003002 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_SPI_IRQHandler+0x7e>
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 80b0 	beq.w	8003002 <HAL_SPI_IRQHandler+0x1de>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80aa 	beq.w	8003002 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d023      	beq.n	8002f00 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d011      	beq.n	8002ee8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	e00b      	b.n	8002f00 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
        return;
 8002efe:	e080      	b.n	8003002 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d014      	beq.n	8002f34 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00c      	beq.n	8002f58 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	f043 0208 	orr.w	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d04f      	beq.n	8003000 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <HAL_SPI_IRQHandler+0x168>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d034      	beq.n	8002ff6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0203 	bic.w	r2, r2, #3
 8002f9a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d011      	beq.n	8002fc8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a17      	ldr	r2, [pc, #92]	; (8003008 <HAL_SPI_IRQHandler+0x1e4>)
 8002faa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7fe fb70 	bl	8001696 <HAL_DMA_Abort_IT>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d016      	beq.n	8002ffe <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <HAL_SPI_IRQHandler+0x1e4>)
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe fb5a 	bl	8001696 <HAL_DMA_Abort_IT>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002ff4:	e003      	b.n	8002ffe <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f812 	bl	8003020 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ffc:	e000      	b.n	8003000 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002ffe:	bf00      	nop
    return;
 8003000:	bf00      	nop
  }
}
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08003035 	.word	0x08003035

0800300c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f7ff ffe5 	bl	8003020 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d923      	bls.n	80030ba <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	b292      	uxth	r2, r2
 800307e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	1c9a      	adds	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b02      	subs	r3, #2
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d11f      	bne.n	80030e8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	e016      	b.n	80030e8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f103 020c 	add.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	7812      	ldrb	r2, [r2, #0]
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10f      	bne.n	8003114 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003102:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fa14 	bl	800353c <SPI_CloseRxTx_ISR>
    }
  }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d912      	bls.n	8003154 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b02      	subs	r3, #2
 800314c:	b29a      	uxth	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003152:	e012      	b.n	800317a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800317e:	b29b      	uxth	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d110      	bne.n	80031a6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003192:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d102      	bne.n	80031a6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f9cb 	bl	800353c <SPI_CloseRxTx_ISR>
    }
  }
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	b292      	uxth	r2, r2
 80031c2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	1c9a      	adds	r2, r3, #2
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10f      	bne.n	800320c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d102      	bne.n	800320c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f998 	bl	800353c <SPI_CloseRxTx_ISR>
    }
  }
}
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	1c9a      	adds	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d110      	bne.n	800326c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003258:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f968 	bl	800353c <SPI_CloseRxTx_ISR>
    }
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003284:	f7fe f8ca 	bl	800141c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003294:	f7fe f8c2 	bl	800141c <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329a:	4b39      	ldr	r3, [pc, #228]	; (8003380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032aa:	e054      	b.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d050      	beq.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b4:	f7fe f8b2 	bl	800141c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d902      	bls.n	80032ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13d      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e2:	d111      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ec:	d004      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f6:	d107      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003310:	d10f      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e017      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3b01      	subs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d19b      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000004 	.word	0x20000004

08003384 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003396:	f7fe f841 	bl	800141c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80033a6:	f7fe f839 	bl	800141c <HAL_GetTick>
 80033aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033b4:	4b3d      	ldr	r3, [pc, #244]	; (80034ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00da      	lsls	r2, r3, #3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	0d1b      	lsrs	r3, r3, #20
 80033c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033cc:	e060      	b.n	8003490 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80033d4:	d107      	bne.n	80033e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d050      	beq.n	8003490 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033ee:	f7fe f815 	bl	800141c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d902      	bls.n	8003404 <SPI_WaitFifoStateUntilTimeout+0x80>
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	d13d      	bne.n	8003480 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003412:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800341c:	d111      	bne.n	8003442 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003426:	d004      	beq.n	8003432 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d107      	bne.n	8003442 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003440:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344a:	d10f      	bne.n	800346c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800346a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e010      	b.n	80034a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	3b01      	subs	r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d196      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3728      	adds	r7, #40	; 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000004 	.word	0x20000004

080034b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff ff5b 	bl	8003384 <SPI_WaitFifoStateUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e027      	b.n	8003534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fec0 	bl	8003274 <SPI_WaitFlagStateUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	f043 0220 	orr.w	r2, r3, #32
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e014      	b.n	8003534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2200      	movs	r2, #0
 8003512:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff ff34 	bl	8003384 <SPI_WaitFifoStateUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e000      	b.n	8003534 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003544:	f7fd ff6a 	bl	800141c <HAL_GetTick>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0220 	bic.w	r2, r2, #32
 8003558:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	2164      	movs	r1, #100	; 0x64
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffa6 	bl	80034b0 <SPI_EndRxTxTransaction>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800357a:	2b00      	cmp	r3, #0
 800357c:	d115      	bne.n	80035aa <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b04      	cmp	r3, #4
 8003588:	d107      	bne.n	800359a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fd3a 	bl	800300c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003598:	e00e      	b.n	80035b8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd fd2a 	bl	8000ffc <HAL_SPI_TxRxCpltCallback>
}
 80035a8:	e006      	b.n	80035b8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff fd34 	bl	8003020 <HAL_SPI_ErrorCallback>
}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e049      	b.n	8003666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd fde6 	bl	80011b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f000 f9bc 	bl	800397c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d001      	beq.n	8003688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e04c      	b.n	8003722 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	; (8003730 <HAL_TIM_Base_Start+0xc0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <HAL_TIM_Base_Start+0x70>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a2:	d01d      	beq.n	80036e0 <HAL_TIM_Base_Start+0x70>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a22      	ldr	r2, [pc, #136]	; (8003734 <HAL_TIM_Base_Start+0xc4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d018      	beq.n	80036e0 <HAL_TIM_Base_Start+0x70>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a21      	ldr	r2, [pc, #132]	; (8003738 <HAL_TIM_Base_Start+0xc8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_TIM_Base_Start+0x70>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1f      	ldr	r2, [pc, #124]	; (800373c <HAL_TIM_Base_Start+0xcc>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <HAL_TIM_Base_Start+0x70>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <HAL_TIM_Base_Start+0xd0>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_TIM_Base_Start+0x70>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_TIM_Base_Start+0xd4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_TIM_Base_Start+0x70>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1b      	ldr	r2, [pc, #108]	; (8003748 <HAL_TIM_Base_Start+0xd8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d115      	bne.n	800370c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_TIM_Base_Start+0xdc>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d015      	beq.n	800371e <HAL_TIM_Base_Start+0xae>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d011      	beq.n	800371e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	e008      	b.n	800371e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	e000      	b.n	8003720 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40000400 	.word	0x40000400
 8003738:	40000800 	.word	0x40000800
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40013400 	.word	0x40013400
 8003744:	40014000 	.word	0x40014000
 8003748:	40015000 	.word	0x40015000
 800374c:	00010007 	.word	0x00010007

08003750 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIM_ConfigClockSource+0x1c>
 8003768:	2302      	movs	r3, #2
 800376a:	e0f6      	b.n	800395a <HAL_TIM_ConfigClockSource+0x20a>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800378a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800378e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a6f      	ldr	r2, [pc, #444]	; (8003964 <HAL_TIM_ConfigClockSource+0x214>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	f000 80c1 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 80037ac:	4a6d      	ldr	r2, [pc, #436]	; (8003964 <HAL_TIM_ConfigClockSource+0x214>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f200 80c6 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b4:	4a6c      	ldr	r2, [pc, #432]	; (8003968 <HAL_TIM_ConfigClockSource+0x218>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	f000 80b9 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 80037bc:	4a6a      	ldr	r2, [pc, #424]	; (8003968 <HAL_TIM_ConfigClockSource+0x218>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	f200 80be 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c4:	4a69      	ldr	r2, [pc, #420]	; (800396c <HAL_TIM_ConfigClockSource+0x21c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	f000 80b1 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 80037cc:	4a67      	ldr	r2, [pc, #412]	; (800396c <HAL_TIM_ConfigClockSource+0x21c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	f200 80b6 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 80037d4:	4a66      	ldr	r2, [pc, #408]	; (8003970 <HAL_TIM_ConfigClockSource+0x220>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f000 80a9 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 80037dc:	4a64      	ldr	r2, [pc, #400]	; (8003970 <HAL_TIM_ConfigClockSource+0x220>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	f200 80ae 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 80037e4:	4a63      	ldr	r2, [pc, #396]	; (8003974 <HAL_TIM_ConfigClockSource+0x224>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f000 80a1 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 80037ec:	4a61      	ldr	r2, [pc, #388]	; (8003974 <HAL_TIM_ConfigClockSource+0x224>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	f200 80a6 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 80037f4:	4a60      	ldr	r2, [pc, #384]	; (8003978 <HAL_TIM_ConfigClockSource+0x228>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	f000 8099 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 80037fc:	4a5e      	ldr	r2, [pc, #376]	; (8003978 <HAL_TIM_ConfigClockSource+0x228>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	f200 809e 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003804:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003808:	f000 8091 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 800380c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003810:	f200 8096 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003818:	f000 8089 	beq.w	800392e <HAL_TIM_ConfigClockSource+0x1de>
 800381c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003820:	f200 808e 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003828:	d03e      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0x158>
 800382a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382e:	f200 8087 	bhi.w	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003836:	f000 8086 	beq.w	8003946 <HAL_TIM_ConfigClockSource+0x1f6>
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d87f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003840:	2b70      	cmp	r3, #112	; 0x70
 8003842:	d01a      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x12a>
 8003844:	2b70      	cmp	r3, #112	; 0x70
 8003846:	d87b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003848:	2b60      	cmp	r3, #96	; 0x60
 800384a:	d050      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x19e>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d877      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003850:	2b50      	cmp	r3, #80	; 0x50
 8003852:	d03c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x17e>
 8003854:	2b50      	cmp	r3, #80	; 0x50
 8003856:	d873      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003858:	2b40      	cmp	r3, #64	; 0x40
 800385a:	d058      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x1be>
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d86f      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d064      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x1de>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d86b      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d060      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x1de>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d867      	bhi.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05c      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x1de>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d05a      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x1de>
 8003878:	e062      	b.n	8003940 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388a:	f000 f9a7 	bl	8003bdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800389c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	609a      	str	r2, [r3, #8]
      break;
 80038a6:	e04f      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b8:	f000 f990 	bl	8003bdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ca:	609a      	str	r2, [r3, #8]
      break;
 80038cc:	e03c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 f902 	bl	8003ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2150      	movs	r1, #80	; 0x50
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f95b 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 80038ec:	e02c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 f921 	bl	8003b42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2160      	movs	r1, #96	; 0x60
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f94b 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 800390c:	e01c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	461a      	mov	r2, r3
 800391c:	f000 f8e2 	bl	8003ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f93b 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 800392c:	e00c      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 f932 	bl	8003ba2 <TIM_ITRx_SetConfig>
      break;
 800393e:	e003      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e000      	b.n	8003948 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	00100070 	.word	0x00100070
 8003968:	00100060 	.word	0x00100060
 800396c:	00100050 	.word	0x00100050
 8003970:	00100040 	.word	0x00100040
 8003974:	00100030 	.word	0x00100030
 8003978:	00100020 	.word	0x00100020

0800397c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a4c      	ldr	r2, [pc, #304]	; (8003ac0 <TIM_Base_SetConfig+0x144>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d017      	beq.n	80039c4 <TIM_Base_SetConfig+0x48>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d013      	beq.n	80039c4 <TIM_Base_SetConfig+0x48>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a49      	ldr	r2, [pc, #292]	; (8003ac4 <TIM_Base_SetConfig+0x148>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00f      	beq.n	80039c4 <TIM_Base_SetConfig+0x48>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a48      	ldr	r2, [pc, #288]	; (8003ac8 <TIM_Base_SetConfig+0x14c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_Base_SetConfig+0x48>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a47      	ldr	r2, [pc, #284]	; (8003acc <TIM_Base_SetConfig+0x150>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x48>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a46      	ldr	r2, [pc, #280]	; (8003ad0 <TIM_Base_SetConfig+0x154>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x48>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a45      	ldr	r2, [pc, #276]	; (8003ad4 <TIM_Base_SetConfig+0x158>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a39      	ldr	r2, [pc, #228]	; (8003ac0 <TIM_Base_SetConfig+0x144>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d023      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e4:	d01f      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a36      	ldr	r2, [pc, #216]	; (8003ac4 <TIM_Base_SetConfig+0x148>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01b      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a35      	ldr	r2, [pc, #212]	; (8003ac8 <TIM_Base_SetConfig+0x14c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d017      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a34      	ldr	r2, [pc, #208]	; (8003acc <TIM_Base_SetConfig+0x150>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <TIM_Base_SetConfig+0x154>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00f      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a33      	ldr	r2, [pc, #204]	; (8003ad8 <TIM_Base_SetConfig+0x15c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00b      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a32      	ldr	r2, [pc, #200]	; (8003adc <TIM_Base_SetConfig+0x160>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a31      	ldr	r2, [pc, #196]	; (8003ae0 <TIM_Base_SetConfig+0x164>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d003      	beq.n	8003a26 <TIM_Base_SetConfig+0xaa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <TIM_Base_SetConfig+0x158>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d108      	bne.n	8003a38 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <TIM_Base_SetConfig+0x144>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <TIM_Base_SetConfig+0x110>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a1a      	ldr	r2, [pc, #104]	; (8003ad0 <TIM_Base_SetConfig+0x154>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00f      	beq.n	8003a8c <TIM_Base_SetConfig+0x110>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <TIM_Base_SetConfig+0x15c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00b      	beq.n	8003a8c <TIM_Base_SetConfig+0x110>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a19      	ldr	r2, [pc, #100]	; (8003adc <TIM_Base_SetConfig+0x160>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <TIM_Base_SetConfig+0x110>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <TIM_Base_SetConfig+0x164>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <TIM_Base_SetConfig+0x110>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a13      	ldr	r2, [pc, #76]	; (8003ad4 <TIM_Base_SetConfig+0x158>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d103      	bne.n	8003a94 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f023 0201 	bic.w	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	611a      	str	r2, [r3, #16]
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800
 8003acc:	40000c00 	.word	0x40000c00
 8003ad0:	40013400 	.word	0x40013400
 8003ad4:	40015000 	.word	0x40015000
 8003ad8:	40014000 	.word	0x40014000
 8003adc:	40014400 	.word	0x40014400
 8003ae0:	40014800 	.word	0x40014800

08003ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f023 030a 	bic.w	r3, r3, #10
 8003b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	621a      	str	r2, [r3, #32]
}
 8003b36:	bf00      	nop
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b087      	sub	sp, #28
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f023 0210 	bic.w	r2, r3, #16
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	031b      	lsls	r3, r3, #12
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f043 0307 	orr.w	r3, r3, #7
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	609a      	str	r2, [r3, #8]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b087      	sub	sp, #28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c30:	2302      	movs	r3, #2
 8003c32:	e074      	b.n	8003d1e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a34      	ldr	r2, [pc, #208]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d009      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a33      	ldr	r2, [pc, #204]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d004      	beq.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a31      	ldr	r2, [pc, #196]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d108      	bne.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb4:	d01d      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d018      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d009      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d004      	beq.n	8003cf2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a11      	ldr	r2, [pc, #68]	; (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d10c      	bne.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40013400 	.word	0x40013400
 8003d34:	40015000 	.word	0x40015000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40014000 	.word	0x40014000

08003d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e042      	b.n	8003de0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d106      	bne.n	8003d72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fd f97f 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2224      	movs	r2, #36	; 0x24
 8003d76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fc7a 	bl	800468c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f97b 	bl	8004094 <UART_SetConfig>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e01b      	b.n	8003de0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fcf9 	bl	80047d0 <UART_CheckIdleState>
 8003dde:	4603      	mov	r3, r0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d17b      	bne.n	8003efa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d002      	beq.n	8003e0e <HAL_UART_Transmit+0x26>
 8003e08:	88fb      	ldrh	r3, [r7, #6]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e074      	b.n	8003efc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2221      	movs	r2, #33	; 0x21
 8003e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e22:	f7fd fafb 	bl	800141c <HAL_GetTick>
 8003e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	88fa      	ldrh	r2, [r7, #6]
 8003e2c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e40:	d108      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e003      	b.n	8003e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e5c:	e030      	b.n	8003ec0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fd5b 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e03d      	b.n	8003efc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e007      	b.n	8003eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1c8      	bne.n	8003e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fd24 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e006      	b.n	8003efc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003efa:	2302      	movs	r3, #2
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	4613      	mov	r3, r2
 8003f12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	f040 80b5 	bne.w	800408a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_UART_Receive+0x28>
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e0ad      	b.n	800408c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2222      	movs	r2, #34	; 0x22
 8003f3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f46:	f7fd fa69 	bl	800141c <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	88fa      	ldrh	r2, [r7, #6]
 8003f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d10e      	bne.n	8003f84 <HAL_UART_Receive+0x80>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d105      	bne.n	8003f7a <HAL_UART_Receive+0x76>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f78:	e02d      	b.n	8003fd6 <HAL_UART_Receive+0xd2>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	22ff      	movs	r2, #255	; 0xff
 8003f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f82:	e028      	b.n	8003fd6 <HAL_UART_Receive+0xd2>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10d      	bne.n	8003fa8 <HAL_UART_Receive+0xa4>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <HAL_UART_Receive+0x9a>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	22ff      	movs	r2, #255	; 0xff
 8003f98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003f9c:	e01b      	b.n	8003fd6 <HAL_UART_Receive+0xd2>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	227f      	movs	r2, #127	; 0x7f
 8003fa2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fa6:	e016      	b.n	8003fd6 <HAL_UART_Receive+0xd2>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fb0:	d10d      	bne.n	8003fce <HAL_UART_Receive+0xca>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <HAL_UART_Receive+0xc0>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	227f      	movs	r2, #127	; 0x7f
 8003fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fc2:	e008      	b.n	8003fd6 <HAL_UART_Receive+0xd2>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	223f      	movs	r2, #63	; 0x3f
 8003fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003fcc:	e003      	b.n	8003fd6 <HAL_UART_Receive+0xd2>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003fdc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d108      	bne.n	8003ffa <HAL_UART_Receive+0xf6>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e003      	b.n	8004002 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004002:	e036      	b.n	8004072 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2200      	movs	r2, #0
 800400c:	2120      	movs	r1, #32
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fc88 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e032      	b.n	800408c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10c      	bne.n	8004046 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	b29a      	uxth	r2, r3
 8004034:	8a7b      	ldrh	r3, [r7, #18]
 8004036:	4013      	ands	r3, r2
 8004038:	b29a      	uxth	r2, r3
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	3302      	adds	r3, #2
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e00c      	b.n	8004060 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8a7b      	ldrh	r3, [r7, #18]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	4013      	ands	r3, r2
 8004054:	b2da      	uxtb	r2, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1c2      	bne.n	8004004 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800408a:	2302      	movs	r3, #2
  }
}
 800408c:	4618      	mov	r0, r3
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004098:	b08c      	sub	sp, #48	; 0x30
 800409a:	af00      	add	r7, sp, #0
 800409c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4baa      	ldr	r3, [pc, #680]	; (800436c <UART_SetConfig+0x2d8>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a9f      	ldr	r2, [pc, #636]	; (8004370 <UART_SetConfig+0x2dc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fc:	4313      	orrs	r3, r2
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800410a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	6812      	ldr	r2, [r2, #0]
 8004112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004114:	430b      	orrs	r3, r1
 8004116:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f023 010f 	bic.w	r1, r3, #15
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a90      	ldr	r2, [pc, #576]	; (8004374 <UART_SetConfig+0x2e0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d125      	bne.n	8004184 <UART_SetConfig+0xf0>
 8004138:	4b8f      	ldr	r3, [pc, #572]	; (8004378 <UART_SetConfig+0x2e4>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b03      	cmp	r3, #3
 8004144:	d81a      	bhi.n	800417c <UART_SetConfig+0xe8>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <UART_SetConfig+0xb8>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	0800415d 	.word	0x0800415d
 8004150:	0800416d 	.word	0x0800416d
 8004154:	08004165 	.word	0x08004165
 8004158:	08004175 	.word	0x08004175
 800415c:	2301      	movs	r3, #1
 800415e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004162:	e116      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004164:	2302      	movs	r3, #2
 8004166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416a:	e112      	b.n	8004392 <UART_SetConfig+0x2fe>
 800416c:	2304      	movs	r3, #4
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004172:	e10e      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004174:	2308      	movs	r3, #8
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417a:	e10a      	b.n	8004392 <UART_SetConfig+0x2fe>
 800417c:	2310      	movs	r3, #16
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004182:	e106      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a7c      	ldr	r2, [pc, #496]	; (800437c <UART_SetConfig+0x2e8>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d138      	bne.n	8004200 <UART_SetConfig+0x16c>
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <UART_SetConfig+0x2e4>)
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b0c      	cmp	r3, #12
 800419a:	d82d      	bhi.n	80041f8 <UART_SetConfig+0x164>
 800419c:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <UART_SetConfig+0x110>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041f9 	.word	0x080041f9
 80041b0:	080041f9 	.word	0x080041f9
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	080041f9 	.word	0x080041f9
 80041bc:	080041f9 	.word	0x080041f9
 80041c0:	080041f9 	.word	0x080041f9
 80041c4:	080041e1 	.word	0x080041e1
 80041c8:	080041f9 	.word	0x080041f9
 80041cc:	080041f9 	.word	0x080041f9
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	080041f1 	.word	0x080041f1
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041de:	e0d8      	b.n	8004392 <UART_SetConfig+0x2fe>
 80041e0:	2302      	movs	r3, #2
 80041e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e6:	e0d4      	b.n	8004392 <UART_SetConfig+0x2fe>
 80041e8:	2304      	movs	r3, #4
 80041ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ee:	e0d0      	b.n	8004392 <UART_SetConfig+0x2fe>
 80041f0:	2308      	movs	r3, #8
 80041f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f6:	e0cc      	b.n	8004392 <UART_SetConfig+0x2fe>
 80041f8:	2310      	movs	r3, #16
 80041fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fe:	e0c8      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a5e      	ldr	r2, [pc, #376]	; (8004380 <UART_SetConfig+0x2ec>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d125      	bne.n	8004256 <UART_SetConfig+0x1c2>
 800420a:	4b5b      	ldr	r3, [pc, #364]	; (8004378 <UART_SetConfig+0x2e4>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004214:	2b30      	cmp	r3, #48	; 0x30
 8004216:	d016      	beq.n	8004246 <UART_SetConfig+0x1b2>
 8004218:	2b30      	cmp	r3, #48	; 0x30
 800421a:	d818      	bhi.n	800424e <UART_SetConfig+0x1ba>
 800421c:	2b20      	cmp	r3, #32
 800421e:	d00a      	beq.n	8004236 <UART_SetConfig+0x1a2>
 8004220:	2b20      	cmp	r3, #32
 8004222:	d814      	bhi.n	800424e <UART_SetConfig+0x1ba>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <UART_SetConfig+0x19a>
 8004228:	2b10      	cmp	r3, #16
 800422a:	d008      	beq.n	800423e <UART_SetConfig+0x1aa>
 800422c:	e00f      	b.n	800424e <UART_SetConfig+0x1ba>
 800422e:	2300      	movs	r3, #0
 8004230:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004234:	e0ad      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004236:	2302      	movs	r3, #2
 8004238:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423c:	e0a9      	b.n	8004392 <UART_SetConfig+0x2fe>
 800423e:	2304      	movs	r3, #4
 8004240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004244:	e0a5      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004246:	2308      	movs	r3, #8
 8004248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424c:	e0a1      	b.n	8004392 <UART_SetConfig+0x2fe>
 800424e:	2310      	movs	r3, #16
 8004250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004254:	e09d      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a4a      	ldr	r2, [pc, #296]	; (8004384 <UART_SetConfig+0x2f0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d125      	bne.n	80042ac <UART_SetConfig+0x218>
 8004260:	4b45      	ldr	r3, [pc, #276]	; (8004378 <UART_SetConfig+0x2e4>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800426a:	2bc0      	cmp	r3, #192	; 0xc0
 800426c:	d016      	beq.n	800429c <UART_SetConfig+0x208>
 800426e:	2bc0      	cmp	r3, #192	; 0xc0
 8004270:	d818      	bhi.n	80042a4 <UART_SetConfig+0x210>
 8004272:	2b80      	cmp	r3, #128	; 0x80
 8004274:	d00a      	beq.n	800428c <UART_SetConfig+0x1f8>
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d814      	bhi.n	80042a4 <UART_SetConfig+0x210>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <UART_SetConfig+0x1f0>
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	d008      	beq.n	8004294 <UART_SetConfig+0x200>
 8004282:	e00f      	b.n	80042a4 <UART_SetConfig+0x210>
 8004284:	2300      	movs	r3, #0
 8004286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800428a:	e082      	b.n	8004392 <UART_SetConfig+0x2fe>
 800428c:	2302      	movs	r3, #2
 800428e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004292:	e07e      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004294:	2304      	movs	r3, #4
 8004296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800429a:	e07a      	b.n	8004392 <UART_SetConfig+0x2fe>
 800429c:	2308      	movs	r3, #8
 800429e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042a2:	e076      	b.n	8004392 <UART_SetConfig+0x2fe>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042aa:	e072      	b.n	8004392 <UART_SetConfig+0x2fe>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a35      	ldr	r2, [pc, #212]	; (8004388 <UART_SetConfig+0x2f4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d12a      	bne.n	800430c <UART_SetConfig+0x278>
 80042b6:	4b30      	ldr	r3, [pc, #192]	; (8004378 <UART_SetConfig+0x2e4>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c4:	d01a      	beq.n	80042fc <UART_SetConfig+0x268>
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ca:	d81b      	bhi.n	8004304 <UART_SetConfig+0x270>
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d0:	d00c      	beq.n	80042ec <UART_SetConfig+0x258>
 80042d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d6:	d815      	bhi.n	8004304 <UART_SetConfig+0x270>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <UART_SetConfig+0x250>
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d008      	beq.n	80042f4 <UART_SetConfig+0x260>
 80042e2:	e00f      	b.n	8004304 <UART_SetConfig+0x270>
 80042e4:	2300      	movs	r3, #0
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ea:	e052      	b.n	8004392 <UART_SetConfig+0x2fe>
 80042ec:	2302      	movs	r3, #2
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042f2:	e04e      	b.n	8004392 <UART_SetConfig+0x2fe>
 80042f4:	2304      	movs	r3, #4
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042fa:	e04a      	b.n	8004392 <UART_SetConfig+0x2fe>
 80042fc:	2308      	movs	r3, #8
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004302:	e046      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004304:	2310      	movs	r3, #16
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800430a:	e042      	b.n	8004392 <UART_SetConfig+0x2fe>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a17      	ldr	r2, [pc, #92]	; (8004370 <UART_SetConfig+0x2dc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d13a      	bne.n	800438c <UART_SetConfig+0x2f8>
 8004316:	4b18      	ldr	r3, [pc, #96]	; (8004378 <UART_SetConfig+0x2e4>)
 8004318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004320:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004324:	d01a      	beq.n	800435c <UART_SetConfig+0x2c8>
 8004326:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800432a:	d81b      	bhi.n	8004364 <UART_SetConfig+0x2d0>
 800432c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004330:	d00c      	beq.n	800434c <UART_SetConfig+0x2b8>
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004336:	d815      	bhi.n	8004364 <UART_SetConfig+0x2d0>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <UART_SetConfig+0x2b0>
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004340:	d008      	beq.n	8004354 <UART_SetConfig+0x2c0>
 8004342:	e00f      	b.n	8004364 <UART_SetConfig+0x2d0>
 8004344:	2300      	movs	r3, #0
 8004346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800434a:	e022      	b.n	8004392 <UART_SetConfig+0x2fe>
 800434c:	2302      	movs	r3, #2
 800434e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004352:	e01e      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004354:	2304      	movs	r3, #4
 8004356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800435a:	e01a      	b.n	8004392 <UART_SetConfig+0x2fe>
 800435c:	2308      	movs	r3, #8
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004362:	e016      	b.n	8004392 <UART_SetConfig+0x2fe>
 8004364:	2310      	movs	r3, #16
 8004366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800436a:	e012      	b.n	8004392 <UART_SetConfig+0x2fe>
 800436c:	cfff69f3 	.word	0xcfff69f3
 8004370:	40008000 	.word	0x40008000
 8004374:	40013800 	.word	0x40013800
 8004378:	40021000 	.word	0x40021000
 800437c:	40004400 	.word	0x40004400
 8004380:	40004800 	.word	0x40004800
 8004384:	40004c00 	.word	0x40004c00
 8004388:	40005000 	.word	0x40005000
 800438c:	2310      	movs	r3, #16
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4aae      	ldr	r2, [pc, #696]	; (8004650 <UART_SetConfig+0x5bc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	f040 8097 	bne.w	80044cc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800439e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d823      	bhi.n	80043ee <UART_SetConfig+0x35a>
 80043a6:	a201      	add	r2, pc, #4	; (adr r2, 80043ac <UART_SetConfig+0x318>)
 80043a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ac:	080043d1 	.word	0x080043d1
 80043b0:	080043ef 	.word	0x080043ef
 80043b4:	080043d9 	.word	0x080043d9
 80043b8:	080043ef 	.word	0x080043ef
 80043bc:	080043df 	.word	0x080043df
 80043c0:	080043ef 	.word	0x080043ef
 80043c4:	080043ef 	.word	0x080043ef
 80043c8:	080043ef 	.word	0x080043ef
 80043cc:	080043e7 	.word	0x080043e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043d0:	f7fe f90e 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 80043d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043d6:	e010      	b.n	80043fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d8:	4b9e      	ldr	r3, [pc, #632]	; (8004654 <UART_SetConfig+0x5c0>)
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043dc:	e00d      	b.n	80043fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043de:	f7fe f899 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043e4:	e009      	b.n	80043fa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043ec:	e005      	b.n	80043fa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8130 	beq.w	8004662 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	4a94      	ldr	r2, [pc, #592]	; (8004658 <UART_SetConfig+0x5c4>)
 8004408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800440c:	461a      	mov	r2, r3
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	fbb3 f3f2 	udiv	r3, r3, r2
 8004414:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	429a      	cmp	r2, r3
 8004424:	d305      	bcc.n	8004432 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	429a      	cmp	r2, r3
 8004430:	d903      	bls.n	800443a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004438:	e113      	b.n	8004662 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	2200      	movs	r2, #0
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	60fa      	str	r2, [r7, #12]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	4a84      	ldr	r2, [pc, #528]	; (8004658 <UART_SetConfig+0x5c4>)
 8004448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800444c:	b29b      	uxth	r3, r3
 800444e:	2200      	movs	r2, #0
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004458:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800445c:	f7fb ff48 	bl	80002f0 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4610      	mov	r0, r2
 8004466:	4619      	mov	r1, r3
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	020b      	lsls	r3, r1, #8
 8004472:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004476:	0202      	lsls	r2, r0, #8
 8004478:	6979      	ldr	r1, [r7, #20]
 800447a:	6849      	ldr	r1, [r1, #4]
 800447c:	0849      	lsrs	r1, r1, #1
 800447e:	2000      	movs	r0, #0
 8004480:	460c      	mov	r4, r1
 8004482:	4605      	mov	r5, r0
 8004484:	eb12 0804 	adds.w	r8, r2, r4
 8004488:	eb43 0905 	adc.w	r9, r3, r5
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	469a      	mov	sl, r3
 8004494:	4693      	mov	fp, r2
 8004496:	4652      	mov	r2, sl
 8004498:	465b      	mov	r3, fp
 800449a:	4640      	mov	r0, r8
 800449c:	4649      	mov	r1, r9
 800449e:	f7fb ff27 	bl	80002f0 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4613      	mov	r3, r2
 80044a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b0:	d308      	bcc.n	80044c4 <UART_SetConfig+0x430>
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b8:	d204      	bcs.n	80044c4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	e0ce      	b.n	8004662 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044ca:	e0ca      	b.n	8004662 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d4:	d166      	bne.n	80045a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80044d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d827      	bhi.n	800452e <UART_SetConfig+0x49a>
 80044de:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0x450>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	08004509 	.word	0x08004509
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004519 	.word	0x08004519
 80044f0:	0800452f 	.word	0x0800452f
 80044f4:	0800451f 	.word	0x0800451f
 80044f8:	0800452f 	.word	0x0800452f
 80044fc:	0800452f 	.word	0x0800452f
 8004500:	0800452f 	.word	0x0800452f
 8004504:	08004527 	.word	0x08004527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004508:	f7fe f872 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 800450c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800450e:	e014      	b.n	800453a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004510:	f7fe f884 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8004514:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004516:	e010      	b.n	800453a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004518:	4b4e      	ldr	r3, [pc, #312]	; (8004654 <UART_SetConfig+0x5c0>)
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800451c:	e00d      	b.n	800453a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451e:	f7fd fff9 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 8004522:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004524:	e009      	b.n	800453a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800452c:	e005      	b.n	800453a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004538:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8090 	beq.w	8004662 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	4a44      	ldr	r2, [pc, #272]	; (8004658 <UART_SetConfig+0x5c4>)
 8004548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800454c:	461a      	mov	r2, r3
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	fbb3 f3f2 	udiv	r3, r3, r2
 8004554:	005a      	lsls	r2, r3, #1
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	441a      	add	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d916      	bls.n	800459c <UART_SetConfig+0x508>
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d212      	bcs.n	800459c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f023 030f 	bic.w	r3, r3, #15
 800457e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	b29a      	uxth	r2, r3
 800458c:	8bfb      	ldrh	r3, [r7, #30]
 800458e:	4313      	orrs	r3, r2
 8004590:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	8bfa      	ldrh	r2, [r7, #30]
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e062      	b.n	8004662 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045a2:	e05e      	b.n	8004662 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d828      	bhi.n	80045fe <UART_SetConfig+0x56a>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0x520>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	080045d9 	.word	0x080045d9
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	080045ff 	.word	0x080045ff
 80045c4:	080045ef 	.word	0x080045ef
 80045c8:	080045ff 	.word	0x080045ff
 80045cc:	080045ff 	.word	0x080045ff
 80045d0:	080045ff 	.word	0x080045ff
 80045d4:	080045f7 	.word	0x080045f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d8:	f7fe f80a 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 80045dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045de:	e014      	b.n	800460a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e0:	f7fe f81c 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 80045e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045e6:	e010      	b.n	800460a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <UART_SetConfig+0x5c0>)
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045ec:	e00d      	b.n	800460a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ee:	f7fd ff91 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80045f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045f4:	e009      	b.n	800460a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045fc:	e005      	b.n	800460a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004608:	bf00      	nop
    }

    if (pclk != 0U)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d028      	beq.n	8004662 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	4a10      	ldr	r2, [pc, #64]	; (8004658 <UART_SetConfig+0x5c4>)
 8004616:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800461a:	461a      	mov	r2, r3
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	441a      	add	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d910      	bls.n	800465c <UART_SetConfig+0x5c8>
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004640:	d20c      	bcs.n	800465c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	b29a      	uxth	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60da      	str	r2, [r3, #12]
 800464c:	e009      	b.n	8004662 <UART_SetConfig+0x5ce>
 800464e:	bf00      	nop
 8004650:	40008000 	.word	0x40008000
 8004654:	00f42400 	.word	0x00f42400
 8004658:	080058a4 	.word	0x080058a4
      }
      else
      {
        ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2201      	movs	r2, #1
 8004666:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2201      	movs	r2, #1
 800466e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800467e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004682:	4618      	mov	r0, r3
 8004684:	3730      	adds	r7, #48	; 0x30
 8004686:	46bd      	mov	sp, r7
 8004688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800468c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004742:	f003 0320 	and.w	r3, r3, #32
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01a      	beq.n	80047a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478a:	d10a      	bne.n	80047a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	605a      	str	r2, [r3, #4]
  }
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b098      	sub	sp, #96	; 0x60
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047e0:	f7fc fe1c 	bl	800141c <HAL_GetTick>
 80047e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d12f      	bne.n	8004854 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fc:	2200      	movs	r2, #0
 80047fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f88e 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d022      	beq.n	8004854 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
 800482e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e6      	bne.n	800480e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e063      	b.n	800491c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b04      	cmp	r3, #4
 8004860:	d149      	bne.n	80048f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004862:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800486a:	2200      	movs	r2, #0
 800486c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f857 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d03c      	beq.n	80048f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	623b      	str	r3, [r7, #32]
   return(result);
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	461a      	mov	r2, r3
 8004898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
 800489c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e6      	bne.n	800487c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ce:	61fa      	str	r2, [r7, #28]
 80048d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	69b9      	ldr	r1, [r7, #24]
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	617b      	str	r3, [r7, #20]
   return(result);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e012      	b.n	800491c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3758      	adds	r7, #88	; 0x58
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004934:	e04f      	b.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493c:	d04b      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fc fd6d 	bl	800141c <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <UART_WaitOnFlagUntilTimeout+0x30>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e04e      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d037      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b80      	cmp	r3, #128	; 0x80
 800496a:	d034      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d031      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b08      	cmp	r3, #8
 800497e:	d110      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2208      	movs	r2, #8
 8004986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 f838 	bl	80049fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2208      	movs	r2, #8
 8004992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e029      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b0:	d111      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 f81e 	bl	80049fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e00f      	b.n	80049f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69da      	ldr	r2, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4013      	ands	r3, r2
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	bf0c      	ite	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	2300      	movne	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	461a      	mov	r2, r3
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d0a0      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b095      	sub	sp, #84	; 0x54
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	643b      	str	r3, [r7, #64]	; 0x40
 8004a26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a2c:	e841 2300 	strex	r3, r2, [r1]
 8004a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1e6      	bne.n	8004a06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	e853 3f00 	ldrex	r3, [r3]
 8004a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e3      	bne.n	8004a38 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d118      	bne.n	8004aaa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	e853 3f00 	ldrex	r3, [r3]
 8004a84:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 0310 	bic.w	r3, r3, #16
 8004a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6979      	ldr	r1, [r7, #20]
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e6      	bne.n	8004a78 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004abe:	bf00      	nop
 8004ac0:	3754      	adds	r7, #84	; 0x54
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_UARTEx_DisableFifoMode+0x16>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e027      	b.n	8004b30 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	; 0x24
 8004aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0201 	bic.w	r2, r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e02d      	b.n	8004bb0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2224      	movs	r2, #36	; 0x24
 8004b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0201 	bic.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f84f 	bl	8004c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004bae:	2300      	movs	r3, #0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e02d      	b.n	8004c2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0201 	bic.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f811 	bl	8004c34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d108      	bne.n	8004c56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c54:	e031      	b.n	8004cba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c56:	2308      	movs	r3, #8
 8004c58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	0e5b      	lsrs	r3, r3, #25
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	0f5b      	lsrs	r3, r3, #29
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c7e:	7bbb      	ldrb	r3, [r7, #14]
 8004c80:	7b3a      	ldrb	r2, [r7, #12]
 8004c82:	4911      	ldr	r1, [pc, #68]	; (8004cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8004c84:	5c8a      	ldrb	r2, [r1, r2]
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c8a:	7b3a      	ldrb	r2, [r7, #12]
 8004c8c:	490f      	ldr	r1, [pc, #60]	; (8004ccc <UARTEx_SetNbDataToProcess+0x98>)
 8004c8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c90:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	7b7a      	ldrb	r2, [r7, #13]
 8004ca0:	4909      	ldr	r1, [pc, #36]	; (8004cc8 <UARTEx_SetNbDataToProcess+0x94>)
 8004ca2:	5c8a      	ldrb	r2, [r1, r2]
 8004ca4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ca8:	7b7a      	ldrb	r2, [r7, #13]
 8004caa:	4908      	ldr	r1, [pc, #32]	; (8004ccc <UARTEx_SetNbDataToProcess+0x98>)
 8004cac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cae:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cba:	bf00      	nop
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	080058bc 	.word	0x080058bc
 8004ccc:	080058c4 	.word	0x080058c4

08004cd0 <siprintf>:
 8004cd0:	b40e      	push	{r1, r2, r3}
 8004cd2:	b500      	push	{lr}
 8004cd4:	b09c      	sub	sp, #112	; 0x70
 8004cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd8:	9002      	str	r0, [sp, #8]
 8004cda:	9006      	str	r0, [sp, #24]
 8004cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ce0:	4809      	ldr	r0, [pc, #36]	; (8004d08 <siprintf+0x38>)
 8004ce2:	9107      	str	r1, [sp, #28]
 8004ce4:	9104      	str	r1, [sp, #16]
 8004ce6:	4909      	ldr	r1, [pc, #36]	; (8004d0c <siprintf+0x3c>)
 8004ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cec:	9105      	str	r1, [sp, #20]
 8004cee:	6800      	ldr	r0, [r0, #0]
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	a902      	add	r1, sp, #8
 8004cf4:	f000 f992 	bl	800501c <_svfiprintf_r>
 8004cf8:	9b02      	ldr	r3, [sp, #8]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	b01c      	add	sp, #112	; 0x70
 8004d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d04:	b003      	add	sp, #12
 8004d06:	4770      	bx	lr
 8004d08:	2000005c 	.word	0x2000005c
 8004d0c:	ffff0208 	.word	0xffff0208

08004d10 <memset>:
 8004d10:	4402      	add	r2, r0
 8004d12:	4603      	mov	r3, r0
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <__errno>:
 8004d20:	4b01      	ldr	r3, [pc, #4]	; (8004d28 <__errno+0x8>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	2000005c 	.word	0x2000005c

08004d2c <__libc_init_array>:
 8004d2c:	b570      	push	{r4, r5, r6, lr}
 8004d2e:	4d0d      	ldr	r5, [pc, #52]	; (8004d64 <__libc_init_array+0x38>)
 8004d30:	4c0d      	ldr	r4, [pc, #52]	; (8004d68 <__libc_init_array+0x3c>)
 8004d32:	1b64      	subs	r4, r4, r5
 8004d34:	10a4      	asrs	r4, r4, #2
 8004d36:	2600      	movs	r6, #0
 8004d38:	42a6      	cmp	r6, r4
 8004d3a:	d109      	bne.n	8004d50 <__libc_init_array+0x24>
 8004d3c:	4d0b      	ldr	r5, [pc, #44]	; (8004d6c <__libc_init_array+0x40>)
 8004d3e:	4c0c      	ldr	r4, [pc, #48]	; (8004d70 <__libc_init_array+0x44>)
 8004d40:	f000 fc6a 	bl	8005618 <_init>
 8004d44:	1b64      	subs	r4, r4, r5
 8004d46:	10a4      	asrs	r4, r4, #2
 8004d48:	2600      	movs	r6, #0
 8004d4a:	42a6      	cmp	r6, r4
 8004d4c:	d105      	bne.n	8004d5a <__libc_init_array+0x2e>
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d54:	4798      	blx	r3
 8004d56:	3601      	adds	r6, #1
 8004d58:	e7ee      	b.n	8004d38 <__libc_init_array+0xc>
 8004d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5e:	4798      	blx	r3
 8004d60:	3601      	adds	r6, #1
 8004d62:	e7f2      	b.n	8004d4a <__libc_init_array+0x1e>
 8004d64:	08005908 	.word	0x08005908
 8004d68:	08005908 	.word	0x08005908
 8004d6c:	08005908 	.word	0x08005908
 8004d70:	0800590c 	.word	0x0800590c

08004d74 <__retarget_lock_acquire_recursive>:
 8004d74:	4770      	bx	lr

08004d76 <__retarget_lock_release_recursive>:
 8004d76:	4770      	bx	lr

08004d78 <_free_r>:
 8004d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d044      	beq.n	8004e08 <_free_r+0x90>
 8004d7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d82:	9001      	str	r0, [sp, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f1a1 0404 	sub.w	r4, r1, #4
 8004d8a:	bfb8      	it	lt
 8004d8c:	18e4      	addlt	r4, r4, r3
 8004d8e:	f000 f8df 	bl	8004f50 <__malloc_lock>
 8004d92:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <_free_r+0x94>)
 8004d94:	9801      	ldr	r0, [sp, #4]
 8004d96:	6813      	ldr	r3, [r2, #0]
 8004d98:	b933      	cbnz	r3, 8004da8 <_free_r+0x30>
 8004d9a:	6063      	str	r3, [r4, #4]
 8004d9c:	6014      	str	r4, [r2, #0]
 8004d9e:	b003      	add	sp, #12
 8004da0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004da4:	f000 b8da 	b.w	8004f5c <__malloc_unlock>
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d908      	bls.n	8004dbe <_free_r+0x46>
 8004dac:	6825      	ldr	r5, [r4, #0]
 8004dae:	1961      	adds	r1, r4, r5
 8004db0:	428b      	cmp	r3, r1
 8004db2:	bf01      	itttt	eq
 8004db4:	6819      	ldreq	r1, [r3, #0]
 8004db6:	685b      	ldreq	r3, [r3, #4]
 8004db8:	1949      	addeq	r1, r1, r5
 8004dba:	6021      	streq	r1, [r4, #0]
 8004dbc:	e7ed      	b.n	8004d9a <_free_r+0x22>
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b10b      	cbz	r3, 8004dc8 <_free_r+0x50>
 8004dc4:	42a3      	cmp	r3, r4
 8004dc6:	d9fa      	bls.n	8004dbe <_free_r+0x46>
 8004dc8:	6811      	ldr	r1, [r2, #0]
 8004dca:	1855      	adds	r5, r2, r1
 8004dcc:	42a5      	cmp	r5, r4
 8004dce:	d10b      	bne.n	8004de8 <_free_r+0x70>
 8004dd0:	6824      	ldr	r4, [r4, #0]
 8004dd2:	4421      	add	r1, r4
 8004dd4:	1854      	adds	r4, r2, r1
 8004dd6:	42a3      	cmp	r3, r4
 8004dd8:	6011      	str	r1, [r2, #0]
 8004dda:	d1e0      	bne.n	8004d9e <_free_r+0x26>
 8004ddc:	681c      	ldr	r4, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	6053      	str	r3, [r2, #4]
 8004de2:	440c      	add	r4, r1
 8004de4:	6014      	str	r4, [r2, #0]
 8004de6:	e7da      	b.n	8004d9e <_free_r+0x26>
 8004de8:	d902      	bls.n	8004df0 <_free_r+0x78>
 8004dea:	230c      	movs	r3, #12
 8004dec:	6003      	str	r3, [r0, #0]
 8004dee:	e7d6      	b.n	8004d9e <_free_r+0x26>
 8004df0:	6825      	ldr	r5, [r4, #0]
 8004df2:	1961      	adds	r1, r4, r5
 8004df4:	428b      	cmp	r3, r1
 8004df6:	bf04      	itt	eq
 8004df8:	6819      	ldreq	r1, [r3, #0]
 8004dfa:	685b      	ldreq	r3, [r3, #4]
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	bf04      	itt	eq
 8004e00:	1949      	addeq	r1, r1, r5
 8004e02:	6021      	streq	r1, [r4, #0]
 8004e04:	6054      	str	r4, [r2, #4]
 8004e06:	e7ca      	b.n	8004d9e <_free_r+0x26>
 8004e08:	b003      	add	sp, #12
 8004e0a:	bd30      	pop	{r4, r5, pc}
 8004e0c:	2000034c 	.word	0x2000034c

08004e10 <sbrk_aligned>:
 8004e10:	b570      	push	{r4, r5, r6, lr}
 8004e12:	4e0e      	ldr	r6, [pc, #56]	; (8004e4c <sbrk_aligned+0x3c>)
 8004e14:	460c      	mov	r4, r1
 8004e16:	6831      	ldr	r1, [r6, #0]
 8004e18:	4605      	mov	r5, r0
 8004e1a:	b911      	cbnz	r1, 8004e22 <sbrk_aligned+0x12>
 8004e1c:	f000 fba6 	bl	800556c <_sbrk_r>
 8004e20:	6030      	str	r0, [r6, #0]
 8004e22:	4621      	mov	r1, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	f000 fba1 	bl	800556c <_sbrk_r>
 8004e2a:	1c43      	adds	r3, r0, #1
 8004e2c:	d00a      	beq.n	8004e44 <sbrk_aligned+0x34>
 8004e2e:	1cc4      	adds	r4, r0, #3
 8004e30:	f024 0403 	bic.w	r4, r4, #3
 8004e34:	42a0      	cmp	r0, r4
 8004e36:	d007      	beq.n	8004e48 <sbrk_aligned+0x38>
 8004e38:	1a21      	subs	r1, r4, r0
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fb96 	bl	800556c <_sbrk_r>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d101      	bne.n	8004e48 <sbrk_aligned+0x38>
 8004e44:	f04f 34ff 	mov.w	r4, #4294967295
 8004e48:	4620      	mov	r0, r4
 8004e4a:	bd70      	pop	{r4, r5, r6, pc}
 8004e4c:	20000350 	.word	0x20000350

08004e50 <_malloc_r>:
 8004e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e54:	1ccd      	adds	r5, r1, #3
 8004e56:	f025 0503 	bic.w	r5, r5, #3
 8004e5a:	3508      	adds	r5, #8
 8004e5c:	2d0c      	cmp	r5, #12
 8004e5e:	bf38      	it	cc
 8004e60:	250c      	movcc	r5, #12
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	4607      	mov	r7, r0
 8004e66:	db01      	blt.n	8004e6c <_malloc_r+0x1c>
 8004e68:	42a9      	cmp	r1, r5
 8004e6a:	d905      	bls.n	8004e78 <_malloc_r+0x28>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	2600      	movs	r6, #0
 8004e72:	4630      	mov	r0, r6
 8004e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f4c <_malloc_r+0xfc>
 8004e7c:	f000 f868 	bl	8004f50 <__malloc_lock>
 8004e80:	f8d8 3000 	ldr.w	r3, [r8]
 8004e84:	461c      	mov	r4, r3
 8004e86:	bb5c      	cbnz	r4, 8004ee0 <_malloc_r+0x90>
 8004e88:	4629      	mov	r1, r5
 8004e8a:	4638      	mov	r0, r7
 8004e8c:	f7ff ffc0 	bl	8004e10 <sbrk_aligned>
 8004e90:	1c43      	adds	r3, r0, #1
 8004e92:	4604      	mov	r4, r0
 8004e94:	d155      	bne.n	8004f42 <_malloc_r+0xf2>
 8004e96:	f8d8 4000 	ldr.w	r4, [r8]
 8004e9a:	4626      	mov	r6, r4
 8004e9c:	2e00      	cmp	r6, #0
 8004e9e:	d145      	bne.n	8004f2c <_malloc_r+0xdc>
 8004ea0:	2c00      	cmp	r4, #0
 8004ea2:	d048      	beq.n	8004f36 <_malloc_r+0xe6>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	eb04 0903 	add.w	r9, r4, r3
 8004eae:	f000 fb5d 	bl	800556c <_sbrk_r>
 8004eb2:	4581      	cmp	r9, r0
 8004eb4:	d13f      	bne.n	8004f36 <_malloc_r+0xe6>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	1a6d      	subs	r5, r5, r1
 8004eba:	4629      	mov	r1, r5
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f7ff ffa7 	bl	8004e10 <sbrk_aligned>
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d037      	beq.n	8004f36 <_malloc_r+0xe6>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	442b      	add	r3, r5
 8004eca:	6023      	str	r3, [r4, #0]
 8004ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d038      	beq.n	8004f46 <_malloc_r+0xf6>
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	42a2      	cmp	r2, r4
 8004ed8:	d12b      	bne.n	8004f32 <_malloc_r+0xe2>
 8004eda:	2200      	movs	r2, #0
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	e00f      	b.n	8004f00 <_malloc_r+0xb0>
 8004ee0:	6822      	ldr	r2, [r4, #0]
 8004ee2:	1b52      	subs	r2, r2, r5
 8004ee4:	d41f      	bmi.n	8004f26 <_malloc_r+0xd6>
 8004ee6:	2a0b      	cmp	r2, #11
 8004ee8:	d917      	bls.n	8004f1a <_malloc_r+0xca>
 8004eea:	1961      	adds	r1, r4, r5
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	6025      	str	r5, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	6059      	strne	r1, [r3, #4]
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	bf08      	it	eq
 8004ef8:	f8c8 1000 	streq.w	r1, [r8]
 8004efc:	5162      	str	r2, [r4, r5]
 8004efe:	604b      	str	r3, [r1, #4]
 8004f00:	4638      	mov	r0, r7
 8004f02:	f104 060b 	add.w	r6, r4, #11
 8004f06:	f000 f829 	bl	8004f5c <__malloc_unlock>
 8004f0a:	f026 0607 	bic.w	r6, r6, #7
 8004f0e:	1d23      	adds	r3, r4, #4
 8004f10:	1af2      	subs	r2, r6, r3
 8004f12:	d0ae      	beq.n	8004e72 <_malloc_r+0x22>
 8004f14:	1b9b      	subs	r3, r3, r6
 8004f16:	50a3      	str	r3, [r4, r2]
 8004f18:	e7ab      	b.n	8004e72 <_malloc_r+0x22>
 8004f1a:	42a3      	cmp	r3, r4
 8004f1c:	6862      	ldr	r2, [r4, #4]
 8004f1e:	d1dd      	bne.n	8004edc <_malloc_r+0x8c>
 8004f20:	f8c8 2000 	str.w	r2, [r8]
 8004f24:	e7ec      	b.n	8004f00 <_malloc_r+0xb0>
 8004f26:	4623      	mov	r3, r4
 8004f28:	6864      	ldr	r4, [r4, #4]
 8004f2a:	e7ac      	b.n	8004e86 <_malloc_r+0x36>
 8004f2c:	4634      	mov	r4, r6
 8004f2e:	6876      	ldr	r6, [r6, #4]
 8004f30:	e7b4      	b.n	8004e9c <_malloc_r+0x4c>
 8004f32:	4613      	mov	r3, r2
 8004f34:	e7cc      	b.n	8004ed0 <_malloc_r+0x80>
 8004f36:	230c      	movs	r3, #12
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	f000 f80e 	bl	8004f5c <__malloc_unlock>
 8004f40:	e797      	b.n	8004e72 <_malloc_r+0x22>
 8004f42:	6025      	str	r5, [r4, #0]
 8004f44:	e7dc      	b.n	8004f00 <_malloc_r+0xb0>
 8004f46:	605b      	str	r3, [r3, #4]
 8004f48:	deff      	udf	#255	; 0xff
 8004f4a:	bf00      	nop
 8004f4c:	2000034c 	.word	0x2000034c

08004f50 <__malloc_lock>:
 8004f50:	4801      	ldr	r0, [pc, #4]	; (8004f58 <__malloc_lock+0x8>)
 8004f52:	f7ff bf0f 	b.w	8004d74 <__retarget_lock_acquire_recursive>
 8004f56:	bf00      	nop
 8004f58:	20000348 	.word	0x20000348

08004f5c <__malloc_unlock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	; (8004f64 <__malloc_unlock+0x8>)
 8004f5e:	f7ff bf0a 	b.w	8004d76 <__retarget_lock_release_recursive>
 8004f62:	bf00      	nop
 8004f64:	20000348 	.word	0x20000348

08004f68 <__ssputs_r>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	688e      	ldr	r6, [r1, #8]
 8004f6e:	461f      	mov	r7, r3
 8004f70:	42be      	cmp	r6, r7
 8004f72:	680b      	ldr	r3, [r1, #0]
 8004f74:	4682      	mov	sl, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	4690      	mov	r8, r2
 8004f7a:	d82c      	bhi.n	8004fd6 <__ssputs_r+0x6e>
 8004f7c:	898a      	ldrh	r2, [r1, #12]
 8004f7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f82:	d026      	beq.n	8004fd2 <__ssputs_r+0x6a>
 8004f84:	6965      	ldr	r5, [r4, #20]
 8004f86:	6909      	ldr	r1, [r1, #16]
 8004f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f8c:	eba3 0901 	sub.w	r9, r3, r1
 8004f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f94:	1c7b      	adds	r3, r7, #1
 8004f96:	444b      	add	r3, r9
 8004f98:	106d      	asrs	r5, r5, #1
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	bf38      	it	cc
 8004f9e:	461d      	movcc	r5, r3
 8004fa0:	0553      	lsls	r3, r2, #21
 8004fa2:	d527      	bpl.n	8004ff4 <__ssputs_r+0x8c>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f7ff ff53 	bl	8004e50 <_malloc_r>
 8004faa:	4606      	mov	r6, r0
 8004fac:	b360      	cbz	r0, 8005008 <__ssputs_r+0xa0>
 8004fae:	6921      	ldr	r1, [r4, #16]
 8004fb0:	464a      	mov	r2, r9
 8004fb2:	f000 faeb 	bl	800558c <memcpy>
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc0:	81a3      	strh	r3, [r4, #12]
 8004fc2:	6126      	str	r6, [r4, #16]
 8004fc4:	6165      	str	r5, [r4, #20]
 8004fc6:	444e      	add	r6, r9
 8004fc8:	eba5 0509 	sub.w	r5, r5, r9
 8004fcc:	6026      	str	r6, [r4, #0]
 8004fce:	60a5      	str	r5, [r4, #8]
 8004fd0:	463e      	mov	r6, r7
 8004fd2:	42be      	cmp	r6, r7
 8004fd4:	d900      	bls.n	8004fd8 <__ssputs_r+0x70>
 8004fd6:	463e      	mov	r6, r7
 8004fd8:	6820      	ldr	r0, [r4, #0]
 8004fda:	4632      	mov	r2, r6
 8004fdc:	4641      	mov	r1, r8
 8004fde:	f000 faab 	bl	8005538 <memmove>
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	60a3      	str	r3, [r4, #8]
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	4433      	add	r3, r6
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff4:	462a      	mov	r2, r5
 8004ff6:	f000 fad7 	bl	80055a8 <_realloc_r>
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d1e0      	bne.n	8004fc2 <__ssputs_r+0x5a>
 8005000:	6921      	ldr	r1, [r4, #16]
 8005002:	4650      	mov	r0, sl
 8005004:	f7ff feb8 	bl	8004d78 <_free_r>
 8005008:	230c      	movs	r3, #12
 800500a:	f8ca 3000 	str.w	r3, [sl]
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005014:	81a3      	strh	r3, [r4, #12]
 8005016:	f04f 30ff 	mov.w	r0, #4294967295
 800501a:	e7e9      	b.n	8004ff0 <__ssputs_r+0x88>

0800501c <_svfiprintf_r>:
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	4698      	mov	r8, r3
 8005022:	898b      	ldrh	r3, [r1, #12]
 8005024:	061b      	lsls	r3, r3, #24
 8005026:	b09d      	sub	sp, #116	; 0x74
 8005028:	4607      	mov	r7, r0
 800502a:	460d      	mov	r5, r1
 800502c:	4614      	mov	r4, r2
 800502e:	d50e      	bpl.n	800504e <_svfiprintf_r+0x32>
 8005030:	690b      	ldr	r3, [r1, #16]
 8005032:	b963      	cbnz	r3, 800504e <_svfiprintf_r+0x32>
 8005034:	2140      	movs	r1, #64	; 0x40
 8005036:	f7ff ff0b 	bl	8004e50 <_malloc_r>
 800503a:	6028      	str	r0, [r5, #0]
 800503c:	6128      	str	r0, [r5, #16]
 800503e:	b920      	cbnz	r0, 800504a <_svfiprintf_r+0x2e>
 8005040:	230c      	movs	r3, #12
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	e0d0      	b.n	80051ec <_svfiprintf_r+0x1d0>
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	616b      	str	r3, [r5, #20]
 800504e:	2300      	movs	r3, #0
 8005050:	9309      	str	r3, [sp, #36]	; 0x24
 8005052:	2320      	movs	r3, #32
 8005054:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005058:	f8cd 800c 	str.w	r8, [sp, #12]
 800505c:	2330      	movs	r3, #48	; 0x30
 800505e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005204 <_svfiprintf_r+0x1e8>
 8005062:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005066:	f04f 0901 	mov.w	r9, #1
 800506a:	4623      	mov	r3, r4
 800506c:	469a      	mov	sl, r3
 800506e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005072:	b10a      	cbz	r2, 8005078 <_svfiprintf_r+0x5c>
 8005074:	2a25      	cmp	r2, #37	; 0x25
 8005076:	d1f9      	bne.n	800506c <_svfiprintf_r+0x50>
 8005078:	ebba 0b04 	subs.w	fp, sl, r4
 800507c:	d00b      	beq.n	8005096 <_svfiprintf_r+0x7a>
 800507e:	465b      	mov	r3, fp
 8005080:	4622      	mov	r2, r4
 8005082:	4629      	mov	r1, r5
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff ff6f 	bl	8004f68 <__ssputs_r>
 800508a:	3001      	adds	r0, #1
 800508c:	f000 80a9 	beq.w	80051e2 <_svfiprintf_r+0x1c6>
 8005090:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005092:	445a      	add	r2, fp
 8005094:	9209      	str	r2, [sp, #36]	; 0x24
 8005096:	f89a 3000 	ldrb.w	r3, [sl]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 80a1 	beq.w	80051e2 <_svfiprintf_r+0x1c6>
 80050a0:	2300      	movs	r3, #0
 80050a2:	f04f 32ff 	mov.w	r2, #4294967295
 80050a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050aa:	f10a 0a01 	add.w	sl, sl, #1
 80050ae:	9304      	str	r3, [sp, #16]
 80050b0:	9307      	str	r3, [sp, #28]
 80050b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050b6:	931a      	str	r3, [sp, #104]	; 0x68
 80050b8:	4654      	mov	r4, sl
 80050ba:	2205      	movs	r2, #5
 80050bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c0:	4850      	ldr	r0, [pc, #320]	; (8005204 <_svfiprintf_r+0x1e8>)
 80050c2:	f7fb f8c5 	bl	8000250 <memchr>
 80050c6:	9a04      	ldr	r2, [sp, #16]
 80050c8:	b9d8      	cbnz	r0, 8005102 <_svfiprintf_r+0xe6>
 80050ca:	06d0      	lsls	r0, r2, #27
 80050cc:	bf44      	itt	mi
 80050ce:	2320      	movmi	r3, #32
 80050d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050d4:	0711      	lsls	r1, r2, #28
 80050d6:	bf44      	itt	mi
 80050d8:	232b      	movmi	r3, #43	; 0x2b
 80050da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050de:	f89a 3000 	ldrb.w	r3, [sl]
 80050e2:	2b2a      	cmp	r3, #42	; 0x2a
 80050e4:	d015      	beq.n	8005112 <_svfiprintf_r+0xf6>
 80050e6:	9a07      	ldr	r2, [sp, #28]
 80050e8:	4654      	mov	r4, sl
 80050ea:	2000      	movs	r0, #0
 80050ec:	f04f 0c0a 	mov.w	ip, #10
 80050f0:	4621      	mov	r1, r4
 80050f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050f6:	3b30      	subs	r3, #48	; 0x30
 80050f8:	2b09      	cmp	r3, #9
 80050fa:	d94d      	bls.n	8005198 <_svfiprintf_r+0x17c>
 80050fc:	b1b0      	cbz	r0, 800512c <_svfiprintf_r+0x110>
 80050fe:	9207      	str	r2, [sp, #28]
 8005100:	e014      	b.n	800512c <_svfiprintf_r+0x110>
 8005102:	eba0 0308 	sub.w	r3, r0, r8
 8005106:	fa09 f303 	lsl.w	r3, r9, r3
 800510a:	4313      	orrs	r3, r2
 800510c:	9304      	str	r3, [sp, #16]
 800510e:	46a2      	mov	sl, r4
 8005110:	e7d2      	b.n	80050b8 <_svfiprintf_r+0x9c>
 8005112:	9b03      	ldr	r3, [sp, #12]
 8005114:	1d19      	adds	r1, r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	9103      	str	r1, [sp, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfbb      	ittet	lt
 800511e:	425b      	neglt	r3, r3
 8005120:	f042 0202 	orrlt.w	r2, r2, #2
 8005124:	9307      	strge	r3, [sp, #28]
 8005126:	9307      	strlt	r3, [sp, #28]
 8005128:	bfb8      	it	lt
 800512a:	9204      	strlt	r2, [sp, #16]
 800512c:	7823      	ldrb	r3, [r4, #0]
 800512e:	2b2e      	cmp	r3, #46	; 0x2e
 8005130:	d10c      	bne.n	800514c <_svfiprintf_r+0x130>
 8005132:	7863      	ldrb	r3, [r4, #1]
 8005134:	2b2a      	cmp	r3, #42	; 0x2a
 8005136:	d134      	bne.n	80051a2 <_svfiprintf_r+0x186>
 8005138:	9b03      	ldr	r3, [sp, #12]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	9203      	str	r2, [sp, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	bfb8      	it	lt
 8005144:	f04f 33ff 	movlt.w	r3, #4294967295
 8005148:	3402      	adds	r4, #2
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005214 <_svfiprintf_r+0x1f8>
 8005150:	7821      	ldrb	r1, [r4, #0]
 8005152:	2203      	movs	r2, #3
 8005154:	4650      	mov	r0, sl
 8005156:	f7fb f87b 	bl	8000250 <memchr>
 800515a:	b138      	cbz	r0, 800516c <_svfiprintf_r+0x150>
 800515c:	9b04      	ldr	r3, [sp, #16]
 800515e:	eba0 000a 	sub.w	r0, r0, sl
 8005162:	2240      	movs	r2, #64	; 0x40
 8005164:	4082      	lsls	r2, r0
 8005166:	4313      	orrs	r3, r2
 8005168:	3401      	adds	r4, #1
 800516a:	9304      	str	r3, [sp, #16]
 800516c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005170:	4825      	ldr	r0, [pc, #148]	; (8005208 <_svfiprintf_r+0x1ec>)
 8005172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005176:	2206      	movs	r2, #6
 8005178:	f7fb f86a 	bl	8000250 <memchr>
 800517c:	2800      	cmp	r0, #0
 800517e:	d038      	beq.n	80051f2 <_svfiprintf_r+0x1d6>
 8005180:	4b22      	ldr	r3, [pc, #136]	; (800520c <_svfiprintf_r+0x1f0>)
 8005182:	bb1b      	cbnz	r3, 80051cc <_svfiprintf_r+0x1b0>
 8005184:	9b03      	ldr	r3, [sp, #12]
 8005186:	3307      	adds	r3, #7
 8005188:	f023 0307 	bic.w	r3, r3, #7
 800518c:	3308      	adds	r3, #8
 800518e:	9303      	str	r3, [sp, #12]
 8005190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005192:	4433      	add	r3, r6
 8005194:	9309      	str	r3, [sp, #36]	; 0x24
 8005196:	e768      	b.n	800506a <_svfiprintf_r+0x4e>
 8005198:	fb0c 3202 	mla	r2, ip, r2, r3
 800519c:	460c      	mov	r4, r1
 800519e:	2001      	movs	r0, #1
 80051a0:	e7a6      	b.n	80050f0 <_svfiprintf_r+0xd4>
 80051a2:	2300      	movs	r3, #0
 80051a4:	3401      	adds	r4, #1
 80051a6:	9305      	str	r3, [sp, #20]
 80051a8:	4619      	mov	r1, r3
 80051aa:	f04f 0c0a 	mov.w	ip, #10
 80051ae:	4620      	mov	r0, r4
 80051b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b4:	3a30      	subs	r2, #48	; 0x30
 80051b6:	2a09      	cmp	r2, #9
 80051b8:	d903      	bls.n	80051c2 <_svfiprintf_r+0x1a6>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0c6      	beq.n	800514c <_svfiprintf_r+0x130>
 80051be:	9105      	str	r1, [sp, #20]
 80051c0:	e7c4      	b.n	800514c <_svfiprintf_r+0x130>
 80051c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80051c6:	4604      	mov	r4, r0
 80051c8:	2301      	movs	r3, #1
 80051ca:	e7f0      	b.n	80051ae <_svfiprintf_r+0x192>
 80051cc:	ab03      	add	r3, sp, #12
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	462a      	mov	r2, r5
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <_svfiprintf_r+0x1f4>)
 80051d4:	a904      	add	r1, sp, #16
 80051d6:	4638      	mov	r0, r7
 80051d8:	f3af 8000 	nop.w
 80051dc:	1c42      	adds	r2, r0, #1
 80051de:	4606      	mov	r6, r0
 80051e0:	d1d6      	bne.n	8005190 <_svfiprintf_r+0x174>
 80051e2:	89ab      	ldrh	r3, [r5, #12]
 80051e4:	065b      	lsls	r3, r3, #25
 80051e6:	f53f af2d 	bmi.w	8005044 <_svfiprintf_r+0x28>
 80051ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051ec:	b01d      	add	sp, #116	; 0x74
 80051ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f2:	ab03      	add	r3, sp, #12
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	462a      	mov	r2, r5
 80051f8:	4b05      	ldr	r3, [pc, #20]	; (8005210 <_svfiprintf_r+0x1f4>)
 80051fa:	a904      	add	r1, sp, #16
 80051fc:	4638      	mov	r0, r7
 80051fe:	f000 f879 	bl	80052f4 <_printf_i>
 8005202:	e7eb      	b.n	80051dc <_svfiprintf_r+0x1c0>
 8005204:	080058cc 	.word	0x080058cc
 8005208:	080058d6 	.word	0x080058d6
 800520c:	00000000 	.word	0x00000000
 8005210:	08004f69 	.word	0x08004f69
 8005214:	080058d2 	.word	0x080058d2

08005218 <_printf_common>:
 8005218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	4616      	mov	r6, r2
 800521e:	4699      	mov	r9, r3
 8005220:	688a      	ldr	r2, [r1, #8]
 8005222:	690b      	ldr	r3, [r1, #16]
 8005224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005228:	4293      	cmp	r3, r2
 800522a:	bfb8      	it	lt
 800522c:	4613      	movlt	r3, r2
 800522e:	6033      	str	r3, [r6, #0]
 8005230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005234:	4607      	mov	r7, r0
 8005236:	460c      	mov	r4, r1
 8005238:	b10a      	cbz	r2, 800523e <_printf_common+0x26>
 800523a:	3301      	adds	r3, #1
 800523c:	6033      	str	r3, [r6, #0]
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	0699      	lsls	r1, r3, #26
 8005242:	bf42      	ittt	mi
 8005244:	6833      	ldrmi	r3, [r6, #0]
 8005246:	3302      	addmi	r3, #2
 8005248:	6033      	strmi	r3, [r6, #0]
 800524a:	6825      	ldr	r5, [r4, #0]
 800524c:	f015 0506 	ands.w	r5, r5, #6
 8005250:	d106      	bne.n	8005260 <_printf_common+0x48>
 8005252:	f104 0a19 	add.w	sl, r4, #25
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	6832      	ldr	r2, [r6, #0]
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	42ab      	cmp	r3, r5
 800525e:	dc26      	bgt.n	80052ae <_printf_common+0x96>
 8005260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005264:	1e13      	subs	r3, r2, #0
 8005266:	6822      	ldr	r2, [r4, #0]
 8005268:	bf18      	it	ne
 800526a:	2301      	movne	r3, #1
 800526c:	0692      	lsls	r2, r2, #26
 800526e:	d42b      	bmi.n	80052c8 <_printf_common+0xb0>
 8005270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005274:	4649      	mov	r1, r9
 8005276:	4638      	mov	r0, r7
 8005278:	47c0      	blx	r8
 800527a:	3001      	adds	r0, #1
 800527c:	d01e      	beq.n	80052bc <_printf_common+0xa4>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	6922      	ldr	r2, [r4, #16]
 8005282:	f003 0306 	and.w	r3, r3, #6
 8005286:	2b04      	cmp	r3, #4
 8005288:	bf02      	ittt	eq
 800528a:	68e5      	ldreq	r5, [r4, #12]
 800528c:	6833      	ldreq	r3, [r6, #0]
 800528e:	1aed      	subeq	r5, r5, r3
 8005290:	68a3      	ldr	r3, [r4, #8]
 8005292:	bf0c      	ite	eq
 8005294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005298:	2500      	movne	r5, #0
 800529a:	4293      	cmp	r3, r2
 800529c:	bfc4      	itt	gt
 800529e:	1a9b      	subgt	r3, r3, r2
 80052a0:	18ed      	addgt	r5, r5, r3
 80052a2:	2600      	movs	r6, #0
 80052a4:	341a      	adds	r4, #26
 80052a6:	42b5      	cmp	r5, r6
 80052a8:	d11a      	bne.n	80052e0 <_printf_common+0xc8>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e008      	b.n	80052c0 <_printf_common+0xa8>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4652      	mov	r2, sl
 80052b2:	4649      	mov	r1, r9
 80052b4:	4638      	mov	r0, r7
 80052b6:	47c0      	blx	r8
 80052b8:	3001      	adds	r0, #1
 80052ba:	d103      	bne.n	80052c4 <_printf_common+0xac>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	3501      	adds	r5, #1
 80052c6:	e7c6      	b.n	8005256 <_printf_common+0x3e>
 80052c8:	18e1      	adds	r1, r4, r3
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	2030      	movs	r0, #48	; 0x30
 80052ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d2:	4422      	add	r2, r4
 80052d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052dc:	3302      	adds	r3, #2
 80052de:	e7c7      	b.n	8005270 <_printf_common+0x58>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4622      	mov	r2, r4
 80052e4:	4649      	mov	r1, r9
 80052e6:	4638      	mov	r0, r7
 80052e8:	47c0      	blx	r8
 80052ea:	3001      	adds	r0, #1
 80052ec:	d0e6      	beq.n	80052bc <_printf_common+0xa4>
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7d9      	b.n	80052a6 <_printf_common+0x8e>
	...

080052f4 <_printf_i>:
 80052f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	7e0f      	ldrb	r7, [r1, #24]
 80052fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052fc:	2f78      	cmp	r7, #120	; 0x78
 80052fe:	4691      	mov	r9, r2
 8005300:	4680      	mov	r8, r0
 8005302:	460c      	mov	r4, r1
 8005304:	469a      	mov	sl, r3
 8005306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800530a:	d807      	bhi.n	800531c <_printf_i+0x28>
 800530c:	2f62      	cmp	r7, #98	; 0x62
 800530e:	d80a      	bhi.n	8005326 <_printf_i+0x32>
 8005310:	2f00      	cmp	r7, #0
 8005312:	f000 80d4 	beq.w	80054be <_printf_i+0x1ca>
 8005316:	2f58      	cmp	r7, #88	; 0x58
 8005318:	f000 80c0 	beq.w	800549c <_printf_i+0x1a8>
 800531c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005324:	e03a      	b.n	800539c <_printf_i+0xa8>
 8005326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800532a:	2b15      	cmp	r3, #21
 800532c:	d8f6      	bhi.n	800531c <_printf_i+0x28>
 800532e:	a101      	add	r1, pc, #4	; (adr r1, 8005334 <_printf_i+0x40>)
 8005330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005334:	0800538d 	.word	0x0800538d
 8005338:	080053a1 	.word	0x080053a1
 800533c:	0800531d 	.word	0x0800531d
 8005340:	0800531d 	.word	0x0800531d
 8005344:	0800531d 	.word	0x0800531d
 8005348:	0800531d 	.word	0x0800531d
 800534c:	080053a1 	.word	0x080053a1
 8005350:	0800531d 	.word	0x0800531d
 8005354:	0800531d 	.word	0x0800531d
 8005358:	0800531d 	.word	0x0800531d
 800535c:	0800531d 	.word	0x0800531d
 8005360:	080054a5 	.word	0x080054a5
 8005364:	080053cd 	.word	0x080053cd
 8005368:	0800545f 	.word	0x0800545f
 800536c:	0800531d 	.word	0x0800531d
 8005370:	0800531d 	.word	0x0800531d
 8005374:	080054c7 	.word	0x080054c7
 8005378:	0800531d 	.word	0x0800531d
 800537c:	080053cd 	.word	0x080053cd
 8005380:	0800531d 	.word	0x0800531d
 8005384:	0800531d 	.word	0x0800531d
 8005388:	08005467 	.word	0x08005467
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	602a      	str	r2, [r5, #0]
 8005394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800539c:	2301      	movs	r3, #1
 800539e:	e09f      	b.n	80054e0 <_printf_i+0x1ec>
 80053a0:	6820      	ldr	r0, [r4, #0]
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	0607      	lsls	r7, r0, #24
 80053a6:	f103 0104 	add.w	r1, r3, #4
 80053aa:	6029      	str	r1, [r5, #0]
 80053ac:	d501      	bpl.n	80053b2 <_printf_i+0xbe>
 80053ae:	681e      	ldr	r6, [r3, #0]
 80053b0:	e003      	b.n	80053ba <_printf_i+0xc6>
 80053b2:	0646      	lsls	r6, r0, #25
 80053b4:	d5fb      	bpl.n	80053ae <_printf_i+0xba>
 80053b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80053ba:	2e00      	cmp	r6, #0
 80053bc:	da03      	bge.n	80053c6 <_printf_i+0xd2>
 80053be:	232d      	movs	r3, #45	; 0x2d
 80053c0:	4276      	negs	r6, r6
 80053c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c6:	485a      	ldr	r0, [pc, #360]	; (8005530 <_printf_i+0x23c>)
 80053c8:	230a      	movs	r3, #10
 80053ca:	e012      	b.n	80053f2 <_printf_i+0xfe>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	6820      	ldr	r0, [r4, #0]
 80053d0:	1d19      	adds	r1, r3, #4
 80053d2:	6029      	str	r1, [r5, #0]
 80053d4:	0605      	lsls	r5, r0, #24
 80053d6:	d501      	bpl.n	80053dc <_printf_i+0xe8>
 80053d8:	681e      	ldr	r6, [r3, #0]
 80053da:	e002      	b.n	80053e2 <_printf_i+0xee>
 80053dc:	0641      	lsls	r1, r0, #25
 80053de:	d5fb      	bpl.n	80053d8 <_printf_i+0xe4>
 80053e0:	881e      	ldrh	r6, [r3, #0]
 80053e2:	4853      	ldr	r0, [pc, #332]	; (8005530 <_printf_i+0x23c>)
 80053e4:	2f6f      	cmp	r7, #111	; 0x6f
 80053e6:	bf0c      	ite	eq
 80053e8:	2308      	moveq	r3, #8
 80053ea:	230a      	movne	r3, #10
 80053ec:	2100      	movs	r1, #0
 80053ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053f2:	6865      	ldr	r5, [r4, #4]
 80053f4:	60a5      	str	r5, [r4, #8]
 80053f6:	2d00      	cmp	r5, #0
 80053f8:	bfa2      	ittt	ge
 80053fa:	6821      	ldrge	r1, [r4, #0]
 80053fc:	f021 0104 	bicge.w	r1, r1, #4
 8005400:	6021      	strge	r1, [r4, #0]
 8005402:	b90e      	cbnz	r6, 8005408 <_printf_i+0x114>
 8005404:	2d00      	cmp	r5, #0
 8005406:	d04b      	beq.n	80054a0 <_printf_i+0x1ac>
 8005408:	4615      	mov	r5, r2
 800540a:	fbb6 f1f3 	udiv	r1, r6, r3
 800540e:	fb03 6711 	mls	r7, r3, r1, r6
 8005412:	5dc7      	ldrb	r7, [r0, r7]
 8005414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005418:	4637      	mov	r7, r6
 800541a:	42bb      	cmp	r3, r7
 800541c:	460e      	mov	r6, r1
 800541e:	d9f4      	bls.n	800540a <_printf_i+0x116>
 8005420:	2b08      	cmp	r3, #8
 8005422:	d10b      	bne.n	800543c <_printf_i+0x148>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	07de      	lsls	r6, r3, #31
 8005428:	d508      	bpl.n	800543c <_printf_i+0x148>
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	6861      	ldr	r1, [r4, #4]
 800542e:	4299      	cmp	r1, r3
 8005430:	bfde      	ittt	le
 8005432:	2330      	movle	r3, #48	; 0x30
 8005434:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800543c:	1b52      	subs	r2, r2, r5
 800543e:	6122      	str	r2, [r4, #16]
 8005440:	f8cd a000 	str.w	sl, [sp]
 8005444:	464b      	mov	r3, r9
 8005446:	aa03      	add	r2, sp, #12
 8005448:	4621      	mov	r1, r4
 800544a:	4640      	mov	r0, r8
 800544c:	f7ff fee4 	bl	8005218 <_printf_common>
 8005450:	3001      	adds	r0, #1
 8005452:	d14a      	bne.n	80054ea <_printf_i+0x1f6>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b004      	add	sp, #16
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	f043 0320 	orr.w	r3, r3, #32
 8005464:	6023      	str	r3, [r4, #0]
 8005466:	4833      	ldr	r0, [pc, #204]	; (8005534 <_printf_i+0x240>)
 8005468:	2778      	movs	r7, #120	; 0x78
 800546a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	6829      	ldr	r1, [r5, #0]
 8005472:	061f      	lsls	r7, r3, #24
 8005474:	f851 6b04 	ldr.w	r6, [r1], #4
 8005478:	d402      	bmi.n	8005480 <_printf_i+0x18c>
 800547a:	065f      	lsls	r7, r3, #25
 800547c:	bf48      	it	mi
 800547e:	b2b6      	uxthmi	r6, r6
 8005480:	07df      	lsls	r7, r3, #31
 8005482:	bf48      	it	mi
 8005484:	f043 0320 	orrmi.w	r3, r3, #32
 8005488:	6029      	str	r1, [r5, #0]
 800548a:	bf48      	it	mi
 800548c:	6023      	strmi	r3, [r4, #0]
 800548e:	b91e      	cbnz	r6, 8005498 <_printf_i+0x1a4>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f023 0320 	bic.w	r3, r3, #32
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	2310      	movs	r3, #16
 800549a:	e7a7      	b.n	80053ec <_printf_i+0xf8>
 800549c:	4824      	ldr	r0, [pc, #144]	; (8005530 <_printf_i+0x23c>)
 800549e:	e7e4      	b.n	800546a <_printf_i+0x176>
 80054a0:	4615      	mov	r5, r2
 80054a2:	e7bd      	b.n	8005420 <_printf_i+0x12c>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	6826      	ldr	r6, [r4, #0]
 80054a8:	6961      	ldr	r1, [r4, #20]
 80054aa:	1d18      	adds	r0, r3, #4
 80054ac:	6028      	str	r0, [r5, #0]
 80054ae:	0635      	lsls	r5, r6, #24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0x1c4>
 80054b4:	6019      	str	r1, [r3, #0]
 80054b6:	e002      	b.n	80054be <_printf_i+0x1ca>
 80054b8:	0670      	lsls	r0, r6, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0x1c0>
 80054bc:	8019      	strh	r1, [r3, #0]
 80054be:	2300      	movs	r3, #0
 80054c0:	6123      	str	r3, [r4, #16]
 80054c2:	4615      	mov	r5, r2
 80054c4:	e7bc      	b.n	8005440 <_printf_i+0x14c>
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	602a      	str	r2, [r5, #0]
 80054cc:	681d      	ldr	r5, [r3, #0]
 80054ce:	6862      	ldr	r2, [r4, #4]
 80054d0:	2100      	movs	r1, #0
 80054d2:	4628      	mov	r0, r5
 80054d4:	f7fa febc 	bl	8000250 <memchr>
 80054d8:	b108      	cbz	r0, 80054de <_printf_i+0x1ea>
 80054da:	1b40      	subs	r0, r0, r5
 80054dc:	6060      	str	r0, [r4, #4]
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	6123      	str	r3, [r4, #16]
 80054e2:	2300      	movs	r3, #0
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e8:	e7aa      	b.n	8005440 <_printf_i+0x14c>
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	462a      	mov	r2, r5
 80054ee:	4649      	mov	r1, r9
 80054f0:	4640      	mov	r0, r8
 80054f2:	47d0      	blx	sl
 80054f4:	3001      	adds	r0, #1
 80054f6:	d0ad      	beq.n	8005454 <_printf_i+0x160>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	079b      	lsls	r3, r3, #30
 80054fc:	d413      	bmi.n	8005526 <_printf_i+0x232>
 80054fe:	68e0      	ldr	r0, [r4, #12]
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	4298      	cmp	r0, r3
 8005504:	bfb8      	it	lt
 8005506:	4618      	movlt	r0, r3
 8005508:	e7a6      	b.n	8005458 <_printf_i+0x164>
 800550a:	2301      	movs	r3, #1
 800550c:	4632      	mov	r2, r6
 800550e:	4649      	mov	r1, r9
 8005510:	4640      	mov	r0, r8
 8005512:	47d0      	blx	sl
 8005514:	3001      	adds	r0, #1
 8005516:	d09d      	beq.n	8005454 <_printf_i+0x160>
 8005518:	3501      	adds	r5, #1
 800551a:	68e3      	ldr	r3, [r4, #12]
 800551c:	9903      	ldr	r1, [sp, #12]
 800551e:	1a5b      	subs	r3, r3, r1
 8005520:	42ab      	cmp	r3, r5
 8005522:	dcf2      	bgt.n	800550a <_printf_i+0x216>
 8005524:	e7eb      	b.n	80054fe <_printf_i+0x20a>
 8005526:	2500      	movs	r5, #0
 8005528:	f104 0619 	add.w	r6, r4, #25
 800552c:	e7f5      	b.n	800551a <_printf_i+0x226>
 800552e:	bf00      	nop
 8005530:	080058dd 	.word	0x080058dd
 8005534:	080058ee 	.word	0x080058ee

08005538 <memmove>:
 8005538:	4288      	cmp	r0, r1
 800553a:	b510      	push	{r4, lr}
 800553c:	eb01 0402 	add.w	r4, r1, r2
 8005540:	d902      	bls.n	8005548 <memmove+0x10>
 8005542:	4284      	cmp	r4, r0
 8005544:	4623      	mov	r3, r4
 8005546:	d807      	bhi.n	8005558 <memmove+0x20>
 8005548:	1e43      	subs	r3, r0, #1
 800554a:	42a1      	cmp	r1, r4
 800554c:	d008      	beq.n	8005560 <memmove+0x28>
 800554e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005552:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005556:	e7f8      	b.n	800554a <memmove+0x12>
 8005558:	4402      	add	r2, r0
 800555a:	4601      	mov	r1, r0
 800555c:	428a      	cmp	r2, r1
 800555e:	d100      	bne.n	8005562 <memmove+0x2a>
 8005560:	bd10      	pop	{r4, pc}
 8005562:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005566:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800556a:	e7f7      	b.n	800555c <memmove+0x24>

0800556c <_sbrk_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4d06      	ldr	r5, [pc, #24]	; (8005588 <_sbrk_r+0x1c>)
 8005570:	2300      	movs	r3, #0
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	602b      	str	r3, [r5, #0]
 8005578:	f7fb fe7a 	bl	8001270 <_sbrk>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_sbrk_r+0x1a>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_sbrk_r+0x1a>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	20000344 	.word	0x20000344

0800558c <memcpy>:
 800558c:	440a      	add	r2, r1
 800558e:	4291      	cmp	r1, r2
 8005590:	f100 33ff 	add.w	r3, r0, #4294967295
 8005594:	d100      	bne.n	8005598 <memcpy+0xc>
 8005596:	4770      	bx	lr
 8005598:	b510      	push	{r4, lr}
 800559a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a2:	4291      	cmp	r1, r2
 80055a4:	d1f9      	bne.n	800559a <memcpy+0xe>
 80055a6:	bd10      	pop	{r4, pc}

080055a8 <_realloc_r>:
 80055a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ac:	4680      	mov	r8, r0
 80055ae:	4614      	mov	r4, r2
 80055b0:	460e      	mov	r6, r1
 80055b2:	b921      	cbnz	r1, 80055be <_realloc_r+0x16>
 80055b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055b8:	4611      	mov	r1, r2
 80055ba:	f7ff bc49 	b.w	8004e50 <_malloc_r>
 80055be:	b92a      	cbnz	r2, 80055cc <_realloc_r+0x24>
 80055c0:	f7ff fbda 	bl	8004d78 <_free_r>
 80055c4:	4625      	mov	r5, r4
 80055c6:	4628      	mov	r0, r5
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	f000 f81b 	bl	8005606 <_malloc_usable_size_r>
 80055d0:	4284      	cmp	r4, r0
 80055d2:	4607      	mov	r7, r0
 80055d4:	d802      	bhi.n	80055dc <_realloc_r+0x34>
 80055d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055da:	d812      	bhi.n	8005602 <_realloc_r+0x5a>
 80055dc:	4621      	mov	r1, r4
 80055de:	4640      	mov	r0, r8
 80055e0:	f7ff fc36 	bl	8004e50 <_malloc_r>
 80055e4:	4605      	mov	r5, r0
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d0ed      	beq.n	80055c6 <_realloc_r+0x1e>
 80055ea:	42bc      	cmp	r4, r7
 80055ec:	4622      	mov	r2, r4
 80055ee:	4631      	mov	r1, r6
 80055f0:	bf28      	it	cs
 80055f2:	463a      	movcs	r2, r7
 80055f4:	f7ff ffca 	bl	800558c <memcpy>
 80055f8:	4631      	mov	r1, r6
 80055fa:	4640      	mov	r0, r8
 80055fc:	f7ff fbbc 	bl	8004d78 <_free_r>
 8005600:	e7e1      	b.n	80055c6 <_realloc_r+0x1e>
 8005602:	4635      	mov	r5, r6
 8005604:	e7df      	b.n	80055c6 <_realloc_r+0x1e>

08005606 <_malloc_usable_size_r>:
 8005606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800560a:	1f18      	subs	r0, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	bfbc      	itt	lt
 8005610:	580b      	ldrlt	r3, [r1, r0]
 8005612:	18c0      	addlt	r0, r0, r3
 8005614:	4770      	bx	lr
	...

08005618 <_init>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr

08005624 <_fini>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	bf00      	nop
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr
