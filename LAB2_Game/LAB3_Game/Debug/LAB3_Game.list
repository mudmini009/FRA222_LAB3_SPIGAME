
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800577c  0800577c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005784  08005784  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800578c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000060  080057ec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080057ec  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146dc  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002766  00000000  00000000  000347af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00036f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e89  00000000  00000000  00038190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c3d  00000000  00000000  00039019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157b1  00000000  00000000  0005fc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fde17  00000000  00000000  00075407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005428  00000000  00000000  00173220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00178648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005500 	.word	0x08005500

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08005500 	.word	0x08005500

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe23 	bl	800123a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f848 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f968 	bl	80008cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005fc:	f000 f890 	bl	8000720 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000600:	f000 f8d8 	bl	80007b4 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000604:	f000 f914 	bl	8000830 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 8000608:	4818      	ldr	r0, [pc, #96]	; (800066c <main+0x80>)
 800060a:	f002 ffa5 	bl	8003558 <HAL_TIM_Base_Start>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"This game you need to PICK 1 or 2 coins VS our AI(just BOT)\n", strlen("This game you need to PICK 1 or 2 coins VS our AI(just BOT)\n"), HAL_MAX_DELAY);
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	223c      	movs	r2, #60	; 0x3c
 8000614:	4916      	ldr	r1, [pc, #88]	; (8000670 <main+0x84>)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <main+0x88>)
 8000618:	f003 fb5a 	bl	8003cd0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Who pick the last coin Win!!\n", strlen("Who pick the last coin Win!!\n"), HAL_MAX_DELAY);
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
 8000620:	221d      	movs	r2, #29
 8000622:	4915      	ldr	r1, [pc, #84]	; (8000678 <main+0x8c>)
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0x88>)
 8000626:	f003 fb53 	bl	8003cd0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"If you're ready please type\n", strlen("If you're ready please type\n"), HAL_MAX_DELAY);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	221c      	movs	r2, #28
 8000630:	4912      	ldr	r1, [pc, #72]	; (800067c <main+0x90>)
 8000632:	4810      	ldr	r0, [pc, #64]	; (8000674 <main+0x88>)
 8000634:	f003 fb4c 	bl	8003cd0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"wanna play this game so bad\n", strlen("wanna play this game so bad\n"), HAL_MAX_DELAY);
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	221c      	movs	r2, #28
 800063e:	4910      	ldr	r1, [pc, #64]	; (8000680 <main+0x94>)
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x88>)
 8000642:	f003 fb45 	bl	8003cd0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"and now you can join\n", strlen("and now you can join\n"), HAL_MAX_DELAY);
 8000646:	f04f 33ff 	mov.w	r3, #4294967295
 800064a:	2215      	movs	r2, #21
 800064c:	490d      	ldr	r1, [pc, #52]	; (8000684 <main+0x98>)
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0x88>)
 8000650:	f003 fb3e 	bl	8003cd0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  AreYouReadyToPlay();
 8000654:	f000 f9ca 	bl	80009ec <AreYouReadyToPlay>
	      SPITxRx_readIO();
 8000658:	f000 fa0e 	bl	8000a78 <SPITxRx_readIO>
	      TikTokGame();
 800065c:	f000 fa36 	bl	8000acc <TikTokGame>
	      CoinLeftUART();
 8000660:	f000 fc20 	bl	8000ea4 <CoinLeftUART>
	      LEDdisplay();
 8000664:	f000 fbb6 	bl	8000dd4 <LEDdisplay>
  {
 8000668:	e7f4      	b.n	8000654 <main+0x68>
 800066a:	bf00      	nop
 800066c:	20000174 	.word	0x20000174
 8000670:	08005518 	.word	0x08005518
 8000674:	2000007c 	.word	0x2000007c
 8000678:	08005558 	.word	0x08005558
 800067c:	08005578 	.word	0x08005578
 8000680:	08005598 	.word	0x08005598
 8000684:	080055b8 	.word	0x080055b8

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0318 	add.w	r3, r7, #24
 8000692:	2238      	movs	r2, #56	; 0x38
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 faae 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f001 f9a4 	bl	80019f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2340      	movs	r3, #64	; 0x40
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006ca:	2355      	movs	r3, #85	; 0x55
 80006cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fa3e 	bl	8001b60 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ea:	f000 fc0b 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fd3c 	bl	8002184 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000712:	f000 fbf7 	bl	8000f04 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000726:	4a22      	ldr	r2, [pc, #136]	; (80007b0 <MX_LPUART1_UART_Init+0x90>)
 8000728:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800072a:	4b20      	ldr	r3, [pc, #128]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800072c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000730:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000750:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000764:	f003 fa64 	bl	8003c30 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800076e:	f000 fbc9 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000776:	f004 f955 	bl	8004a24 <HAL_UARTEx_SetTxFifoThreshold>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000780:	f000 fbc0 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4809      	ldr	r0, [pc, #36]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000788:	f004 f98a 	bl	8004aa0 <HAL_UARTEx_SetRxFifoThreshold>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000792:	f000 fbb7 	bl	8000f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_LPUART1_UART_Init+0x8c>)
 8000798:	f004 f90b 	bl	80049b2 <HAL_UARTEx_DisableFifoMode>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007a2:	f000 fbaf 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	40008000 	.word	0x40008000

080007b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ba:	4a1c      	ldr	r2, [pc, #112]	; (800082c <MX_SPI3_Init+0x78>)
 80007bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_SPI3_Init+0x74>)
 80007c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_SPI3_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007d2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_SPI3_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_SPI3_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_SPI3_Init+0x74>)
 80007e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_SPI3_Init+0x74>)
 80007ea:	2238      	movs	r2, #56	; 0x38
 80007ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_SPI3_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_SPI3_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_SPI3_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_SPI3_Init+0x74>)
 8000802:	2207      	movs	r2, #7
 8000804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_SPI3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_SPI3_Init+0x74>)
 800080e:	2208      	movs	r2, #8
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_SPI3_Init+0x74>)
 8000814:	f002 f920 	bl	8002a58 <HAL_SPI_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 fb71 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000110 	.word	0x20000110
 800082c:	40003c00 	.word	0x40003c00

08000830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0310 	add.w	r3, r7, #16
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000850:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <MX_TIM3_Init+0x98>)
 8000852:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000856:	f244 2267 	movw	r2, #16999	; 0x4267
 800085a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM3_Init+0x94>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000864:	2263      	movs	r2, #99	; 0x63
 8000866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_TIM3_Init+0x94>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000874:	4813      	ldr	r0, [pc, #76]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000876:	f002 fe17 	bl	80034a8 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000880:	f000 fb40 	bl	8000f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	4619      	mov	r1, r3
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <MX_TIM3_Init+0x94>)
 8000892:	f002 fed1 	bl	8003638 <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800089c:	f000 fb32 	bl	8000f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_TIM3_Init+0x94>)
 80008ae:	f003 f929 	bl	8003b04 <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008b8:	f000 fb24 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000174 	.word	0x20000174
 80008c8:	40000400 	.word	0x40000400

080008cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a3e      	ldr	r2, [pc, #248]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <MX_GPIO_Init+0x114>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a38      	ldr	r2, [pc, #224]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a32      	ldr	r2, [pc, #200]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_GPIO_Init+0x114>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a26      	ldr	r2, [pc, #152]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_GPIO_Init+0x114>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2120      	movs	r1, #32
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f001 f80d 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2104      	movs	r1, #4
 800096a:	481e      	ldr	r0, [pc, #120]	; (80009e4 <MX_GPIO_Init+0x118>)
 800096c:	f001 f808 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000976:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4818      	ldr	r0, [pc, #96]	; (80009e8 <MX_GPIO_Init+0x11c>)
 8000988:	f000 fe60 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098c:	2320      	movs	r3, #32
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 fe51 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009aa:	2304      	movs	r3, #4
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_GPIO_Init+0x118>)
 80009c2:	f000 fe43 	bl	800164c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2028      	movs	r0, #40	; 0x28
 80009cc:	f000 fda3 	bl	8001516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d0:	2028      	movs	r0, #40	; 0x28
 80009d2:	f000 fdba 	bl	800154a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	48000c00 	.word	0x48000c00
 80009e8:	48000800 	.word	0x48000800

080009ec <AreYouReadyToPlay>:

/* USER CODE BEGIN 4 */
void AreYouReadyToPlay() {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
    while (1) {
        if (ReadyToPlay == 1) // If already ready to play, break the loop
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <AreYouReadyToPlay+0x74>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d02d      	beq.n	8000a56 <AreYouReadyToPlay+0x6a>
            break;

        memset(RxBuffer, 0, sizeof(RxBuffer)); // Clear the receive buffer
 80009fa:	221b      	movs	r2, #27
 80009fc:	2100      	movs	r1, #0
 80009fe:	4819      	ldr	r0, [pc, #100]	; (8000a64 <AreYouReadyToPlay+0x78>)
 8000a00:	f004 f8fa 	bl	8004bf8 <memset>

        HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, RxBuffer, 27, HAL_MAX_DELAY);
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
 8000a08:	221b      	movs	r2, #27
 8000a0a:	4916      	ldr	r1, [pc, #88]	; (8000a64 <AreYouReadyToPlay+0x78>)
 8000a0c:	4816      	ldr	r0, [pc, #88]	; (8000a68 <AreYouReadyToPlay+0x7c>)
 8000a0e:	f003 f9ed 	bl	8003dec <HAL_UART_Receive>
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]

        if (status == HAL_OK && strcmp((char*)RxBuffer, "wanna play this game so bad") == 0) {//correct condition
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d10a      	bne.n	8000a32 <AreYouReadyToPlay+0x46>
 8000a1c:	4913      	ldr	r1, [pc, #76]	; (8000a6c <AreYouReadyToPlay+0x80>)
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <AreYouReadyToPlay+0x78>)
 8000a20:	f7ff fbfe 	bl	8000220 <strcmp>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <AreYouReadyToPlay+0x46>
            ReadyToPlay=1; //you are ready to play
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <AreYouReadyToPlay+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
            break; // Exit the loop once condition is met
 8000a30:	e012      	b.n	8000a58 <AreYouReadyToPlay+0x6c>
        }
        else {
            ReadyToPlay=0;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <AreYouReadyToPlay+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Do you really wanna play? Just type\n", strlen("Do you really wanna play? Just type\n"), HAL_MAX_DELAY);
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	2224      	movs	r2, #36	; 0x24
 8000a3e:	490c      	ldr	r1, [pc, #48]	; (8000a70 <AreYouReadyToPlay+0x84>)
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <AreYouReadyToPlay+0x7c>)
 8000a42:	f003 f945 	bl	8003cd0 <HAL_UART_Transmit>
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"wanna play this game so bad\n", strlen("wanna play this game so bad\n"), HAL_MAX_DELAY);
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	221c      	movs	r2, #28
 8000a4c:	4909      	ldr	r1, [pc, #36]	; (8000a74 <AreYouReadyToPlay+0x88>)
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <AreYouReadyToPlay+0x7c>)
 8000a50:	f003 f93e 	bl	8003cd0 <HAL_UART_Transmit>
    while (1) {
 8000a54:	e7cd      	b.n	80009f2 <AreYouReadyToPlay+0x6>
            break;
 8000a56:	bf00      	nop
        }
    }
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000200 	.word	0x20000200
 8000a64:	200001e4 	.word	0x200001e4
 8000a68:	2000007c 	.word	0x2000007c
 8000a6c:	080055d0 	.word	0x080055d0
 8000a70:	080055ec 	.word	0x080055ec
 8000a74:	08005598 	.word	0x08005598

08000a78 <SPITxRx_readIO>:
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
HAL_Delay(5);
}

void SPITxRx_readIO()
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000a7c:	2104      	movs	r1, #4
 8000a7e:	480f      	ldr	r0, [pc, #60]	; (8000abc <SPITxRx_readIO+0x44>)
 8000a80:	f000 ff66 	bl	8001950 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d016      	beq.n	8000ab8 <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2104      	movs	r1, #4
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <SPITxRx_readIO+0x44>)
 8000a90:	f000 ff76 	bl	8001980 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <SPITxRx_readIO+0x48>)
 8000a96:	2241      	movs	r2, #65	; 0x41
 8000a98:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <SPITxRx_readIO+0x48>)
 8000a9c:	2212      	movs	r2, #18
 8000a9e:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <SPITxRx_readIO+0x48>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <SPITxRx_readIO+0x48>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000aac:	2304      	movs	r3, #4
 8000aae:	4a05      	ldr	r2, [pc, #20]	; (8000ac4 <SPITxRx_readIO+0x4c>)
 8000ab0:	4903      	ldr	r1, [pc, #12]	; (8000ac0 <SPITxRx_readIO+0x48>)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <SPITxRx_readIO+0x50>)
 8000ab4:	f002 f87c 	bl	8002bb0 <HAL_SPI_TransmitReceive_IT>
}
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	48000c00 	.word	0x48000c00
 8000ac0:	200001cc 	.word	0x200001cc
 8000ac4:	200001c0 	.word	0x200001c0
 8000ac8:	20000110 	.word	0x20000110

08000acc <TikTokGame>:

void TikTokGame()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 8000ad0:	4ba1      	ldr	r3, [pc, #644]	; (8000d58 <TikTokGame+0x28c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f040 811b 	bne.w	8000d10 <TikTokGame+0x244>
    {
    	switch (game_left) {
 8000ada:	4ba0      	ldr	r3, [pc, #640]	; (8000d5c <TikTokGame+0x290>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	2b04      	cmp	r3, #4
 8000ae2:	f200 8165 	bhi.w	8000db0 <TikTokGame+0x2e4>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <TikTokGame+0x20>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000c8d 	.word	0x08000c8d
 8000af0:	08000c09 	.word	0x08000c09
 8000af4:	08000b85 	.word	0x08000b85
 8000af8:	08000db1 	.word	0x08000db1
 8000afc:	08000b01 	.word	0x08000b01
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 8000b00:	4b97      	ldr	r3, [pc, #604]	; (8000d60 <TikTokGame+0x294>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d83a      	bhi.n	8000b80 <TikTokGame+0xb4>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <TikTokGame+0x44>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b59 	.word	0x08000b59
 8000b14:	08000b81 	.word	0x08000b81
 8000b18:	08000b3f 	.word	0x08000b3f
 8000b1c:	08000b25 	.word	0x08000b25
 8000b20:	08000b81 	.word	0x08000b81
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000b24:	4b8f      	ldr	r3, [pc, #572]	; (8000d64 <TikTokGame+0x298>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000b2a:	4b8c      	ldr	r3, [pc, #560]	; (8000d5c <TikTokGame+0x290>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b30:	4b8d      	ldr	r3, [pc, #564]	; (8000d68 <TikTokGame+0x29c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b36:	4b88      	ldr	r3, [pc, #544]	; (8000d58 <TikTokGame+0x28c>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
    	                break;
 8000b3c:	e021      	b.n	8000b82 <TikTokGame+0xb6>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000b3e:	4b89      	ldr	r3, [pc, #548]	; (8000d64 <TikTokGame+0x298>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 8000b44:	4b85      	ldr	r3, [pc, #532]	; (8000d5c <TikTokGame+0x290>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b4a:	4b87      	ldr	r3, [pc, #540]	; (8000d68 <TikTokGame+0x29c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b50:	4b81      	ldr	r3, [pc, #516]	; (8000d58 <TikTokGame+0x28c>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
    	                break;
 8000b56:	e014      	b.n	8000b82 <TikTokGame+0xb6>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000b58:	4b82      	ldr	r3, [pc, #520]	; (8000d64 <TikTokGame+0x298>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000b5e:	4b7f      	ldr	r3, [pc, #508]	; (8000d5c <TikTokGame+0x290>)
 8000b60:	2205      	movs	r2, #5
 8000b62:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b64:	4b80      	ldr	r3, [pc, #512]	; (8000d68 <TikTokGame+0x29c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000b6a:	4b7b      	ldr	r3, [pc, #492]	; (8000d58 <TikTokGame+0x28c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	221c      	movs	r2, #28
 8000b76:	497d      	ldr	r1, [pc, #500]	; (8000d6c <TikTokGame+0x2a0>)
 8000b78:	487d      	ldr	r0, [pc, #500]	; (8000d70 <TikTokGame+0x2a4>)
 8000b7a:	f003 f8a9 	bl	8003cd0 <HAL_UART_Transmit>
    	                break;
 8000b7e:	e000      	b.n	8000b82 <TikTokGame+0xb6>
    	            default: // multi press do nothing
    	                break;
 8000b80:	bf00      	nop
    	        }
    	        break;
 8000b82:	e115      	b.n	8000db0 <TikTokGame+0x2e4>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 8000b84:	4b76      	ldr	r3, [pc, #472]	; (8000d60 <TikTokGame+0x294>)
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d83a      	bhi.n	8000c04 <TikTokGame+0x138>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <TikTokGame+0xc8>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000bdd 	.word	0x08000bdd
 8000b98:	08000c05 	.word	0x08000c05
 8000b9c:	08000bc3 	.word	0x08000bc3
 8000ba0:	08000ba9 	.word	0x08000ba9
 8000ba4:	08000c05 	.word	0x08000c05
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000ba8:	4b6e      	ldr	r3, [pc, #440]	; (8000d64 <TikTokGame+0x298>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000bae:	4b6b      	ldr	r3, [pc, #428]	; (8000d5c <TikTokGame+0x290>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000bb4:	4b6c      	ldr	r3, [pc, #432]	; (8000d68 <TikTokGame+0x29c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000bba:	4b67      	ldr	r3, [pc, #412]	; (8000d58 <TikTokGame+0x28c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	601a      	str	r2, [r3, #0]
    	                break;
 8000bc0:	e021      	b.n	8000c06 <TikTokGame+0x13a>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000bc2:	4b68      	ldr	r3, [pc, #416]	; (8000d64 <TikTokGame+0x298>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000bc8:	4b64      	ldr	r3, [pc, #400]	; (8000d5c <TikTokGame+0x290>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000bce:	4b66      	ldr	r3, [pc, #408]	; (8000d68 <TikTokGame+0x29c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000bd4:	4b60      	ldr	r3, [pc, #384]	; (8000d58 <TikTokGame+0x28c>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
    	                break;
 8000bda:	e014      	b.n	8000c06 <TikTokGame+0x13a>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000bdc:	4b61      	ldr	r3, [pc, #388]	; (8000d64 <TikTokGame+0x298>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000be2:	4b5e      	ldr	r3, [pc, #376]	; (8000d5c <TikTokGame+0x290>)
 8000be4:	2205      	movs	r2, #5
 8000be6:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000be8:	4b5f      	ldr	r3, [pc, #380]	; (8000d68 <TikTokGame+0x29c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000bee:	4b5a      	ldr	r3, [pc, #360]	; (8000d58 <TikTokGame+0x28c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	221c      	movs	r2, #28
 8000bfa:	495c      	ldr	r1, [pc, #368]	; (8000d6c <TikTokGame+0x2a0>)
 8000bfc:	485c      	ldr	r0, [pc, #368]	; (8000d70 <TikTokGame+0x2a4>)
 8000bfe:	f003 f867 	bl	8003cd0 <HAL_UART_Transmit>
    	                break;
 8000c02:	e000      	b.n	8000c06 <TikTokGame+0x13a>
    	            default: // multi press do nothing
    	                break;
 8000c04:	bf00      	nop
    	        }
    	        break;
 8000c06:	e0d3      	b.n	8000db0 <TikTokGame+0x2e4>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000c08:	4b55      	ldr	r3, [pc, #340]	; (8000d60 <TikTokGame+0x294>)
 8000c0a:	789b      	ldrb	r3, [r3, #2]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	d83a      	bhi.n	8000c88 <TikTokGame+0x1bc>
 8000c12:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <TikTokGame+0x14c>)
 8000c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c18:	08000c61 	.word	0x08000c61
 8000c1c:	08000c89 	.word	0x08000c89
 8000c20:	08000c47 	.word	0x08000c47
 8000c24:	08000c2d 	.word	0x08000c2d
 8000c28:	08000c89 	.word	0x08000c89
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000c2c:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <TikTokGame+0x298>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000c32:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <TikTokGame+0x290>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c38:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <TikTokGame+0x29c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000c3e:	4b46      	ldr	r3, [pc, #280]	; (8000d58 <TikTokGame+0x28c>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
    	                break;
 8000c44:	e021      	b.n	8000c8a <TikTokGame+0x1be>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <TikTokGame+0x298>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000c4c:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <TikTokGame+0x290>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000c52:	4b45      	ldr	r3, [pc, #276]	; (8000d68 <TikTokGame+0x29c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000c58:	4b3f      	ldr	r3, [pc, #252]	; (8000d58 <TikTokGame+0x28c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
    	                break;
 8000c5e:	e014      	b.n	8000c8a <TikTokGame+0x1be>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000c60:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <TikTokGame+0x298>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000c66:	4b3d      	ldr	r3, [pc, #244]	; (8000d5c <TikTokGame+0x290>)
 8000c68:	2205      	movs	r2, #5
 8000c6a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c6c:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <TikTokGame+0x29c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000c72:	4b39      	ldr	r3, [pc, #228]	; (8000d58 <TikTokGame+0x28c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	221c      	movs	r2, #28
 8000c7e:	493b      	ldr	r1, [pc, #236]	; (8000d6c <TikTokGame+0x2a0>)
 8000c80:	483b      	ldr	r0, [pc, #236]	; (8000d70 <TikTokGame+0x2a4>)
 8000c82:	f003 f825 	bl	8003cd0 <HAL_UART_Transmit>
    	                break;
 8000c86:	e000      	b.n	8000c8a <TikTokGame+0x1be>
    	            default: // multi press do nothing
    	                break;
 8000c88:	bf00      	nop
    	        }
    	        break;
 8000c8a:	e091      	b.n	8000db0 <TikTokGame+0x2e4>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <TikTokGame+0x294>)
 8000c8e:	789b      	ldrb	r3, [r3, #2]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d83a      	bhi.n	8000d0c <TikTokGame+0x240>
 8000c96:	a201      	add	r2, pc, #4	; (adr r2, 8000c9c <TikTokGame+0x1d0>)
 8000c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9c:	08000ce5 	.word	0x08000ce5
 8000ca0:	08000d0d 	.word	0x08000d0d
 8000ca4:	08000ccb 	.word	0x08000ccb
 8000ca8:	08000cb1 	.word	0x08000cb1
 8000cac:	08000d0d 	.word	0x08000d0d
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <TikTokGame+0x298>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000cb6:	4b29      	ldr	r3, [pc, #164]	; (8000d5c <TikTokGame+0x290>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <TikTokGame+0x29c>)
 8000cbe:	2202      	movs	r2, #2
 8000cc0:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000cc2:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <TikTokGame+0x28c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
    	                break;
 8000cc8:	e021      	b.n	8000d0e <TikTokGame+0x242>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000cca:	4b26      	ldr	r3, [pc, #152]	; (8000d64 <TikTokGame+0x298>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <TikTokGame+0x290>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000cd6:	4b24      	ldr	r3, [pc, #144]	; (8000d68 <TikTokGame+0x29c>)
 8000cd8:	2202      	movs	r2, #2
 8000cda:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <TikTokGame+0x28c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
    	                break;
 8000ce2:	e014      	b.n	8000d0e <TikTokGame+0x242>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <TikTokGame+0x298>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <TikTokGame+0x290>)
 8000cec:	2205      	movs	r2, #5
 8000cee:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <TikTokGame+0x29c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <TikTokGame+0x28c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	221c      	movs	r2, #28
 8000d02:	491a      	ldr	r1, [pc, #104]	; (8000d6c <TikTokGame+0x2a0>)
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <TikTokGame+0x2a4>)
 8000d06:	f002 ffe3 	bl	8003cd0 <HAL_UART_Transmit>
    	                break;
 8000d0a:	e000      	b.n	8000d0e <TikTokGame+0x242>
    	            default: // multi press do nothing
    	                break;
 8000d0c:	bf00      	nop
    	        }
    	        break;
 8000d0e:	e04f      	b.n	8000db0 <TikTokGame+0x2e4>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <TikTokGame+0x290>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3b01      	subs	r3, #1
 8000d16:	2b03      	cmp	r3, #3
 8000d18:	d840      	bhi.n	8000d9c <TikTokGame+0x2d0>
 8000d1a:	a201      	add	r2, pc, #4	; (adr r2, 8000d20 <TikTokGame+0x254>)
 8000d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d20:	08000d89 	.word	0x08000d89
 8000d24:	08000d75 	.word	0x08000d75
 8000d28:	08000d45 	.word	0x08000d45
 8000d2c:	08000d31 	.word	0x08000d31
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <TikTokGame+0x298>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <TikTokGame+0x290>)
 8000d38:	2203      	movs	r2, #3
 8000d3a:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <TikTokGame+0x29c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
                break;
 8000d42:	e02b      	b.n	8000d9c <TikTokGame+0x2d0>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <TikTokGame+0x298>)
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <TikTokGame+0x290>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <TikTokGame+0x29c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
                break;
 8000d56:	e021      	b.n	8000d9c <TikTokGame+0x2d0>
 8000d58:	200001dc 	.word	0x200001dc
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200001c0 	.word	0x200001c0
 8000d64:	200001e0 	.word	0x200001e0
 8000d68:	200001d8 	.word	0x200001d8
 8000d6c:	08005614 	.word	0x08005614
 8000d70:	2000007c 	.word	0x2000007c
            case 2:
                // statements
                game_pick = 2; // pick2
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <TikTokGame+0x2f0>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <TikTokGame+0x2f4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <TikTokGame+0x2f8>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	601a      	str	r2, [r3, #0]
                break;
 8000d86:	e009      	b.n	8000d9c <TikTokGame+0x2d0>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <TikTokGame+0x2f0>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <TikTokGame+0x2f4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <TikTokGame+0x2f8>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
                break;
 8000d9a:	bf00      	nop
        }
        game_turn = 0;
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <TikTokGame+0x2fc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	221c      	movs	r2, #28
 8000da8:	4908      	ldr	r1, [pc, #32]	; (8000dcc <TikTokGame+0x300>)
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <TikTokGame+0x304>)
 8000dac:	f002 ff90 	bl	8003cd0 <HAL_UART_Transmit>
    }
    HAL_Delay(200);//delay
 8000db0:	20c8      	movs	r0, #200	; 0xc8
 8000db2:	f000 fab3 	bl	800131c <HAL_Delay>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001e0 	.word	0x200001e0
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	200001d8 	.word	0x200001d8
 8000dc8:	200001dc 	.word	0x200001dc
 8000dcc:	08005614 	.word	0x08005614
 8000dd0:	2000007c 	.word	0x2000007c

08000dd4 <LEDdisplay>:

void LEDdisplay() {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	switch (game_winner) {
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <LEDdisplay+0xa8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d028      	beq.n	8000e32 <LEDdisplay+0x5e>
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	dc49      	bgt.n	8000e78 <LEDdisplay+0xa4>
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d046      	beq.n	8000e76 <LEDdisplay+0xa2>
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d000      	beq.n	8000dee <LEDdisplay+0x1a>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\n", strlen("But now what?? Let's play again I know You still fun\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
	            break;
	    }
}
 8000dec:	e044      	b.n	8000e78 <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <LEDdisplay+0xac>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <LEDdisplay+0xb0>)
 8000df6:	2205      	movs	r2, #5
 8000df8:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <LEDdisplay+0xa8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <LEDdisplay+0xb4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI Win!! Humanity Lost!\n", strlen("AI Win!! Humanity Lost!\n"), HAL_MAX_DELAY);
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	2218      	movs	r2, #24
 8000e0c:	491f      	ldr	r1, [pc, #124]	; (8000e8c <LEDdisplay+0xb8>)
 8000e0e:	4820      	ldr	r0, [pc, #128]	; (8000e90 <LEDdisplay+0xbc>)
 8000e10:	f002 ff5e 	bl	8003cd0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Try again we believe in you\n", strlen("Try again we believe in you\n"), HAL_MAX_DELAY);
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	221c      	movs	r2, #28
 8000e1a:	491e      	ldr	r1, [pc, #120]	; (8000e94 <LEDdisplay+0xc0>)
 8000e1c:	481c      	ldr	r0, [pc, #112]	; (8000e90 <LEDdisplay+0xbc>)
 8000e1e:	f002 ff57 	bl	8003cd0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	2228      	movs	r2, #40	; 0x28
 8000e28:	491b      	ldr	r1, [pc, #108]	; (8000e98 <LEDdisplay+0xc4>)
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <LEDdisplay+0xbc>)
 8000e2c:	f002 ff50 	bl	8003cd0 <HAL_UART_Transmit>
	            break;
 8000e30:	e022      	b.n	8000e78 <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <LEDdisplay+0xac>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <LEDdisplay+0xb0>)
 8000e3a:	2205      	movs	r2, #5
 8000e3c:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <LEDdisplay+0xa8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000e44:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <LEDdisplay+0xb4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	221c      	movs	r2, #28
 8000e50:	4912      	ldr	r1, [pc, #72]	; (8000e9c <LEDdisplay+0xc8>)
 8000e52:	480f      	ldr	r0, [pc, #60]	; (8000e90 <LEDdisplay+0xbc>)
 8000e54:	f002 ff3c 	bl	8003cd0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\n", strlen("But now what?? Let's play again I know You still fun\n"), HAL_MAX_DELAY);
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5c:	2235      	movs	r2, #53	; 0x35
 8000e5e:	4910      	ldr	r1, [pc, #64]	; (8000ea0 <LEDdisplay+0xcc>)
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <LEDdisplay+0xbc>)
 8000e62:	f002 ff35 	bl	8003cd0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	2228      	movs	r2, #40	; 0x28
 8000e6c:	490a      	ldr	r1, [pc, #40]	; (8000e98 <LEDdisplay+0xc4>)
 8000e6e:	4808      	ldr	r0, [pc, #32]	; (8000e90 <LEDdisplay+0xbc>)
 8000e70:	f002 ff2e 	bl	8003cd0 <HAL_UART_Transmit>
	            break;
 8000e74:	e000      	b.n	8000e78 <LEDdisplay+0xa4>
	            break;
 8000e76:	bf00      	nop
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200001d8 	.word	0x200001d8
 8000e80:	200001e0 	.word	0x200001e0
 8000e84:	20000000 	.word	0x20000000
 8000e88:	200001dc 	.word	0x200001dc
 8000e8c:	08005634 	.word	0x08005634
 8000e90:	2000007c 	.word	0x2000007c
 8000e94:	08005650 	.word	0x08005650
 8000e98:	08005670 	.word	0x08005670
 8000e9c:	0800569c 	.word	0x0800569c
 8000ea0:	080056bc 	.word	0x080056bc

08000ea4 <CoinLeftUART>:
void CoinLeftUART() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
	 char coin_left_message[30]; // Buffer to store the message
	    sprintf(coin_left_message, "Coin left is %d\r\n", game_left); // Use \r\n for proper newline
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <CoinLeftUART+0x34>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	463b      	mov	r3, r7
 8000eb0:	490a      	ldr	r1, [pc, #40]	; (8000edc <CoinLeftUART+0x38>)
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 fe80 	bl	8004bb8 <siprintf>
	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)coin_left_message, strlen(coin_left_message), HAL_MAX_DELAY);
 8000eb8:	463b      	mov	r3, r7
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f9ba 	bl	8000234 <strlen>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	4639      	mov	r1, r7
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <CoinLeftUART+0x3c>)
 8000ecc:	f002 ff00 	bl	8003cd0 <HAL_UART_Transmit>
}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	080056f4 	.word	0x080056f4
 8000ee0:	2000007c 	.word	0x2000007c

08000ee4 <HAL_SPI_TxRxCpltCallback>:
//	}
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000eec:	2201      	movs	r2, #1
 8000eee:	2104      	movs	r1, #4
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000ef2:	f000 fd45 	bl	8001980 <HAL_GPIO_WritePin>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	48000c00 	.word	0x48000c00

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6613      	str	r3, [r2, #96]	; 0x60
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x44>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f46:	f000 fdfb 	bl	8001b40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09e      	sub	sp, #120	; 0x78
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	2254      	movs	r2, #84	; 0x54
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fe3d 	bl	8004bf8 <memset>
  if(huart->Instance==LPUART1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_UART_MspInit+0xa8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d136      	bne.n	8000ff6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fb11 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fa0:	f7ff ffb0 	bl	8000f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_UART_MspInit+0xac>)
 8000fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <HAL_UART_MspInit+0xac>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_UART_MspInit+0xac>)
 8000fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0xac>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <HAL_UART_MspInit+0xac>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_UART_MspInit+0xac>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fd4:	230c      	movs	r3, #12
 8000fd6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fec:	4619      	mov	r1, r3
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f000 fb2b 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3778      	adds	r7, #120	; 0x78
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40008000 	.word	0x40008000
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
 800101e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <HAL_SPI_MspInit+0x8c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d130      	bne.n	800108c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_SPI_MspInit+0x90>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <HAL_SPI_MspInit+0x90>)
 8001030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_SPI_MspInit+0x90>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_SPI_MspInit+0x90>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <HAL_SPI_MspInit+0x90>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_SPI_MspInit+0x90>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800105a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800106c:	2306      	movs	r3, #6
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <HAL_SPI_MspInit+0x94>)
 8001078:	f000 fae8 	bl	800164c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2033      	movs	r0, #51	; 0x33
 8001082:	f000 fa48 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001086:	2033      	movs	r0, #51	; 0x33
 8001088:	f000 fa5f 	bl	800154a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40003c00 	.word	0x40003c00
 8001098:	40021000 	.word	0x40021000
 800109c:	48000800 	.word	0x48000800

080010a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <HAL_TIM_Base_MspInit+0x38>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d10b      	bne.n	80010ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_TIM_Base_MspInit+0x3c>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_TIM_Base_MspInit+0x3c>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6593      	str	r3, [r2, #88]	; 0x58
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_TIM_Base_MspInit+0x3c>)
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40000400 	.word	0x40000400
 80010dc:	40021000 	.word	0x40021000

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112c:	f000 f8d8 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}

08001134 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001138:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800113c:	f000 fc38 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}

08001144 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <SPI3_IRQHandler+0x10>)
 800114a:	f001 fddf 	bl	8002d0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000110 	.word	0x20000110

08001158 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <_sbrk+0x5c>)
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <_sbrk+0x60>)
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <_sbrk+0x64>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <_sbrk+0x68>)
 8001178:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d207      	bcs.n	8001198 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001188:	f003 fd3e 	bl	8004c08 <__errno>
 800118c:	4603      	mov	r3, r0
 800118e:	220c      	movs	r2, #12
 8001190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	e009      	b.n	80011ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a05      	ldr	r2, [pc, #20]	; (80011bc <_sbrk+0x64>)
 80011a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20020000 	.word	0x20020000
 80011b8:	00000400 	.word	0x00000400
 80011bc:	20000204 	.word	0x20000204
 80011c0:	20000358 	.word	0x20000358

080011c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011e8:	480d      	ldr	r0, [pc, #52]	; (8001220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff ffea 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	; (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <LoopForever+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f003 fcfd 	bl	8004c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff f9e7 	bl	80005ec <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   r0, =_estack
 8001220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800122c:	0800578c 	.word	0x0800578c
  ldr r2, =_sbss
 8001230:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001234:	20000354 	.word	0x20000354

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>

0800123a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f95b 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f80e 	bl	800126c <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	e001      	b.n	8001260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125c:	f7ff fe58 	bl	8000f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001260:	79fb      	ldrb	r3, [r7, #7]

}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_InitTick+0x68>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d022      	beq.n	80012c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <HAL_InitTick+0x6c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_InitTick+0x68>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800128c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f966 	bl	8001566 <HAL_SYSTICK_Config>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10f      	bne.n	80012c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d809      	bhi.n	80012ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a6:	2200      	movs	r2, #0
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295
 80012ae:	f000 f932 	bl	8001516 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_InitTick+0x70>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e007      	b.n	80012ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e004      	b.n	80012ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	20000004 	.word	0x20000004
 80012dc:	20000008 	.word	0x20000008

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_IncTick+0x1c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_IncTick+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x1c>)
 80012f0:	6013      	str	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000208 	.word	0x20000208
 8001300:	2000000c 	.word	0x2000000c

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000208 	.word	0x20000208

0800131c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d004      	beq.n	8001340 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_Delay+0x40>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4413      	add	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001340:	bf00      	nop
 8001342:	f7ff ffdf 	bl	8001304 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	429a      	cmp	r2, r3
 8001350:	d8f7      	bhi.n	8001342 <HAL_Delay+0x26>
  {
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000000c 	.word	0x2000000c

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff29 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff40 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff33 	bl	80013c4 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa4 	bl	80014bc <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d00d      	beq.n	80015b2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2204      	movs	r2, #4
 800159a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e047      	b.n	8001642 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 020e 	bic.w	r2, r2, #14
 80015c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f003 021f 	and.w	r2, r3, #31
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00c      	beq.n	8001622 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001616:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001620:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
    }
  }
  return status;
 8001642:	7bfb      	ldrb	r3, [r7, #15]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800165a:	e15a      	b.n	8001912 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 814c 	beq.w	800190c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b01      	cmp	r3, #1
 800167e:	d005      	beq.n	800168c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001688:	2b02      	cmp	r3, #2
 800168a:	d130      	bne.n	80016ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016c2:	2201      	movs	r2, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 0201 	and.w	r2, r3, #1
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d017      	beq.n	800172a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689a      	ldr	r2, [r3, #8]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d123      	bne.n	800177e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	220f      	movs	r2, #15
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4013      	ands	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	08da      	lsrs	r2, r3, #3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3208      	adds	r2, #8
 8001778:	6939      	ldr	r1, [r7, #16]
 800177a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0203 	and.w	r2, r3, #3
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80a6 	beq.w	800190c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c0:	4b5b      	ldr	r3, [pc, #364]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c4:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6613      	str	r3, [r2, #96]	; 0x60
 80017cc:	4b58      	ldr	r3, [pc, #352]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 80017ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d8:	4a56      	ldr	r2, [pc, #344]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001802:	d01f      	beq.n	8001844 <HAL_GPIO_Init+0x1f8>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d019      	beq.n	8001840 <HAL_GPIO_Init+0x1f4>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a4b      	ldr	r2, [pc, #300]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d013      	beq.n	800183c <HAL_GPIO_Init+0x1f0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a4a      	ldr	r2, [pc, #296]	; (8001940 <HAL_GPIO_Init+0x2f4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d00d      	beq.n	8001838 <HAL_GPIO_Init+0x1ec>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a49      	ldr	r2, [pc, #292]	; (8001944 <HAL_GPIO_Init+0x2f8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d007      	beq.n	8001834 <HAL_GPIO_Init+0x1e8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a48      	ldr	r2, [pc, #288]	; (8001948 <HAL_GPIO_Init+0x2fc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_GPIO_Init+0x1e4>
 800182c:	2305      	movs	r3, #5
 800182e:	e00a      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001830:	2306      	movs	r3, #6
 8001832:	e008      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001834:	2304      	movs	r3, #4
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001838:	2303      	movs	r3, #3
 800183a:	e004      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 800183c:	2302      	movs	r3, #2
 800183e:	e002      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_GPIO_Init+0x1fa>
 8001844:	2300      	movs	r3, #0
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	f002 0203 	and.w	r2, r2, #3
 800184c:	0092      	lsls	r2, r2, #2
 800184e:	4093      	lsls	r3, r2
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001856:	4937      	ldr	r1, [pc, #220]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_GPIO_Init+0x300>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001888:	4a30      	ldr	r2, [pc, #192]	; (800194c <HAL_GPIO_Init+0x300>)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <HAL_GPIO_Init+0x300>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b2:	4a26      	ldr	r2, [pc, #152]	; (800194c <HAL_GPIO_Init+0x300>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018b8:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_GPIO_Init+0x300>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018dc:	4a1b      	ldr	r2, [pc, #108]	; (800194c <HAL_GPIO_Init+0x300>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_GPIO_Init+0x300>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <HAL_GPIO_Init+0x300>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae9d 	bne.w	800165c <HAL_GPIO_Init+0x10>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	48000400 	.word	0x48000400
 800193c:	48000800 	.word	0x48000800
 8001940:	48000c00 	.word	0x48000c00
 8001944:	48001000 	.word	0x48001000
 8001948:	48001400 	.word	0x48001400
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e001      	b.n	8001972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f806 	bl	80019e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d141      	bne.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a06:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a12:	d131      	bne.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a1a:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a2c:	4a41      	ldr	r2, [pc, #260]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2232      	movs	r2, #50	; 0x32
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	4a3f      	ldr	r2, [pc, #252]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4a:	e002      	b.n	8001a52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a52:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5e:	d102      	bne.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f2      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a66:	4b33      	ldr	r3, [pc, #204]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d158      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e057      	b.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a78:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a7e:	4a2d      	ldr	r2, [pc, #180]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a88:	e04d      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a90:	d141      	bne.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9e:	d131      	bne.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aa6:	4a23      	ldr	r2, [pc, #140]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001abe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2232      	movs	r2, #50	; 0x32
 8001ac6:	fb02 f303 	mul.w	r3, r2, r3
 8001aca:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9b      	lsrs	r3, r3, #18
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ad6:	e002      	b.n	8001ade <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aea:	d102      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f2      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001afe:	d112      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e011      	b.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b14:	e007      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40007000 	.word	0x40007000
 8001b38:	20000004 	.word	0x20000004
 8001b3c:	431bde83 	.word	0x431bde83

08001b40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4e:	6093      	str	r3, [r2, #8]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e2fe      	b.n	8002170 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d075      	beq.n	8001c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7e:	4b97      	ldr	r3, [pc, #604]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b88:	4b94      	ldr	r3, [pc, #592]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d102      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3e>
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x44>
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d10b      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	4b8d      	ldr	r3, [pc, #564]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d05b      	beq.n	8001c68 <HAL_RCC_OscConfig+0x108>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d157      	bne.n	8001c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e2d9      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x74>
 8001bc6:	4b85      	ldr	r3, [pc, #532]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a84      	ldr	r2, [pc, #528]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x98>
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a7e      	ldr	r2, [pc, #504]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b7c      	ldr	r3, [pc, #496]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7b      	ldr	r2, [pc, #492]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xb0>
 8001bf8:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a77      	ldr	r2, [pc, #476]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a74      	ldr	r2, [pc, #464]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fb74 	bl	8001304 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fb70 	bl	8001304 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e29e      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xc0>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb60 	bl	8001304 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fb5c 	bl	8001304 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e28a      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0xe8>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d075      	beq.n	8001d62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c76:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c80:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b0c      	cmp	r3, #12
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_OscConfig+0x136>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_OscConfig+0x13c>
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d11f      	bne.n	8001cdc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	4b4f      	ldr	r3, [pc, #316]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x154>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e25d      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b49      	ldr	r3, [pc, #292]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	4946      	ldr	r1, [pc, #280]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HAL_RCC_OscConfig+0x280>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff facd 	bl	800126c <HAL_InitTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d043      	beq.n	8001d60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e249      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d023      	beq.n	8001d2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a3c      	ldr	r2, [pc, #240]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fb08 	bl	8001304 <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fb04 	bl	8001304 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e232      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d0a:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	492d      	ldr	r1, [pc, #180]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
 8001d2a:	e01a      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a2a      	ldr	r2, [pc, #168]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fae4 	bl	8001304 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff fae0 	bl	8001304 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e20e      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e0>
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d041      	beq.n	8001df2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff fabd 	bl	8001304 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fab9 	bl	8001304 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e1e7      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ef      	beq.n	8001d8e <HAL_RCC_OscConfig+0x22e>
 8001dae:	e020      	b.n	8001df2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff faa0 	bl	8001304 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc6:	e00d      	b.n	8001de4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fa9c 	bl	8001304 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d906      	bls.n	8001de4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e1ca      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	4b8c      	ldr	r3, [pc, #560]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ea      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80a6 	beq.w	8001f4c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e04:	4b84      	ldr	r3, [pc, #528]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2b4>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x2b6>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00d      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1e:	4a7e      	ldr	r2, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
 8001e26:	4b7c      	ldr	r3, [pc, #496]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e32:	2301      	movs	r3, #1
 8001e34:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e36:	4b79      	ldr	r3, [pc, #484]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d118      	bne.n	8001e74 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a75      	ldr	r2, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fa59 	bl	8001304 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff fa55 	bl	8001304 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e183      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e68:	4b6c      	ldr	r3, [pc, #432]	; (800201c <HAL_RCC_OscConfig+0x4bc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d108      	bne.n	8001e8e <HAL_RCC_OscConfig+0x32e>
 8001e7c:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	e024      	b.n	8001ed8 <HAL_RCC_OscConfig+0x378>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d110      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x358>
 8001e96:	4b60      	ldr	r3, [pc, #384]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9c:	4a5e      	ldr	r2, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eac:	4a5a      	ldr	r2, [pc, #360]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb6:	e00f      	b.n	8001ed8 <HAL_RCC_OscConfig+0x378>
 8001eb8:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebe:	4a56      	ldr	r2, [pc, #344]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ece:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ed0:	f023 0304 	bic.w	r3, r3, #4
 8001ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d016      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee0:	f7ff fa10 	bl	8001304 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fa0c 	bl	8001304 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e138      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ed      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x388>
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0e:	f7ff f9f9 	bl	8001304 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7ff f9f5 	bl	8001304 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e121      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ed      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f3a:	7ffb      	ldrb	r3, [r7, #31]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	4a34      	ldr	r2, [pc, #208]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d03c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01c      	beq.n	8001f9a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f60:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f66:	4a2c      	ldr	r2, [pc, #176]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f9c8 	bl	8001304 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f78:	f7ff f9c4 	bl	8001304 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e0f2      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ef      	beq.n	8001f78 <HAL_RCC_OscConfig+0x418>
 8001f98:	e01b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7ff f9ab 	bl	8001304 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb2:	f7ff f9a7 	bl	8001304 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0d5      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ef      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80c9 	beq.w	800216e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b0c      	cmp	r3, #12
 8001fe6:	f000 8083 	beq.w	80020f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d15e      	bne.n	80020b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7ff f981 	bl	8001304 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	e00c      	b.n	8002020 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff f97d 	bl	8001304 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d905      	bls.n	8002020 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0ab      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002020:	4b55      	ldr	r3, [pc, #340]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1ec      	bne.n	8002006 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b52      	ldr	r3, [pc, #328]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x61c>)
 8002032:	4013      	ands	r3, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6a11      	ldr	r1, [r2, #32]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800203c:	3a01      	subs	r2, #1
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002046:	0212      	lsls	r2, r2, #8
 8002048:	4311      	orrs	r1, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800204e:	0852      	lsrs	r2, r2, #1
 8002050:	3a01      	subs	r2, #1
 8002052:	0552      	lsls	r2, r2, #21
 8002054:	4311      	orrs	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800205a:	0852      	lsrs	r2, r2, #1
 800205c:	3a01      	subs	r2, #1
 800205e:	0652      	lsls	r2, r2, #25
 8002060:	4311      	orrs	r1, r2
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002066:	06d2      	lsls	r2, r2, #27
 8002068:	430a      	orrs	r2, r1
 800206a:	4943      	ldr	r1, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 800206c:	4313      	orrs	r3, r2
 800206e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002070:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a40      	ldr	r2, [pc, #256]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800207c:	4b3e      	ldr	r3, [pc, #248]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	4a3d      	ldr	r2, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 8002082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002086:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f93c 	bl	8001304 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7ff f938 	bl	8001304 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e066      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	4b35      	ldr	r3, [pc, #212]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0f0      	beq.n	8002090 <HAL_RCC_OscConfig+0x530>
 80020ae:	e05e      	b.n	800216e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f922 	bl	8001304 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f91e 	bl	8001304 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e04c      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	4924      	ldr	r1, [pc, #144]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_RCC_OscConfig+0x620>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60cb      	str	r3, [r1, #12]
 80020ee:	e03e      	b.n	800216e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e039      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCC_OscConfig+0x618>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	429a      	cmp	r2, r3
 800210e:	d12c      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	3b01      	subs	r3, #1
 800211c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d123      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d11b      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d113      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d109      	bne.n	800216a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002160:	085b      	lsrs	r3, r3, #1
 8002162:	3b01      	subs	r3, #1
 8002164:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	019f800c 	.word	0x019f800c
 8002180:	feeefffc 	.word	0xfeeefffc

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e11e      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b91      	ldr	r3, [pc, #580]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d910      	bls.n	80021cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b8e      	ldr	r3, [pc, #568]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f023 020f 	bic.w	r2, r3, #15
 80021b2:	498c      	ldr	r1, [pc, #560]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b8a      	ldr	r3, [pc, #552]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d001      	beq.n	80021cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e106      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d073      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d129      	bne.n	8002234 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e0:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0f4      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021f0:	f000 f99e 	bl	8002530 <RCC_GetSysClockFreqFromPLLSource>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4a7c      	ldr	r2, [pc, #496]	; (80023ec <HAL_RCC_ClockConfig+0x268>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d93f      	bls.n	800227e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021fe:	4b7a      	ldr	r3, [pc, #488]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d009      	beq.n	800221e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002212:	2b00      	cmp	r3, #0
 8002214:	d033      	beq.n	800227e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800221a:	2b00      	cmp	r3, #0
 800221c:	d12f      	bne.n	800227e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002226:	4a70      	ldr	r2, [pc, #448]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800222c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e024      	b.n	800227e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d107      	bne.n	800224c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0c6      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0be      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800225c:	f000 f8ce 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 8002260:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4a61      	ldr	r2, [pc, #388]	; (80023ec <HAL_RCC_ClockConfig+0x268>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d909      	bls.n	800227e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002272:	4a5d      	ldr	r2, [pc, #372]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002278:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4957      	ldr	r1, [pc, #348]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002290:	f7ff f838 	bl	8001304 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7ff f834 	bl	8001304 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e095      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d023      	beq.n	8002314 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a42      	ldr	r2, [pc, #264]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022f8:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80022fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4936      	ldr	r1, [pc, #216]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
 8002312:	e008      	b.n	8002326 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b80      	cmp	r3, #128	; 0x80
 8002318:	d105      	bne.n	8002326 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800231a:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4a32      	ldr	r2, [pc, #200]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 8002320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002324:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d21d      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f023 020f 	bic.w	r2, r3, #15
 800233c:	4929      	ldr	r1, [pc, #164]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002344:	f7fe ffde 	bl	8001304 <HAL_GetTick>
 8002348:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	e00a      	b.n	8002362 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234c:	f7fe ffda 	bl	8001304 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	f241 3288 	movw	r2, #5000	; 0x1388
 800235a:	4293      	cmp	r3, r2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e03b      	b.n	80023da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_ClockConfig+0x260>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d1ed      	bne.n	800234c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4917      	ldr	r1, [pc, #92]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490f      	ldr	r1, [pc, #60]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ae:	f000 f825 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_ClockConfig+0x264>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490c      	ldr	r1, [pc, #48]	; (80023f0 <HAL_RCC_ClockConfig+0x26c>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x270>)
 80023cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe ff4a 	bl	800126c <HAL_InitTick>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	04c4b400 	.word	0x04c4b400
 80023f0:	08005708 	.word	0x08005708
 80023f4:	20000004 	.word	0x20000004
 80023f8:	20000008 	.word	0x20000008

080023fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d102      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800240e:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e047      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002414:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
 800241c:	2b08      	cmp	r3, #8
 800241e:	d102      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e03e      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	2b0c      	cmp	r3, #12
 8002430:	d136      	bne.n	80024a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002432:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2b03      	cmp	r3, #3
 800244e:	d10c      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002450:	4a1a      	ldr	r2, [pc, #104]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245a:	68d2      	ldr	r2, [r2, #12]
 800245c:	0a12      	lsrs	r2, r2, #8
 800245e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002462:	fb02 f303 	mul.w	r3, r2, r3
 8002466:	617b      	str	r3, [r7, #20]
      break;
 8002468:	e00c      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002474:	68d2      	ldr	r2, [r2, #12]
 8002476:	0a12      	lsrs	r2, r2, #8
 8002478:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	617b      	str	r3, [r7, #20]
      break;
 8002482:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0e5b      	lsrs	r3, r3, #25
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	e001      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024a4:	693b      	ldr	r3, [r7, #16]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	00f42400 	.word	0x00f42400
 80024bc:	016e3600 	.word	0x016e3600

080024c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024dc:	f7ff fff0 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4904      	ldr	r1, [pc, #16]	; (8002500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	08005718 	.word	0x08005718

08002504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002508:	f7ff ffda 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0adb      	lsrs	r3, r3, #11
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4904      	ldr	r1, [pc, #16]	; (800252c <HAL_RCC_GetPCLK2Freq+0x28>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002524:	4618      	mov	r0, r3
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	08005718 	.word	0x08005718

08002530 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3301      	adds	r3, #1
 800254c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d10c      	bne.n	800256e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002554:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	fbb2 f3f3 	udiv	r3, r2, r3
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800255e:	68d2      	ldr	r2, [r2, #12]
 8002560:	0a12      	lsrs	r2, r2, #8
 8002562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
    break;
 800256c:	e00c      	b.n	8002588 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4a0e      	ldr	r2, [pc, #56]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002578:	68d2      	ldr	r2, [r2, #12]
 800257a:	0a12      	lsrs	r2, r2, #8
 800257c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002580:	fb02 f303 	mul.w	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
    break;
 8002586:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	0e5b      	lsrs	r3, r3, #25
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025a2:	687b      	ldr	r3, [r7, #4]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40021000 	.word	0x40021000
 80025b4:	016e3600 	.word	0x016e3600
 80025b8:	00f42400 	.word	0x00f42400

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c4:	2300      	movs	r3, #0
 80025c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8098 	beq.w	800270a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ee:	4a3f      	ldr	r2, [pc, #252]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	6593      	str	r3, [r2, #88]	; 0x58
 80025f6:	4b3d      	ldr	r3, [pc, #244]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002606:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a39      	ldr	r2, [pc, #228]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002612:	f7fe fe77 	bl	8001304 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002618:	e009      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261a:	f7fe fe73 	bl	8001304 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d902      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	74fb      	strb	r3, [r7, #19]
        break;
 800262c:	e005      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ef      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800263a:	7cfb      	ldrb	r3, [r7, #19]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d159      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01e      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	429a      	cmp	r2, r3
 800265a:	d019      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002688:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269a:	f7fe fe33 	bl	8001304 <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026a0:	e00b      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fe2f 	bl	8001304 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d902      	bls.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	74fb      	strb	r3, [r7, #19]
            break;
 80026b8:	e006      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ec      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026dc:	4903      	ldr	r1, [pc, #12]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026e4:	e008      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
 80026ea:	e005      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f8:	7c7b      	ldrb	r3, [r7, #17]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d105      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fe:	4ba7      	ldr	r3, [pc, #668]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002702:	4aa6      	ldr	r2, [pc, #664]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002716:	4ba1      	ldr	r3, [pc, #644]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f023 0203 	bic.w	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	499d      	ldr	r1, [pc, #628]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002738:	4b98      	ldr	r3, [pc, #608]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f023 020c 	bic.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	4995      	ldr	r1, [pc, #596]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800275a:	4b90      	ldr	r3, [pc, #576]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	498c      	ldr	r1, [pc, #560]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800277c:	4b87      	ldr	r3, [pc, #540]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	4984      	ldr	r1, [pc, #528]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800279e:	4b7f      	ldr	r3, [pc, #508]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	497b      	ldr	r1, [pc, #492]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027c0:	4b76      	ldr	r3, [pc, #472]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	4973      	ldr	r1, [pc, #460]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e2:	4b6e      	ldr	r3, [pc, #440]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	496a      	ldr	r1, [pc, #424]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00a      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002804:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4962      	ldr	r1, [pc, #392]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002826:	4b5d      	ldr	r3, [pc, #372]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	4959      	ldr	r1, [pc, #356]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00a      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002848:	4b54      	ldr	r3, [pc, #336]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	4951      	ldr	r1, [pc, #324]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800286a:	4b4c      	ldr	r3, [pc, #304]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002870:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	4948      	ldr	r1, [pc, #288]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800288c:	4b43      	ldr	r3, [pc, #268]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4940      	ldr	r1, [pc, #256]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	4932      	ldr	r1, [pc, #200]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e2:	d105      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b2d      	ldr	r3, [pc, #180]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a2c      	ldr	r2, [pc, #176]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	4924      	ldr	r1, [pc, #144]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291a:	d105      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002926:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800295e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d019      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800298a:	d109      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b03      	ldr	r3, [pc, #12]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a02      	ldr	r2, [pc, #8]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	e002      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4926      	ldr	r1, [pc, #152]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ca:	d105      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029cc:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d015      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	4918      	ldr	r1, [pc, #96]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a02:	d105      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a04:	4b13      	ldr	r3, [pc, #76]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d015      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a48:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40021000 	.word	0x40021000

08002a58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e09d      	b.n	8002ba6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a7a:	d009      	beq.n	8002a90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
 8002a82:	e005      	b.n	8002a90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7fe faac 	bl	8001008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ad0:	d902      	bls.n	8002ad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	e002      	b.n	8002ade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002adc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ae6:	d007      	beq.n	8002af8 <HAL_SPI_Init+0xa0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002af0:	d002      	beq.n	8002af8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	ea42 0103 	orr.w	r1, r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	0c1b      	lsrs	r3, r3, #16
 8002b54:	f003 0204 	and.w	r2, r3, #4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b74:	ea42 0103 	orr.w	r1, r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bc8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bd0:	7dbb      	ldrb	r3, [r7, #22]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_SPI_TransmitReceive_IT+0x42>
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bdc:	d106      	bne.n	8002bec <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d102      	bne.n	8002bec <HAL_SPI_TransmitReceive_IT+0x3c>
 8002be6:	7dbb      	ldrb	r3, [r7, #22]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d002      	beq.n	8002bf2 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
 8002bee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bf0:	e07d      	b.n	8002cee <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_SPI_TransmitReceive_IT+0x54>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_SPI_TransmitReceive_IT+0x54>
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c08:	e071      	b.n	8002cee <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_SPI_TransmitReceive_IT+0x68>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e06b      	b.n	8002cf0 <HAL_SPI_TransmitReceive_IT+0x140>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d003      	beq.n	8002c34 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2205      	movs	r2, #5
 8002c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	887a      	ldrh	r2, [r7, #2]
 8002c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	887a      	ldrh	r2, [r7, #2]
 8002c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	887a      	ldrh	r2, [r7, #2]
 8002c5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c6a:	d906      	bls.n	8002c7a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002c70:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a22      	ldr	r2, [pc, #136]	; (8002d00 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002c76:	651a      	str	r2, [r3, #80]	; 0x50
 8002c78:	e005      	b.n	8002c86 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002c7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a21      	ldr	r2, [pc, #132]	; (8002d08 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002c84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c8e:	d802      	bhi.n	8002c96 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d908      	bls.n	8002ca8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	e007      	b.n	8002cb8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cb6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b40      	cmp	r3, #64	; 0x40
 8002cc4:	d007      	beq.n	8002cd6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002cec:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	371c      	adds	r7, #28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	08003097 	.word	0x08003097
 8002d00:	080030fd 	.word	0x080030fd
 8002d04:	08002f47 	.word	0x08002f47
 8002d08:	08003005 	.word	0x08003005

08002d0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10e      	bne.n	8002d4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
    return;
 8002d4a:	e0ce      	b.n	8002eea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d009      	beq.n	8002d6a <HAL_SPI_IRQHandler+0x5e>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
    return;
 8002d68:	e0bf      	b.n	8002eea <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <HAL_SPI_IRQHandler+0x7e>
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80b0 	beq.w	8002eea <HAL_SPI_IRQHandler+0x1de>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0320 	and.w	r3, r3, #32
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80aa 	beq.w	8002eea <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d023      	beq.n	8002de8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d011      	beq.n	8002dd0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002db0:	f043 0204 	orr.w	r2, r3, #4
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	e00b      	b.n	8002de8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
        return;
 8002de6:	e080      	b.n	8002eea <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d014      	beq.n	8002e1c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df6:	f043 0201 	orr.w	r2, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00c      	beq.n	8002e40 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2a:	f043 0208 	orr.w	r2, r3, #8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d04f      	beq.n	8002ee8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e56:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d104      	bne.n	8002e74 <HAL_SPI_IRQHandler+0x168>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d034      	beq.n	8002ede <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0203 	bic.w	r2, r2, #3
 8002e82:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d011      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_SPI_IRQHandler+0x1e4>)
 8002e92:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fe fb70 	bl	800157e <HAL_DMA_Abort_IT>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d016      	beq.n	8002ee6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <HAL_SPI_IRQHandler+0x1e4>)
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fb5a 	bl	800157e <HAL_DMA_Abort_IT>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002edc:	e003      	b.n	8002ee6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f812 	bl	8002f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ee4:	e000      	b.n	8002ee8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002ee6:	bf00      	nop
    return;
 8002ee8:	bf00      	nop
  }
}
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	08002f1d 	.word	0x08002f1d

08002ef4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f7ff ffe5 	bl	8002f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b082      	sub	sp, #8
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d923      	bls.n	8002fa2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b02      	subs	r3, #2
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d11f      	bne.n	8002fd0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e016      	b.n	8002fd0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f103 020c 	add.w	r2, r3, #12
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10f      	bne.n	8002ffc <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa14 	bl	8003424 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b01      	cmp	r3, #1
 8003014:	d912      	bls.n	800303c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	1c9a      	adds	r2, r3, #2
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b02      	subs	r3, #2
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	87da      	strh	r2, [r3, #62]	; 0x3e
 800303a:	e012      	b.n	8003062 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d110      	bne.n	800308e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800307a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f9cb 	bl	8003424 <SPI_CloseRxTx_ISR>
    }
  }
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	b292      	uxth	r2, r2
 80030aa:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	1c9a      	adds	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10f      	bne.n	80030f4 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f998 	bl	8003424 <SPI_CloseRxTx_ISR>
    }
  }
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	881a      	ldrh	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	1c9a      	adds	r2, r3, #2
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d110      	bne.n	8003154 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003140:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d102      	bne.n	8003154 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f968 	bl	8003424 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800316c:	f7fe f8ca 	bl	8001304 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4413      	add	r3, r2
 800317a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800317c:	f7fe f8c2 	bl	8001304 <HAL_GetTick>
 8003180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	015b      	lsls	r3, r3, #5
 8003188:	0d1b      	lsrs	r3, r3, #20
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	fb02 f303 	mul.w	r3, r2, r3
 8003190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003192:	e054      	b.n	800323e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d050      	beq.n	800323e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800319c:	f7fe f8b2 	bl	8001304 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d902      	bls.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d13d      	bne.n	800322e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ca:	d111      	bne.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d4:	d004      	beq.n	80031e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031de:	d107      	bne.n	80031f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f8:	d10f      	bne.n	800321a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e017      	b.n	800325e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3b01      	subs	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4013      	ands	r3, r2
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	bf0c      	ite	eq
 800324e:	2301      	moveq	r3, #1
 8003250:	2300      	movne	r3, #0
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	429a      	cmp	r2, r3
 800325a:	d19b      	bne.n	8003194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000004 	.word	0x20000004

0800326c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	; 0x28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800327e:	f7fe f841 	bl	8001304 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	4413      	add	r3, r2
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800328e:	f7fe f839 	bl	8001304 <HAL_GetTick>
 8003292:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800329c:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00da      	lsls	r2, r3, #3
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	0d1b      	lsrs	r3, r3, #20
 80032ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80032b4:	e060      	b.n	8003378 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032bc:	d107      	bne.n	80032ce <SPI_WaitFifoStateUntilTimeout+0x62>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d104      	bne.n	80032ce <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d050      	beq.n	8003378 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032d6:	f7fe f815 	bl	8001304 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d902      	bls.n	80032ec <SPI_WaitFifoStateUntilTimeout+0x80>
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d13d      	bne.n	8003368 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003304:	d111      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330e:	d004      	beq.n	800331a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003318:	d107      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003328:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003332:	d10f      	bne.n	8003354 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003352:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e010      	b.n	800338a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3b01      	subs	r3, #1
 8003376:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	429a      	cmp	r2, r3
 8003386:	d196      	bne.n	80032b6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000004 	.word	0x20000004

08003398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f7ff ff5b 	bl	800326c <SPI_WaitFifoStateUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d007      	beq.n	80033cc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c0:	f043 0220 	orr.w	r2, r3, #32
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e027      	b.n	800341c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2180      	movs	r1, #128	; 0x80
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fec0 	bl	800315c <SPI_WaitFlagStateUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e014      	b.n	800341c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f7ff ff34 	bl	800326c <SPI_WaitFifoStateUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d007      	beq.n	800341a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340e:	f043 0220 	orr.w	r2, r3, #32
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e000      	b.n	800341c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800342c:	f7fd ff6a 	bl	8001304 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0220 	bic.w	r2, r2, #32
 8003440:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	2164      	movs	r1, #100	; 0x64
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7ff ffa6 	bl	8003398 <SPI_EndRxTxTransaction>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	2b00      	cmp	r3, #0
 8003464:	d115      	bne.n	8003492 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fd3a 	bl	8002ef4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003480:	e00e      	b.n	80034a0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fd2a 	bl	8000ee4 <HAL_SPI_TxRxCpltCallback>
}
 8003490:	e006      	b.n	80034a0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7ff fd34 	bl	8002f08 <HAL_SPI_ErrorCallback>
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e049      	b.n	800354e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fde6 	bl	80010a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 f9bc 	bl	8003864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04c      	b.n	800360a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_TIM_Base_Start+0xc0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d022      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d01d      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a22      	ldr	r2, [pc, #136]	; (800361c <HAL_TIM_Base_Start+0xc4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d018      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a21      	ldr	r2, [pc, #132]	; (8003620 <HAL_TIM_Base_Start+0xc8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <HAL_TIM_Base_Start+0xcc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1e      	ldr	r2, [pc, #120]	; (8003628 <HAL_TIM_Base_Start+0xd0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d009      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1c      	ldr	r2, [pc, #112]	; (800362c <HAL_TIM_Base_Start+0xd4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <HAL_TIM_Base_Start+0xd8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d115      	bne.n	80035f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <HAL_TIM_Base_Start+0xdc>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d015      	beq.n	8003606 <HAL_TIM_Base_Start+0xae>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d011      	beq.n	8003606 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f2:	e008      	b.n	8003606 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e000      	b.n	8003608 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003606:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40013400 	.word	0x40013400
 800362c:	40014000 	.word	0x40014000
 8003630:	40015000 	.word	0x40015000
 8003634:	00010007 	.word	0x00010007

08003638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_TIM_ConfigClockSource+0x1c>
 8003650:	2302      	movs	r3, #2
 8003652:	e0f6      	b.n	8003842 <HAL_TIM_ConfigClockSource+0x20a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800367e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a6f      	ldr	r2, [pc, #444]	; (800384c <HAL_TIM_ConfigClockSource+0x214>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f000 80c1 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 8003694:	4a6d      	ldr	r2, [pc, #436]	; (800384c <HAL_TIM_ConfigClockSource+0x214>)
 8003696:	4293      	cmp	r3, r2
 8003698:	f200 80c6 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 800369c:	4a6c      	ldr	r2, [pc, #432]	; (8003850 <HAL_TIM_ConfigClockSource+0x218>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	f000 80b9 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 80036a4:	4a6a      	ldr	r2, [pc, #424]	; (8003850 <HAL_TIM_ConfigClockSource+0x218>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	f200 80be 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 80036ac:	4a69      	ldr	r2, [pc, #420]	; (8003854 <HAL_TIM_ConfigClockSource+0x21c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	f000 80b1 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 80036b4:	4a67      	ldr	r2, [pc, #412]	; (8003854 <HAL_TIM_ConfigClockSource+0x21c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	f200 80b6 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 80036bc:	4a66      	ldr	r2, [pc, #408]	; (8003858 <HAL_TIM_ConfigClockSource+0x220>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	f000 80a9 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 80036c4:	4a64      	ldr	r2, [pc, #400]	; (8003858 <HAL_TIM_ConfigClockSource+0x220>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	f200 80ae 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 80036cc:	4a63      	ldr	r2, [pc, #396]	; (800385c <HAL_TIM_ConfigClockSource+0x224>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f000 80a1 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 80036d4:	4a61      	ldr	r2, [pc, #388]	; (800385c <HAL_TIM_ConfigClockSource+0x224>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f200 80a6 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 80036dc:	4a60      	ldr	r2, [pc, #384]	; (8003860 <HAL_TIM_ConfigClockSource+0x228>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f000 8099 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 80036e4:	4a5e      	ldr	r2, [pc, #376]	; (8003860 <HAL_TIM_ConfigClockSource+0x228>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	f200 809e 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 80036ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036f0:	f000 8091 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 80036f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80036f8:	f200 8096 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 80036fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003700:	f000 8089 	beq.w	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 8003704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003708:	f200 808e 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 800370c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003710:	d03e      	beq.n	8003790 <HAL_TIM_ConfigClockSource+0x158>
 8003712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003716:	f200 8087 	bhi.w	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371e:	f000 8086 	beq.w	800382e <HAL_TIM_ConfigClockSource+0x1f6>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	d87f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 8003728:	2b70      	cmp	r3, #112	; 0x70
 800372a:	d01a      	beq.n	8003762 <HAL_TIM_ConfigClockSource+0x12a>
 800372c:	2b70      	cmp	r3, #112	; 0x70
 800372e:	d87b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 8003730:	2b60      	cmp	r3, #96	; 0x60
 8003732:	d050      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x19e>
 8003734:	2b60      	cmp	r3, #96	; 0x60
 8003736:	d877      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 8003738:	2b50      	cmp	r3, #80	; 0x50
 800373a:	d03c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x17e>
 800373c:	2b50      	cmp	r3, #80	; 0x50
 800373e:	d873      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d058      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0x1be>
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	d86f      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 8003748:	2b30      	cmp	r3, #48	; 0x30
 800374a:	d064      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 800374c:	2b30      	cmp	r3, #48	; 0x30
 800374e:	d86b      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 8003750:	2b20      	cmp	r3, #32
 8003752:	d060      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 8003754:	2b20      	cmp	r3, #32
 8003756:	d867      	bhi.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05c      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 800375c:	2b10      	cmp	r3, #16
 800375e:	d05a      	beq.n	8003816 <HAL_TIM_ConfigClockSource+0x1de>
 8003760:	e062      	b.n	8003828 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003772:	f000 f9a7 	bl	8003ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	609a      	str	r2, [r3, #8]
      break;
 800378e:	e04f      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	f000 f990 	bl	8003ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b2:	609a      	str	r2, [r3, #8]
      break;
 80037b4:	e03c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	461a      	mov	r2, r3
 80037c4:	f000 f902 	bl	80039cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2150      	movs	r1, #80	; 0x50
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f95b 	bl	8003a8a <TIM_ITRx_SetConfig>
      break;
 80037d4:	e02c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e2:	461a      	mov	r2, r3
 80037e4:	f000 f921 	bl	8003a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2160      	movs	r1, #96	; 0x60
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f94b 	bl	8003a8a <TIM_ITRx_SetConfig>
      break;
 80037f4:	e01c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003802:	461a      	mov	r2, r3
 8003804:	f000 f8e2 	bl	80039cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2140      	movs	r1, #64	; 0x40
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f93b 	bl	8003a8a <TIM_ITRx_SetConfig>
      break;
 8003814:	e00c      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f000 f932 	bl	8003a8a <TIM_ITRx_SetConfig>
      break;
 8003826:	e003      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
      break;
 800382c:	e000      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800382e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	00100070 	.word	0x00100070
 8003850:	00100060 	.word	0x00100060
 8003854:	00100050 	.word	0x00100050
 8003858:	00100040 	.word	0x00100040
 800385c:	00100030 	.word	0x00100030
 8003860:	00100020 	.word	0x00100020

08003864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a4c      	ldr	r2, [pc, #304]	; (80039a8 <TIM_Base_SetConfig+0x144>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d017      	beq.n	80038ac <TIM_Base_SetConfig+0x48>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d013      	beq.n	80038ac <TIM_Base_SetConfig+0x48>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a49      	ldr	r2, [pc, #292]	; (80039ac <TIM_Base_SetConfig+0x148>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00f      	beq.n	80038ac <TIM_Base_SetConfig+0x48>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a48      	ldr	r2, [pc, #288]	; (80039b0 <TIM_Base_SetConfig+0x14c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00b      	beq.n	80038ac <TIM_Base_SetConfig+0x48>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a47      	ldr	r2, [pc, #284]	; (80039b4 <TIM_Base_SetConfig+0x150>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d007      	beq.n	80038ac <TIM_Base_SetConfig+0x48>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a46      	ldr	r2, [pc, #280]	; (80039b8 <TIM_Base_SetConfig+0x154>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0x48>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a45      	ldr	r2, [pc, #276]	; (80039bc <TIM_Base_SetConfig+0x158>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d108      	bne.n	80038be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a39      	ldr	r2, [pc, #228]	; (80039a8 <TIM_Base_SetConfig+0x144>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d023      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038cc:	d01f      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a36      	ldr	r2, [pc, #216]	; (80039ac <TIM_Base_SetConfig+0x148>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01b      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a35      	ldr	r2, [pc, #212]	; (80039b0 <TIM_Base_SetConfig+0x14c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d017      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a34      	ldr	r2, [pc, #208]	; (80039b4 <TIM_Base_SetConfig+0x150>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a33      	ldr	r2, [pc, #204]	; (80039b8 <TIM_Base_SetConfig+0x154>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00f      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a33      	ldr	r2, [pc, #204]	; (80039c0 <TIM_Base_SetConfig+0x15c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00b      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a32      	ldr	r2, [pc, #200]	; (80039c4 <TIM_Base_SetConfig+0x160>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d007      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a31      	ldr	r2, [pc, #196]	; (80039c8 <TIM_Base_SetConfig+0x164>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_Base_SetConfig+0xaa>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <TIM_Base_SetConfig+0x158>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <TIM_Base_SetConfig+0x144>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_Base_SetConfig+0x110>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <TIM_Base_SetConfig+0x154>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0x110>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <TIM_Base_SetConfig+0x15c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0x110>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <TIM_Base_SetConfig+0x160>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0x110>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <TIM_Base_SetConfig+0x164>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x110>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a13      	ldr	r2, [pc, #76]	; (80039bc <TIM_Base_SetConfig+0x158>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d103      	bne.n	800397c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d105      	bne.n	800399a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]
  }
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40013400 	.word	0x40013400
 80039bc:	40015000 	.word	0x40015000
 80039c0:	40014000 	.word	0x40014000
 80039c4:	40014400 	.word	0x40014400
 80039c8:	40014800 	.word	0x40014800

080039cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	f023 0201 	bic.w	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 030a 	bic.w	r3, r3, #10
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b087      	sub	sp, #28
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f023 0210 	bic.w	r2, r3, #16
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	031b      	lsls	r3, r3, #12
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f043 0307 	orr.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	021a      	lsls	r2, r3, #8
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e074      	b.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a34      	ldr	r2, [pc, #208]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a33      	ldr	r2, [pc, #204]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a31      	ldr	r2, [pc, #196]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d108      	bne.n	8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a21      	ldr	r2, [pc, #132]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d022      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9c:	d01d      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d018      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d013      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1c      	ldr	r2, [pc, #112]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00e      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d009      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d004      	beq.n	8003bda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a11      	ldr	r2, [pc, #68]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40013400 	.word	0x40013400
 8003c1c:	40015000 	.word	0x40015000
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40014000 	.word	0x40014000

08003c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e042      	b.n	8003cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd f97f 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2224      	movs	r2, #36	; 0x24
 8003c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 fc7a 	bl	8004574 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f97b 	bl	8003f7c <UART_SetConfig>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d101      	bne.n	8003c90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e01b      	b.n	8003cc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fcf9 	bl	80046b8 <UART_CheckIdleState>
 8003cc6:	4603      	mov	r3, r0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d17b      	bne.n	8003de2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <HAL_UART_Transmit+0x26>
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e074      	b.n	8003de4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2221      	movs	r2, #33	; 0x21
 8003d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0a:	f7fd fafb 	bl	8001304 <HAL_GetTick>
 8003d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d108      	bne.n	8003d3c <HAL_UART_Transmit+0x6c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d104      	bne.n	8003d3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	e003      	b.n	8003d44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d44:	e030      	b.n	8003da8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 fd5b 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e03d      	b.n	8003de4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	3302      	adds	r3, #2
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e007      	b.n	8003d96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	3301      	adds	r3, #1
 8003d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1c8      	bne.n	8003d46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2140      	movs	r1, #64	; 0x40
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fd24 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e006      	b.n	8003de4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e000      	b.n	8003de4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
  }
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 80b5 	bne.w	8003f72 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Receive+0x28>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0ad      	b.n	8003f74 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2222      	movs	r2, #34	; 0x22
 8003e24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2e:	f7fd fa69 	bl	8001304 <HAL_GetTick>
 8003e32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	88fa      	ldrh	r2, [r7, #6]
 8003e40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d10e      	bne.n	8003e6c <HAL_UART_Receive+0x80>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d105      	bne.n	8003e62 <HAL_UART_Receive+0x76>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e60:	e02d      	b.n	8003ebe <HAL_UART_Receive+0xd2>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e6a:	e028      	b.n	8003ebe <HAL_UART_Receive+0xd2>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_UART_Receive+0xa4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_UART_Receive+0x9a>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	22ff      	movs	r2, #255	; 0xff
 8003e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e84:	e01b      	b.n	8003ebe <HAL_UART_Receive+0xd2>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	227f      	movs	r2, #127	; 0x7f
 8003e8a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e8e:	e016      	b.n	8003ebe <HAL_UART_Receive+0xd2>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e98:	d10d      	bne.n	8003eb6 <HAL_UART_Receive+0xca>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <HAL_UART_Receive+0xc0>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	227f      	movs	r2, #127	; 0x7f
 8003ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eaa:	e008      	b.n	8003ebe <HAL_UART_Receive+0xd2>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	223f      	movs	r2, #63	; 0x3f
 8003eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eb4:	e003      	b.n	8003ebe <HAL_UART_Receive+0xd2>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003ec4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ece:	d108      	bne.n	8003ee2 <HAL_UART_Receive+0xf6>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d104      	bne.n	8003ee2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e003      	b.n	8003eea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003eea:	e036      	b.n	8003f5a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2120      	movs	r1, #32
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fc88 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e032      	b.n	8003f74 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10c      	bne.n	8003f2e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	8a7b      	ldrh	r3, [r7, #18]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	3302      	adds	r3, #2
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e00c      	b.n	8003f48 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	8a7b      	ldrh	r3, [r7, #18]
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3301      	adds	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1c2      	bne.n	8003eec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f80:	b08c      	sub	sp, #48	; 0x30
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	431a      	orrs	r2, r3
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4baa      	ldr	r3, [pc, #680]	; (8004254 <UART_SetConfig+0x2d8>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a9f      	ldr	r2, [pc, #636]	; (8004258 <UART_SetConfig+0x2dc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ff2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	6812      	ldr	r2, [r2, #0]
 8003ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	f023 010f 	bic.w	r1, r3, #15
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a90      	ldr	r2, [pc, #576]	; (800425c <UART_SetConfig+0x2e0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d125      	bne.n	800406c <UART_SetConfig+0xf0>
 8004020:	4b8f      	ldr	r3, [pc, #572]	; (8004260 <UART_SetConfig+0x2e4>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b03      	cmp	r3, #3
 800402c:	d81a      	bhi.n	8004064 <UART_SetConfig+0xe8>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0xb8>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004045 	.word	0x08004045
 8004038:	08004055 	.word	0x08004055
 800403c:	0800404d 	.word	0x0800404d
 8004040:	0800405d 	.word	0x0800405d
 8004044:	2301      	movs	r3, #1
 8004046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404a:	e116      	b.n	800427a <UART_SetConfig+0x2fe>
 800404c:	2302      	movs	r3, #2
 800404e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004052:	e112      	b.n	800427a <UART_SetConfig+0x2fe>
 8004054:	2304      	movs	r3, #4
 8004056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405a:	e10e      	b.n	800427a <UART_SetConfig+0x2fe>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004062:	e10a      	b.n	800427a <UART_SetConfig+0x2fe>
 8004064:	2310      	movs	r3, #16
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406a:	e106      	b.n	800427a <UART_SetConfig+0x2fe>
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7c      	ldr	r2, [pc, #496]	; (8004264 <UART_SetConfig+0x2e8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d138      	bne.n	80040e8 <UART_SetConfig+0x16c>
 8004076:	4b7a      	ldr	r3, [pc, #488]	; (8004260 <UART_SetConfig+0x2e4>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b0c      	cmp	r3, #12
 8004082:	d82d      	bhi.n	80040e0 <UART_SetConfig+0x164>
 8004084:	a201      	add	r2, pc, #4	; (adr r2, 800408c <UART_SetConfig+0x110>)
 8004086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408a:	bf00      	nop
 800408c:	080040c1 	.word	0x080040c1
 8004090:	080040e1 	.word	0x080040e1
 8004094:	080040e1 	.word	0x080040e1
 8004098:	080040e1 	.word	0x080040e1
 800409c:	080040d1 	.word	0x080040d1
 80040a0:	080040e1 	.word	0x080040e1
 80040a4:	080040e1 	.word	0x080040e1
 80040a8:	080040e1 	.word	0x080040e1
 80040ac:	080040c9 	.word	0x080040c9
 80040b0:	080040e1 	.word	0x080040e1
 80040b4:	080040e1 	.word	0x080040e1
 80040b8:	080040e1 	.word	0x080040e1
 80040bc:	080040d9 	.word	0x080040d9
 80040c0:	2300      	movs	r3, #0
 80040c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c6:	e0d8      	b.n	800427a <UART_SetConfig+0x2fe>
 80040c8:	2302      	movs	r3, #2
 80040ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ce:	e0d4      	b.n	800427a <UART_SetConfig+0x2fe>
 80040d0:	2304      	movs	r3, #4
 80040d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d6:	e0d0      	b.n	800427a <UART_SetConfig+0x2fe>
 80040d8:	2308      	movs	r3, #8
 80040da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040de:	e0cc      	b.n	800427a <UART_SetConfig+0x2fe>
 80040e0:	2310      	movs	r3, #16
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e6:	e0c8      	b.n	800427a <UART_SetConfig+0x2fe>
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5e      	ldr	r2, [pc, #376]	; (8004268 <UART_SetConfig+0x2ec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d125      	bne.n	800413e <UART_SetConfig+0x1c2>
 80040f2:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <UART_SetConfig+0x2e4>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040fc:	2b30      	cmp	r3, #48	; 0x30
 80040fe:	d016      	beq.n	800412e <UART_SetConfig+0x1b2>
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d818      	bhi.n	8004136 <UART_SetConfig+0x1ba>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d00a      	beq.n	800411e <UART_SetConfig+0x1a2>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d814      	bhi.n	8004136 <UART_SetConfig+0x1ba>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <UART_SetConfig+0x19a>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d008      	beq.n	8004126 <UART_SetConfig+0x1aa>
 8004114:	e00f      	b.n	8004136 <UART_SetConfig+0x1ba>
 8004116:	2300      	movs	r3, #0
 8004118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411c:	e0ad      	b.n	800427a <UART_SetConfig+0x2fe>
 800411e:	2302      	movs	r3, #2
 8004120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004124:	e0a9      	b.n	800427a <UART_SetConfig+0x2fe>
 8004126:	2304      	movs	r3, #4
 8004128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412c:	e0a5      	b.n	800427a <UART_SetConfig+0x2fe>
 800412e:	2308      	movs	r3, #8
 8004130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004134:	e0a1      	b.n	800427a <UART_SetConfig+0x2fe>
 8004136:	2310      	movs	r3, #16
 8004138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413c:	e09d      	b.n	800427a <UART_SetConfig+0x2fe>
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a4a      	ldr	r2, [pc, #296]	; (800426c <UART_SetConfig+0x2f0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d125      	bne.n	8004194 <UART_SetConfig+0x218>
 8004148:	4b45      	ldr	r3, [pc, #276]	; (8004260 <UART_SetConfig+0x2e4>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004152:	2bc0      	cmp	r3, #192	; 0xc0
 8004154:	d016      	beq.n	8004184 <UART_SetConfig+0x208>
 8004156:	2bc0      	cmp	r3, #192	; 0xc0
 8004158:	d818      	bhi.n	800418c <UART_SetConfig+0x210>
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d00a      	beq.n	8004174 <UART_SetConfig+0x1f8>
 800415e:	2b80      	cmp	r3, #128	; 0x80
 8004160:	d814      	bhi.n	800418c <UART_SetConfig+0x210>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <UART_SetConfig+0x1f0>
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d008      	beq.n	800417c <UART_SetConfig+0x200>
 800416a:	e00f      	b.n	800418c <UART_SetConfig+0x210>
 800416c:	2300      	movs	r3, #0
 800416e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004172:	e082      	b.n	800427a <UART_SetConfig+0x2fe>
 8004174:	2302      	movs	r3, #2
 8004176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417a:	e07e      	b.n	800427a <UART_SetConfig+0x2fe>
 800417c:	2304      	movs	r3, #4
 800417e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004182:	e07a      	b.n	800427a <UART_SetConfig+0x2fe>
 8004184:	2308      	movs	r3, #8
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418a:	e076      	b.n	800427a <UART_SetConfig+0x2fe>
 800418c:	2310      	movs	r3, #16
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004192:	e072      	b.n	800427a <UART_SetConfig+0x2fe>
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a35      	ldr	r2, [pc, #212]	; (8004270 <UART_SetConfig+0x2f4>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d12a      	bne.n	80041f4 <UART_SetConfig+0x278>
 800419e:	4b30      	ldr	r3, [pc, #192]	; (8004260 <UART_SetConfig+0x2e4>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ac:	d01a      	beq.n	80041e4 <UART_SetConfig+0x268>
 80041ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b2:	d81b      	bhi.n	80041ec <UART_SetConfig+0x270>
 80041b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b8:	d00c      	beq.n	80041d4 <UART_SetConfig+0x258>
 80041ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041be:	d815      	bhi.n	80041ec <UART_SetConfig+0x270>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <UART_SetConfig+0x250>
 80041c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c8:	d008      	beq.n	80041dc <UART_SetConfig+0x260>
 80041ca:	e00f      	b.n	80041ec <UART_SetConfig+0x270>
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041d2:	e052      	b.n	800427a <UART_SetConfig+0x2fe>
 80041d4:	2302      	movs	r3, #2
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041da:	e04e      	b.n	800427a <UART_SetConfig+0x2fe>
 80041dc:	2304      	movs	r3, #4
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041e2:	e04a      	b.n	800427a <UART_SetConfig+0x2fe>
 80041e4:	2308      	movs	r3, #8
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ea:	e046      	b.n	800427a <UART_SetConfig+0x2fe>
 80041ec:	2310      	movs	r3, #16
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f2:	e042      	b.n	800427a <UART_SetConfig+0x2fe>
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a17      	ldr	r2, [pc, #92]	; (8004258 <UART_SetConfig+0x2dc>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d13a      	bne.n	8004274 <UART_SetConfig+0x2f8>
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <UART_SetConfig+0x2e4>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800420c:	d01a      	beq.n	8004244 <UART_SetConfig+0x2c8>
 800420e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004212:	d81b      	bhi.n	800424c <UART_SetConfig+0x2d0>
 8004214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004218:	d00c      	beq.n	8004234 <UART_SetConfig+0x2b8>
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421e:	d815      	bhi.n	800424c <UART_SetConfig+0x2d0>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <UART_SetConfig+0x2b0>
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d008      	beq.n	800423c <UART_SetConfig+0x2c0>
 800422a:	e00f      	b.n	800424c <UART_SetConfig+0x2d0>
 800422c:	2300      	movs	r3, #0
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004232:	e022      	b.n	800427a <UART_SetConfig+0x2fe>
 8004234:	2302      	movs	r3, #2
 8004236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800423a:	e01e      	b.n	800427a <UART_SetConfig+0x2fe>
 800423c:	2304      	movs	r3, #4
 800423e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004242:	e01a      	b.n	800427a <UART_SetConfig+0x2fe>
 8004244:	2308      	movs	r3, #8
 8004246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800424a:	e016      	b.n	800427a <UART_SetConfig+0x2fe>
 800424c:	2310      	movs	r3, #16
 800424e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004252:	e012      	b.n	800427a <UART_SetConfig+0x2fe>
 8004254:	cfff69f3 	.word	0xcfff69f3
 8004258:	40008000 	.word	0x40008000
 800425c:	40013800 	.word	0x40013800
 8004260:	40021000 	.word	0x40021000
 8004264:	40004400 	.word	0x40004400
 8004268:	40004800 	.word	0x40004800
 800426c:	40004c00 	.word	0x40004c00
 8004270:	40005000 	.word	0x40005000
 8004274:	2310      	movs	r3, #16
 8004276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4aae      	ldr	r2, [pc, #696]	; (8004538 <UART_SetConfig+0x5bc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	f040 8097 	bne.w	80043b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800428a:	2b08      	cmp	r3, #8
 800428c:	d823      	bhi.n	80042d6 <UART_SetConfig+0x35a>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <UART_SetConfig+0x318>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042d7 	.word	0x080042d7
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042d7 	.word	0x080042d7
 80042a4:	080042c7 	.word	0x080042c7
 80042a8:	080042d7 	.word	0x080042d7
 80042ac:	080042d7 	.word	0x080042d7
 80042b0:	080042d7 	.word	0x080042d7
 80042b4:	080042cf 	.word	0x080042cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042b8:	f7fe f90e 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80042bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042be:	e010      	b.n	80042e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042c0:	4b9e      	ldr	r3, [pc, #632]	; (800453c <UART_SetConfig+0x5c0>)
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042c4:	e00d      	b.n	80042e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042c6:	f7fe f899 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042cc:	e009      	b.n	80042e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042d4:	e005      	b.n	80042e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8130 	beq.w	800454a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	4a94      	ldr	r2, [pc, #592]	; (8004540 <UART_SetConfig+0x5c4>)
 80042f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	429a      	cmp	r2, r3
 800430c:	d305      	bcc.n	800431a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	429a      	cmp	r2, r3
 8004318:	d903      	bls.n	8004322 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004320:	e113      	b.n	800454a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	2200      	movs	r2, #0
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	60fa      	str	r2, [r7, #12]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	4a84      	ldr	r2, [pc, #528]	; (8004540 <UART_SetConfig+0x5c4>)
 8004330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004334:	b29b      	uxth	r3, r3
 8004336:	2200      	movs	r2, #0
 8004338:	603b      	str	r3, [r7, #0]
 800433a:	607a      	str	r2, [r7, #4]
 800433c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004340:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004344:	f7fb ffd4 	bl	80002f0 <__aeabi_uldivmod>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	020b      	lsls	r3, r1, #8
 800435a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800435e:	0202      	lsls	r2, r0, #8
 8004360:	6979      	ldr	r1, [r7, #20]
 8004362:	6849      	ldr	r1, [r1, #4]
 8004364:	0849      	lsrs	r1, r1, #1
 8004366:	2000      	movs	r0, #0
 8004368:	460c      	mov	r4, r1
 800436a:	4605      	mov	r5, r0
 800436c:	eb12 0804 	adds.w	r8, r2, r4
 8004370:	eb43 0905 	adc.w	r9, r3, r5
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	469a      	mov	sl, r3
 800437c:	4693      	mov	fp, r2
 800437e:	4652      	mov	r2, sl
 8004380:	465b      	mov	r3, fp
 8004382:	4640      	mov	r0, r8
 8004384:	4649      	mov	r1, r9
 8004386:	f7fb ffb3 	bl	80002f0 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4613      	mov	r3, r2
 8004390:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004398:	d308      	bcc.n	80043ac <UART_SetConfig+0x430>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043a0:	d204      	bcs.n	80043ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	e0ce      	b.n	800454a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043b2:	e0ca      	b.n	800454a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043bc:	d166      	bne.n	800448c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80043be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d827      	bhi.n	8004416 <UART_SetConfig+0x49a>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x450>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	080043f9 	.word	0x080043f9
 80043d4:	08004401 	.word	0x08004401
 80043d8:	08004417 	.word	0x08004417
 80043dc:	08004407 	.word	0x08004407
 80043e0:	08004417 	.word	0x08004417
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800440f 	.word	0x0800440f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7fe f872 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80043f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043f6:	e014      	b.n	8004422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe f884 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 80043fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043fe:	e010      	b.n	8004422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004400:	4b4e      	ldr	r3, [pc, #312]	; (800453c <UART_SetConfig+0x5c0>)
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004404:	e00d      	b.n	8004422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fd fff9 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 800440a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800440c:	e009      	b.n	8004422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004414:	e005      	b.n	8004422 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8090 	beq.w	800454a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	4a44      	ldr	r2, [pc, #272]	; (8004540 <UART_SetConfig+0x5c4>)
 8004430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004434:	461a      	mov	r2, r3
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	fbb3 f3f2 	udiv	r3, r3, r2
 800443c:	005a      	lsls	r2, r3, #1
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	441a      	add	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b0f      	cmp	r3, #15
 8004454:	d916      	bls.n	8004484 <UART_SetConfig+0x508>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d212      	bcs.n	8004484 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	b29b      	uxth	r3, r3
 8004462:	f023 030f 	bic.w	r3, r3, #15
 8004466:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	085b      	lsrs	r3, r3, #1
 800446c:	b29b      	uxth	r3, r3
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	b29a      	uxth	r2, r3
 8004474:	8bfb      	ldrh	r3, [r7, #30]
 8004476:	4313      	orrs	r3, r2
 8004478:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	8bfa      	ldrh	r2, [r7, #30]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	e062      	b.n	800454a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800448a:	e05e      	b.n	800454a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800448c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004490:	2b08      	cmp	r3, #8
 8004492:	d828      	bhi.n	80044e6 <UART_SetConfig+0x56a>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0x520>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044c9 	.word	0x080044c9
 80044a4:	080044d1 	.word	0x080044d1
 80044a8:	080044e7 	.word	0x080044e7
 80044ac:	080044d7 	.word	0x080044d7
 80044b0:	080044e7 	.word	0x080044e7
 80044b4:	080044e7 	.word	0x080044e7
 80044b8:	080044e7 	.word	0x080044e7
 80044bc:	080044df 	.word	0x080044df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c0:	f7fe f80a 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 80044c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044c6:	e014      	b.n	80044f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c8:	f7fe f81c 	bl	8002504 <HAL_RCC_GetPCLK2Freq>
 80044cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044ce:	e010      	b.n	80044f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <UART_SetConfig+0x5c0>)
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044d4:	e00d      	b.n	80044f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d6:	f7fd ff91 	bl	80023fc <HAL_RCC_GetSysClockFreq>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044dc:	e009      	b.n	80044f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044e4:	e005      	b.n	80044f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044f0:	bf00      	nop
    }

    if (pclk != 0U)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d028      	beq.n	800454a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	4a10      	ldr	r2, [pc, #64]	; (8004540 <UART_SetConfig+0x5c4>)
 80044fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004502:	461a      	mov	r2, r3
 8004504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004506:	fbb3 f2f2 	udiv	r2, r3, r2
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	441a      	add	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	d910      	bls.n	8004544 <UART_SetConfig+0x5c8>
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d20c      	bcs.n	8004544 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	b29a      	uxth	r2, r3
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	e009      	b.n	800454a <UART_SetConfig+0x5ce>
 8004536:	bf00      	nop
 8004538:	40008000 	.word	0x40008000
 800453c:	00f42400 	.word	0x00f42400
 8004540:	08005720 	.word	0x08005720
      }
      else
      {
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2201      	movs	r2, #1
 800454e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2201      	movs	r2, #1
 8004556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	2200      	movs	r2, #0
 800455e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2200      	movs	r2, #0
 8004564:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004566:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800456a:	4618      	mov	r0, r3
 800456c:	3730      	adds	r7, #48	; 0x30
 800456e:	46bd      	mov	sp, r7
 8004570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00a      	beq.n	800459e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00a      	beq.n	80045e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	f003 0304 	and.w	r3, r3, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00a      	beq.n	8004604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00a      	beq.n	8004626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00a      	beq.n	8004648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01a      	beq.n	800468a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004672:	d10a      	bne.n	800468a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b098      	sub	sp, #96	; 0x60
 80046bc:	af02      	add	r7, sp, #8
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046c8:	f7fc fe1c 	bl	8001304 <HAL_GetTick>
 80046cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d12f      	bne.n	800473c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e4:	2200      	movs	r2, #0
 80046e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f88e 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d022      	beq.n	800473c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470a:	653b      	str	r3, [r7, #80]	; 0x50
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
 8004716:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800471a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e6      	bne.n	80046f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e063      	b.n	8004804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b04      	cmp	r3, #4
 8004748:	d149      	bne.n	80047de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800474a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004752:	2200      	movs	r2, #0
 8004754:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f857 	bl	800480c <UART_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d03c      	beq.n	80047de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	623b      	str	r3, [r7, #32]
   return(result);
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004778:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004782:	633b      	str	r3, [r7, #48]	; 0x30
 8004784:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e6      	bne.n	8004764 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3308      	adds	r3, #8
 800479c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3308      	adds	r3, #8
 80047b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b6:	61fa      	str	r2, [r7, #28]
 80047b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	617b      	str	r3, [r7, #20]
   return(result);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e5      	bne.n	8004796 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e012      	b.n	8004804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3758      	adds	r7, #88	; 0x58
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800481c:	e04f      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d04b      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fc fd6d 	bl	8001304 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <UART_WaitOnFlagUntilTimeout+0x30>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e04e      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d037      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b80      	cmp	r3, #128	; 0x80
 8004852:	d034      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d031      	beq.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b08      	cmp	r3, #8
 8004866:	d110      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2208      	movs	r2, #8
 800486e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f838 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2208      	movs	r2, #8
 800487a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e029      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004898:	d111      	bne.n	80048be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f000 f81e 	bl	80048e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e00f      	b.n	80048de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d0a0      	beq.n	800481e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b095      	sub	sp, #84	; 0x54
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490c:	643b      	str	r3, [r7, #64]	; 0x40
 800490e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004914:	e841 2300 	strex	r3, r2, [r1]
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1e6      	bne.n	80048ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3308      	adds	r3, #8
 8004926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004936:	f023 0301 	bic.w	r3, r3, #1
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3308      	adds	r3, #8
 8004942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e3      	bne.n	8004920 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d118      	bne.n	8004992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	60bb      	str	r3, [r7, #8]
   return(result);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f023 0310 	bic.w	r3, r3, #16
 8004974:	647b      	str	r3, [r7, #68]	; 0x44
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e6      	bne.n	8004960 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2220      	movs	r2, #32
 8004996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80049a6:	bf00      	nop
 80049a8:	3754      	adds	r7, #84	; 0x54
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e027      	b.n	8004a18 <HAL_UARTEx_DisableFifoMode+0x66>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2224      	movs	r2, #36	; 0x24
 80049d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e02d      	b.n	8004a98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2224      	movs	r2, #36	; 0x24
 8004a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0201 	bic.w	r2, r2, #1
 8004a62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f84f 	bl	8004b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e02d      	b.n	8004b14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	; 0x24
 8004ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f811 	bl	8004b1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d108      	bne.n	8004b3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b3c:	e031      	b.n	8004ba2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b3e:	2308      	movs	r3, #8
 8004b40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b42:	2308      	movs	r3, #8
 8004b44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	0e5b      	lsrs	r3, r3, #25
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	0f5b      	lsrs	r3, r3, #29
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b66:	7bbb      	ldrb	r3, [r7, #14]
 8004b68:	7b3a      	ldrb	r2, [r7, #12]
 8004b6a:	4911      	ldr	r1, [pc, #68]	; (8004bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004b6c:	5c8a      	ldrb	r2, [r1, r2]
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b72:	7b3a      	ldrb	r2, [r7, #12]
 8004b74:	490f      	ldr	r1, [pc, #60]	; (8004bb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004b76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b78:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	7b7a      	ldrb	r2, [r7, #13]
 8004b88:	4909      	ldr	r1, [pc, #36]	; (8004bb0 <UARTEx_SetNbDataToProcess+0x94>)
 8004b8a:	5c8a      	ldrb	r2, [r1, r2]
 8004b8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b90:	7b7a      	ldrb	r2, [r7, #13]
 8004b92:	4908      	ldr	r1, [pc, #32]	; (8004bb4 <UARTEx_SetNbDataToProcess+0x98>)
 8004b94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b96:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	08005738 	.word	0x08005738
 8004bb4:	08005740 	.word	0x08005740

08004bb8 <siprintf>:
 8004bb8:	b40e      	push	{r1, r2, r3}
 8004bba:	b500      	push	{lr}
 8004bbc:	b09c      	sub	sp, #112	; 0x70
 8004bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc0:	9002      	str	r0, [sp, #8]
 8004bc2:	9006      	str	r0, [sp, #24]
 8004bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bc8:	4809      	ldr	r0, [pc, #36]	; (8004bf0 <siprintf+0x38>)
 8004bca:	9107      	str	r1, [sp, #28]
 8004bcc:	9104      	str	r1, [sp, #16]
 8004bce:	4909      	ldr	r1, [pc, #36]	; (8004bf4 <siprintf+0x3c>)
 8004bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd4:	9105      	str	r1, [sp, #20]
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	a902      	add	r1, sp, #8
 8004bdc:	f000 f992 	bl	8004f04 <_svfiprintf_r>
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	b01c      	add	sp, #112	; 0x70
 8004be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bec:	b003      	add	sp, #12
 8004bee:	4770      	bx	lr
 8004bf0:	2000005c 	.word	0x2000005c
 8004bf4:	ffff0208 	.word	0xffff0208

08004bf8 <memset>:
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <__errno>:
 8004c08:	4b01      	ldr	r3, [pc, #4]	; (8004c10 <__errno+0x8>)
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	2000005c 	.word	0x2000005c

08004c14 <__libc_init_array>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	4d0d      	ldr	r5, [pc, #52]	; (8004c4c <__libc_init_array+0x38>)
 8004c18:	4c0d      	ldr	r4, [pc, #52]	; (8004c50 <__libc_init_array+0x3c>)
 8004c1a:	1b64      	subs	r4, r4, r5
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	2600      	movs	r6, #0
 8004c20:	42a6      	cmp	r6, r4
 8004c22:	d109      	bne.n	8004c38 <__libc_init_array+0x24>
 8004c24:	4d0b      	ldr	r5, [pc, #44]	; (8004c54 <__libc_init_array+0x40>)
 8004c26:	4c0c      	ldr	r4, [pc, #48]	; (8004c58 <__libc_init_array+0x44>)
 8004c28:	f000 fc6a 	bl	8005500 <_init>
 8004c2c:	1b64      	subs	r4, r4, r5
 8004c2e:	10a4      	asrs	r4, r4, #2
 8004c30:	2600      	movs	r6, #0
 8004c32:	42a6      	cmp	r6, r4
 8004c34:	d105      	bne.n	8004c42 <__libc_init_array+0x2e>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3c:	4798      	blx	r3
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7ee      	b.n	8004c20 <__libc_init_array+0xc>
 8004c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c46:	4798      	blx	r3
 8004c48:	3601      	adds	r6, #1
 8004c4a:	e7f2      	b.n	8004c32 <__libc_init_array+0x1e>
 8004c4c:	08005784 	.word	0x08005784
 8004c50:	08005784 	.word	0x08005784
 8004c54:	08005784 	.word	0x08005784
 8004c58:	08005788 	.word	0x08005788

08004c5c <__retarget_lock_acquire_recursive>:
 8004c5c:	4770      	bx	lr

08004c5e <__retarget_lock_release_recursive>:
 8004c5e:	4770      	bx	lr

08004c60 <_free_r>:
 8004c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c62:	2900      	cmp	r1, #0
 8004c64:	d044      	beq.n	8004cf0 <_free_r+0x90>
 8004c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c6a:	9001      	str	r0, [sp, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004c72:	bfb8      	it	lt
 8004c74:	18e4      	addlt	r4, r4, r3
 8004c76:	f000 f8df 	bl	8004e38 <__malloc_lock>
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <_free_r+0x94>)
 8004c7c:	9801      	ldr	r0, [sp, #4]
 8004c7e:	6813      	ldr	r3, [r2, #0]
 8004c80:	b933      	cbnz	r3, 8004c90 <_free_r+0x30>
 8004c82:	6063      	str	r3, [r4, #4]
 8004c84:	6014      	str	r4, [r2, #0]
 8004c86:	b003      	add	sp, #12
 8004c88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c8c:	f000 b8da 	b.w	8004e44 <__malloc_unlock>
 8004c90:	42a3      	cmp	r3, r4
 8004c92:	d908      	bls.n	8004ca6 <_free_r+0x46>
 8004c94:	6825      	ldr	r5, [r4, #0]
 8004c96:	1961      	adds	r1, r4, r5
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	bf01      	itttt	eq
 8004c9c:	6819      	ldreq	r1, [r3, #0]
 8004c9e:	685b      	ldreq	r3, [r3, #4]
 8004ca0:	1949      	addeq	r1, r1, r5
 8004ca2:	6021      	streq	r1, [r4, #0]
 8004ca4:	e7ed      	b.n	8004c82 <_free_r+0x22>
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	b10b      	cbz	r3, 8004cb0 <_free_r+0x50>
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	d9fa      	bls.n	8004ca6 <_free_r+0x46>
 8004cb0:	6811      	ldr	r1, [r2, #0]
 8004cb2:	1855      	adds	r5, r2, r1
 8004cb4:	42a5      	cmp	r5, r4
 8004cb6:	d10b      	bne.n	8004cd0 <_free_r+0x70>
 8004cb8:	6824      	ldr	r4, [r4, #0]
 8004cba:	4421      	add	r1, r4
 8004cbc:	1854      	adds	r4, r2, r1
 8004cbe:	42a3      	cmp	r3, r4
 8004cc0:	6011      	str	r1, [r2, #0]
 8004cc2:	d1e0      	bne.n	8004c86 <_free_r+0x26>
 8004cc4:	681c      	ldr	r4, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	6053      	str	r3, [r2, #4]
 8004cca:	440c      	add	r4, r1
 8004ccc:	6014      	str	r4, [r2, #0]
 8004cce:	e7da      	b.n	8004c86 <_free_r+0x26>
 8004cd0:	d902      	bls.n	8004cd8 <_free_r+0x78>
 8004cd2:	230c      	movs	r3, #12
 8004cd4:	6003      	str	r3, [r0, #0]
 8004cd6:	e7d6      	b.n	8004c86 <_free_r+0x26>
 8004cd8:	6825      	ldr	r5, [r4, #0]
 8004cda:	1961      	adds	r1, r4, r5
 8004cdc:	428b      	cmp	r3, r1
 8004cde:	bf04      	itt	eq
 8004ce0:	6819      	ldreq	r1, [r3, #0]
 8004ce2:	685b      	ldreq	r3, [r3, #4]
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	bf04      	itt	eq
 8004ce8:	1949      	addeq	r1, r1, r5
 8004cea:	6021      	streq	r1, [r4, #0]
 8004cec:	6054      	str	r4, [r2, #4]
 8004cee:	e7ca      	b.n	8004c86 <_free_r+0x26>
 8004cf0:	b003      	add	sp, #12
 8004cf2:	bd30      	pop	{r4, r5, pc}
 8004cf4:	2000034c 	.word	0x2000034c

08004cf8 <sbrk_aligned>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4e0e      	ldr	r6, [pc, #56]	; (8004d34 <sbrk_aligned+0x3c>)
 8004cfc:	460c      	mov	r4, r1
 8004cfe:	6831      	ldr	r1, [r6, #0]
 8004d00:	4605      	mov	r5, r0
 8004d02:	b911      	cbnz	r1, 8004d0a <sbrk_aligned+0x12>
 8004d04:	f000 fba6 	bl	8005454 <_sbrk_r>
 8004d08:	6030      	str	r0, [r6, #0]
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	f000 fba1 	bl	8005454 <_sbrk_r>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	d00a      	beq.n	8004d2c <sbrk_aligned+0x34>
 8004d16:	1cc4      	adds	r4, r0, #3
 8004d18:	f024 0403 	bic.w	r4, r4, #3
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d007      	beq.n	8004d30 <sbrk_aligned+0x38>
 8004d20:	1a21      	subs	r1, r4, r0
 8004d22:	4628      	mov	r0, r5
 8004d24:	f000 fb96 	bl	8005454 <_sbrk_r>
 8004d28:	3001      	adds	r0, #1
 8004d2a:	d101      	bne.n	8004d30 <sbrk_aligned+0x38>
 8004d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d30:	4620      	mov	r0, r4
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	20000350 	.word	0x20000350

08004d38 <_malloc_r>:
 8004d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d3c:	1ccd      	adds	r5, r1, #3
 8004d3e:	f025 0503 	bic.w	r5, r5, #3
 8004d42:	3508      	adds	r5, #8
 8004d44:	2d0c      	cmp	r5, #12
 8004d46:	bf38      	it	cc
 8004d48:	250c      	movcc	r5, #12
 8004d4a:	2d00      	cmp	r5, #0
 8004d4c:	4607      	mov	r7, r0
 8004d4e:	db01      	blt.n	8004d54 <_malloc_r+0x1c>
 8004d50:	42a9      	cmp	r1, r5
 8004d52:	d905      	bls.n	8004d60 <_malloc_r+0x28>
 8004d54:	230c      	movs	r3, #12
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	2600      	movs	r6, #0
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e34 <_malloc_r+0xfc>
 8004d64:	f000 f868 	bl	8004e38 <__malloc_lock>
 8004d68:	f8d8 3000 	ldr.w	r3, [r8]
 8004d6c:	461c      	mov	r4, r3
 8004d6e:	bb5c      	cbnz	r4, 8004dc8 <_malloc_r+0x90>
 8004d70:	4629      	mov	r1, r5
 8004d72:	4638      	mov	r0, r7
 8004d74:	f7ff ffc0 	bl	8004cf8 <sbrk_aligned>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	d155      	bne.n	8004e2a <_malloc_r+0xf2>
 8004d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8004d82:	4626      	mov	r6, r4
 8004d84:	2e00      	cmp	r6, #0
 8004d86:	d145      	bne.n	8004e14 <_malloc_r+0xdc>
 8004d88:	2c00      	cmp	r4, #0
 8004d8a:	d048      	beq.n	8004e1e <_malloc_r+0xe6>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4638      	mov	r0, r7
 8004d92:	eb04 0903 	add.w	r9, r4, r3
 8004d96:	f000 fb5d 	bl	8005454 <_sbrk_r>
 8004d9a:	4581      	cmp	r9, r0
 8004d9c:	d13f      	bne.n	8004e1e <_malloc_r+0xe6>
 8004d9e:	6821      	ldr	r1, [r4, #0]
 8004da0:	1a6d      	subs	r5, r5, r1
 8004da2:	4629      	mov	r1, r5
 8004da4:	4638      	mov	r0, r7
 8004da6:	f7ff ffa7 	bl	8004cf8 <sbrk_aligned>
 8004daa:	3001      	adds	r0, #1
 8004dac:	d037      	beq.n	8004e1e <_malloc_r+0xe6>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	442b      	add	r3, r5
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	f8d8 3000 	ldr.w	r3, [r8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d038      	beq.n	8004e2e <_malloc_r+0xf6>
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	42a2      	cmp	r2, r4
 8004dc0:	d12b      	bne.n	8004e1a <_malloc_r+0xe2>
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	605a      	str	r2, [r3, #4]
 8004dc6:	e00f      	b.n	8004de8 <_malloc_r+0xb0>
 8004dc8:	6822      	ldr	r2, [r4, #0]
 8004dca:	1b52      	subs	r2, r2, r5
 8004dcc:	d41f      	bmi.n	8004e0e <_malloc_r+0xd6>
 8004dce:	2a0b      	cmp	r2, #11
 8004dd0:	d917      	bls.n	8004e02 <_malloc_r+0xca>
 8004dd2:	1961      	adds	r1, r4, r5
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	6025      	str	r5, [r4, #0]
 8004dd8:	bf18      	it	ne
 8004dda:	6059      	strne	r1, [r3, #4]
 8004ddc:	6863      	ldr	r3, [r4, #4]
 8004dde:	bf08      	it	eq
 8004de0:	f8c8 1000 	streq.w	r1, [r8]
 8004de4:	5162      	str	r2, [r4, r5]
 8004de6:	604b      	str	r3, [r1, #4]
 8004de8:	4638      	mov	r0, r7
 8004dea:	f104 060b 	add.w	r6, r4, #11
 8004dee:	f000 f829 	bl	8004e44 <__malloc_unlock>
 8004df2:	f026 0607 	bic.w	r6, r6, #7
 8004df6:	1d23      	adds	r3, r4, #4
 8004df8:	1af2      	subs	r2, r6, r3
 8004dfa:	d0ae      	beq.n	8004d5a <_malloc_r+0x22>
 8004dfc:	1b9b      	subs	r3, r3, r6
 8004dfe:	50a3      	str	r3, [r4, r2]
 8004e00:	e7ab      	b.n	8004d5a <_malloc_r+0x22>
 8004e02:	42a3      	cmp	r3, r4
 8004e04:	6862      	ldr	r2, [r4, #4]
 8004e06:	d1dd      	bne.n	8004dc4 <_malloc_r+0x8c>
 8004e08:	f8c8 2000 	str.w	r2, [r8]
 8004e0c:	e7ec      	b.n	8004de8 <_malloc_r+0xb0>
 8004e0e:	4623      	mov	r3, r4
 8004e10:	6864      	ldr	r4, [r4, #4]
 8004e12:	e7ac      	b.n	8004d6e <_malloc_r+0x36>
 8004e14:	4634      	mov	r4, r6
 8004e16:	6876      	ldr	r6, [r6, #4]
 8004e18:	e7b4      	b.n	8004d84 <_malloc_r+0x4c>
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	e7cc      	b.n	8004db8 <_malloc_r+0x80>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	4638      	mov	r0, r7
 8004e24:	f000 f80e 	bl	8004e44 <__malloc_unlock>
 8004e28:	e797      	b.n	8004d5a <_malloc_r+0x22>
 8004e2a:	6025      	str	r5, [r4, #0]
 8004e2c:	e7dc      	b.n	8004de8 <_malloc_r+0xb0>
 8004e2e:	605b      	str	r3, [r3, #4]
 8004e30:	deff      	udf	#255	; 0xff
 8004e32:	bf00      	nop
 8004e34:	2000034c 	.word	0x2000034c

08004e38 <__malloc_lock>:
 8004e38:	4801      	ldr	r0, [pc, #4]	; (8004e40 <__malloc_lock+0x8>)
 8004e3a:	f7ff bf0f 	b.w	8004c5c <__retarget_lock_acquire_recursive>
 8004e3e:	bf00      	nop
 8004e40:	20000348 	.word	0x20000348

08004e44 <__malloc_unlock>:
 8004e44:	4801      	ldr	r0, [pc, #4]	; (8004e4c <__malloc_unlock+0x8>)
 8004e46:	f7ff bf0a 	b.w	8004c5e <__retarget_lock_release_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	20000348 	.word	0x20000348

08004e50 <__ssputs_r>:
 8004e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	688e      	ldr	r6, [r1, #8]
 8004e56:	461f      	mov	r7, r3
 8004e58:	42be      	cmp	r6, r7
 8004e5a:	680b      	ldr	r3, [r1, #0]
 8004e5c:	4682      	mov	sl, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	4690      	mov	r8, r2
 8004e62:	d82c      	bhi.n	8004ebe <__ssputs_r+0x6e>
 8004e64:	898a      	ldrh	r2, [r1, #12]
 8004e66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e6a:	d026      	beq.n	8004eba <__ssputs_r+0x6a>
 8004e6c:	6965      	ldr	r5, [r4, #20]
 8004e6e:	6909      	ldr	r1, [r1, #16]
 8004e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e74:	eba3 0901 	sub.w	r9, r3, r1
 8004e78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e7c:	1c7b      	adds	r3, r7, #1
 8004e7e:	444b      	add	r3, r9
 8004e80:	106d      	asrs	r5, r5, #1
 8004e82:	429d      	cmp	r5, r3
 8004e84:	bf38      	it	cc
 8004e86:	461d      	movcc	r5, r3
 8004e88:	0553      	lsls	r3, r2, #21
 8004e8a:	d527      	bpl.n	8004edc <__ssputs_r+0x8c>
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	f7ff ff53 	bl	8004d38 <_malloc_r>
 8004e92:	4606      	mov	r6, r0
 8004e94:	b360      	cbz	r0, 8004ef0 <__ssputs_r+0xa0>
 8004e96:	6921      	ldr	r1, [r4, #16]
 8004e98:	464a      	mov	r2, r9
 8004e9a:	f000 faeb 	bl	8005474 <memcpy>
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	6126      	str	r6, [r4, #16]
 8004eac:	6165      	str	r5, [r4, #20]
 8004eae:	444e      	add	r6, r9
 8004eb0:	eba5 0509 	sub.w	r5, r5, r9
 8004eb4:	6026      	str	r6, [r4, #0]
 8004eb6:	60a5      	str	r5, [r4, #8]
 8004eb8:	463e      	mov	r6, r7
 8004eba:	42be      	cmp	r6, r7
 8004ebc:	d900      	bls.n	8004ec0 <__ssputs_r+0x70>
 8004ebe:	463e      	mov	r6, r7
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	4632      	mov	r2, r6
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	f000 faab 	bl	8005420 <memmove>
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	1b9b      	subs	r3, r3, r6
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	4433      	add	r3, r6
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004edc:	462a      	mov	r2, r5
 8004ede:	f000 fad7 	bl	8005490 <_realloc_r>
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	d1e0      	bne.n	8004eaa <__ssputs_r+0x5a>
 8004ee8:	6921      	ldr	r1, [r4, #16]
 8004eea:	4650      	mov	r0, sl
 8004eec:	f7ff feb8 	bl	8004c60 <_free_r>
 8004ef0:	230c      	movs	r3, #12
 8004ef2:	f8ca 3000 	str.w	r3, [sl]
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efc:	81a3      	strh	r3, [r4, #12]
 8004efe:	f04f 30ff 	mov.w	r0, #4294967295
 8004f02:	e7e9      	b.n	8004ed8 <__ssputs_r+0x88>

08004f04 <_svfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	4698      	mov	r8, r3
 8004f0a:	898b      	ldrh	r3, [r1, #12]
 8004f0c:	061b      	lsls	r3, r3, #24
 8004f0e:	b09d      	sub	sp, #116	; 0x74
 8004f10:	4607      	mov	r7, r0
 8004f12:	460d      	mov	r5, r1
 8004f14:	4614      	mov	r4, r2
 8004f16:	d50e      	bpl.n	8004f36 <_svfiprintf_r+0x32>
 8004f18:	690b      	ldr	r3, [r1, #16]
 8004f1a:	b963      	cbnz	r3, 8004f36 <_svfiprintf_r+0x32>
 8004f1c:	2140      	movs	r1, #64	; 0x40
 8004f1e:	f7ff ff0b 	bl	8004d38 <_malloc_r>
 8004f22:	6028      	str	r0, [r5, #0]
 8004f24:	6128      	str	r0, [r5, #16]
 8004f26:	b920      	cbnz	r0, 8004f32 <_svfiprintf_r+0x2e>
 8004f28:	230c      	movs	r3, #12
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f30:	e0d0      	b.n	80050d4 <_svfiprintf_r+0x1d0>
 8004f32:	2340      	movs	r3, #64	; 0x40
 8004f34:	616b      	str	r3, [r5, #20]
 8004f36:	2300      	movs	r3, #0
 8004f38:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3a:	2320      	movs	r3, #32
 8004f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f44:	2330      	movs	r3, #48	; 0x30
 8004f46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80050ec <_svfiprintf_r+0x1e8>
 8004f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f4e:	f04f 0901 	mov.w	r9, #1
 8004f52:	4623      	mov	r3, r4
 8004f54:	469a      	mov	sl, r3
 8004f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f5a:	b10a      	cbz	r2, 8004f60 <_svfiprintf_r+0x5c>
 8004f5c:	2a25      	cmp	r2, #37	; 0x25
 8004f5e:	d1f9      	bne.n	8004f54 <_svfiprintf_r+0x50>
 8004f60:	ebba 0b04 	subs.w	fp, sl, r4
 8004f64:	d00b      	beq.n	8004f7e <_svfiprintf_r+0x7a>
 8004f66:	465b      	mov	r3, fp
 8004f68:	4622      	mov	r2, r4
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7ff ff6f 	bl	8004e50 <__ssputs_r>
 8004f72:	3001      	adds	r0, #1
 8004f74:	f000 80a9 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f7a:	445a      	add	r2, fp
 8004f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80a1 	beq.w	80050ca <_svfiprintf_r+0x1c6>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f92:	f10a 0a01 	add.w	sl, sl, #1
 8004f96:	9304      	str	r3, [sp, #16]
 8004f98:	9307      	str	r3, [sp, #28]
 8004f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8004fa0:	4654      	mov	r4, sl
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa8:	4850      	ldr	r0, [pc, #320]	; (80050ec <_svfiprintf_r+0x1e8>)
 8004faa:	f7fb f951 	bl	8000250 <memchr>
 8004fae:	9a04      	ldr	r2, [sp, #16]
 8004fb0:	b9d8      	cbnz	r0, 8004fea <_svfiprintf_r+0xe6>
 8004fb2:	06d0      	lsls	r0, r2, #27
 8004fb4:	bf44      	itt	mi
 8004fb6:	2320      	movmi	r3, #32
 8004fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fbc:	0711      	lsls	r1, r2, #28
 8004fbe:	bf44      	itt	mi
 8004fc0:	232b      	movmi	r3, #43	; 0x2b
 8004fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8004fca:	2b2a      	cmp	r3, #42	; 0x2a
 8004fcc:	d015      	beq.n	8004ffa <_svfiprintf_r+0xf6>
 8004fce:	9a07      	ldr	r2, [sp, #28]
 8004fd0:	4654      	mov	r4, sl
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	f04f 0c0a 	mov.w	ip, #10
 8004fd8:	4621      	mov	r1, r4
 8004fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fde:	3b30      	subs	r3, #48	; 0x30
 8004fe0:	2b09      	cmp	r3, #9
 8004fe2:	d94d      	bls.n	8005080 <_svfiprintf_r+0x17c>
 8004fe4:	b1b0      	cbz	r0, 8005014 <_svfiprintf_r+0x110>
 8004fe6:	9207      	str	r2, [sp, #28]
 8004fe8:	e014      	b.n	8005014 <_svfiprintf_r+0x110>
 8004fea:	eba0 0308 	sub.w	r3, r0, r8
 8004fee:	fa09 f303 	lsl.w	r3, r9, r3
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	9304      	str	r3, [sp, #16]
 8004ff6:	46a2      	mov	sl, r4
 8004ff8:	e7d2      	b.n	8004fa0 <_svfiprintf_r+0x9c>
 8004ffa:	9b03      	ldr	r3, [sp, #12]
 8004ffc:	1d19      	adds	r1, r3, #4
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	9103      	str	r1, [sp, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	bfbb      	ittet	lt
 8005006:	425b      	neglt	r3, r3
 8005008:	f042 0202 	orrlt.w	r2, r2, #2
 800500c:	9307      	strge	r3, [sp, #28]
 800500e:	9307      	strlt	r3, [sp, #28]
 8005010:	bfb8      	it	lt
 8005012:	9204      	strlt	r2, [sp, #16]
 8005014:	7823      	ldrb	r3, [r4, #0]
 8005016:	2b2e      	cmp	r3, #46	; 0x2e
 8005018:	d10c      	bne.n	8005034 <_svfiprintf_r+0x130>
 800501a:	7863      	ldrb	r3, [r4, #1]
 800501c:	2b2a      	cmp	r3, #42	; 0x2a
 800501e:	d134      	bne.n	800508a <_svfiprintf_r+0x186>
 8005020:	9b03      	ldr	r3, [sp, #12]
 8005022:	1d1a      	adds	r2, r3, #4
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	9203      	str	r2, [sp, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfb8      	it	lt
 800502c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005030:	3402      	adds	r4, #2
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80050fc <_svfiprintf_r+0x1f8>
 8005038:	7821      	ldrb	r1, [r4, #0]
 800503a:	2203      	movs	r2, #3
 800503c:	4650      	mov	r0, sl
 800503e:	f7fb f907 	bl	8000250 <memchr>
 8005042:	b138      	cbz	r0, 8005054 <_svfiprintf_r+0x150>
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	eba0 000a 	sub.w	r0, r0, sl
 800504a:	2240      	movs	r2, #64	; 0x40
 800504c:	4082      	lsls	r2, r0
 800504e:	4313      	orrs	r3, r2
 8005050:	3401      	adds	r4, #1
 8005052:	9304      	str	r3, [sp, #16]
 8005054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005058:	4825      	ldr	r0, [pc, #148]	; (80050f0 <_svfiprintf_r+0x1ec>)
 800505a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800505e:	2206      	movs	r2, #6
 8005060:	f7fb f8f6 	bl	8000250 <memchr>
 8005064:	2800      	cmp	r0, #0
 8005066:	d038      	beq.n	80050da <_svfiprintf_r+0x1d6>
 8005068:	4b22      	ldr	r3, [pc, #136]	; (80050f4 <_svfiprintf_r+0x1f0>)
 800506a:	bb1b      	cbnz	r3, 80050b4 <_svfiprintf_r+0x1b0>
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	3307      	adds	r3, #7
 8005070:	f023 0307 	bic.w	r3, r3, #7
 8005074:	3308      	adds	r3, #8
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507a:	4433      	add	r3, r6
 800507c:	9309      	str	r3, [sp, #36]	; 0x24
 800507e:	e768      	b.n	8004f52 <_svfiprintf_r+0x4e>
 8005080:	fb0c 3202 	mla	r2, ip, r2, r3
 8005084:	460c      	mov	r4, r1
 8005086:	2001      	movs	r0, #1
 8005088:	e7a6      	b.n	8004fd8 <_svfiprintf_r+0xd4>
 800508a:	2300      	movs	r3, #0
 800508c:	3401      	adds	r4, #1
 800508e:	9305      	str	r3, [sp, #20]
 8005090:	4619      	mov	r1, r3
 8005092:	f04f 0c0a 	mov.w	ip, #10
 8005096:	4620      	mov	r0, r4
 8005098:	f810 2b01 	ldrb.w	r2, [r0], #1
 800509c:	3a30      	subs	r2, #48	; 0x30
 800509e:	2a09      	cmp	r2, #9
 80050a0:	d903      	bls.n	80050aa <_svfiprintf_r+0x1a6>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0c6      	beq.n	8005034 <_svfiprintf_r+0x130>
 80050a6:	9105      	str	r1, [sp, #20]
 80050a8:	e7c4      	b.n	8005034 <_svfiprintf_r+0x130>
 80050aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ae:	4604      	mov	r4, r0
 80050b0:	2301      	movs	r3, #1
 80050b2:	e7f0      	b.n	8005096 <_svfiprintf_r+0x192>
 80050b4:	ab03      	add	r3, sp, #12
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	462a      	mov	r2, r5
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <_svfiprintf_r+0x1f4>)
 80050bc:	a904      	add	r1, sp, #16
 80050be:	4638      	mov	r0, r7
 80050c0:	f3af 8000 	nop.w
 80050c4:	1c42      	adds	r2, r0, #1
 80050c6:	4606      	mov	r6, r0
 80050c8:	d1d6      	bne.n	8005078 <_svfiprintf_r+0x174>
 80050ca:	89ab      	ldrh	r3, [r5, #12]
 80050cc:	065b      	lsls	r3, r3, #25
 80050ce:	f53f af2d 	bmi.w	8004f2c <_svfiprintf_r+0x28>
 80050d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d4:	b01d      	add	sp, #116	; 0x74
 80050d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050da:	ab03      	add	r3, sp, #12
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	462a      	mov	r2, r5
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <_svfiprintf_r+0x1f4>)
 80050e2:	a904      	add	r1, sp, #16
 80050e4:	4638      	mov	r0, r7
 80050e6:	f000 f879 	bl	80051dc <_printf_i>
 80050ea:	e7eb      	b.n	80050c4 <_svfiprintf_r+0x1c0>
 80050ec:	08005748 	.word	0x08005748
 80050f0:	08005752 	.word	0x08005752
 80050f4:	00000000 	.word	0x00000000
 80050f8:	08004e51 	.word	0x08004e51
 80050fc:	0800574e 	.word	0x0800574e

08005100 <_printf_common>:
 8005100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	4616      	mov	r6, r2
 8005106:	4699      	mov	r9, r3
 8005108:	688a      	ldr	r2, [r1, #8]
 800510a:	690b      	ldr	r3, [r1, #16]
 800510c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005110:	4293      	cmp	r3, r2
 8005112:	bfb8      	it	lt
 8005114:	4613      	movlt	r3, r2
 8005116:	6033      	str	r3, [r6, #0]
 8005118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800511c:	4607      	mov	r7, r0
 800511e:	460c      	mov	r4, r1
 8005120:	b10a      	cbz	r2, 8005126 <_printf_common+0x26>
 8005122:	3301      	adds	r3, #1
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	0699      	lsls	r1, r3, #26
 800512a:	bf42      	ittt	mi
 800512c:	6833      	ldrmi	r3, [r6, #0]
 800512e:	3302      	addmi	r3, #2
 8005130:	6033      	strmi	r3, [r6, #0]
 8005132:	6825      	ldr	r5, [r4, #0]
 8005134:	f015 0506 	ands.w	r5, r5, #6
 8005138:	d106      	bne.n	8005148 <_printf_common+0x48>
 800513a:	f104 0a19 	add.w	sl, r4, #25
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	6832      	ldr	r2, [r6, #0]
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	42ab      	cmp	r3, r5
 8005146:	dc26      	bgt.n	8005196 <_printf_common+0x96>
 8005148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800514c:	1e13      	subs	r3, r2, #0
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	bf18      	it	ne
 8005152:	2301      	movne	r3, #1
 8005154:	0692      	lsls	r2, r2, #26
 8005156:	d42b      	bmi.n	80051b0 <_printf_common+0xb0>
 8005158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800515c:	4649      	mov	r1, r9
 800515e:	4638      	mov	r0, r7
 8005160:	47c0      	blx	r8
 8005162:	3001      	adds	r0, #1
 8005164:	d01e      	beq.n	80051a4 <_printf_common+0xa4>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	6922      	ldr	r2, [r4, #16]
 800516a:	f003 0306 	and.w	r3, r3, #6
 800516e:	2b04      	cmp	r3, #4
 8005170:	bf02      	ittt	eq
 8005172:	68e5      	ldreq	r5, [r4, #12]
 8005174:	6833      	ldreq	r3, [r6, #0]
 8005176:	1aed      	subeq	r5, r5, r3
 8005178:	68a3      	ldr	r3, [r4, #8]
 800517a:	bf0c      	ite	eq
 800517c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005180:	2500      	movne	r5, #0
 8005182:	4293      	cmp	r3, r2
 8005184:	bfc4      	itt	gt
 8005186:	1a9b      	subgt	r3, r3, r2
 8005188:	18ed      	addgt	r5, r5, r3
 800518a:	2600      	movs	r6, #0
 800518c:	341a      	adds	r4, #26
 800518e:	42b5      	cmp	r5, r6
 8005190:	d11a      	bne.n	80051c8 <_printf_common+0xc8>
 8005192:	2000      	movs	r0, #0
 8005194:	e008      	b.n	80051a8 <_printf_common+0xa8>
 8005196:	2301      	movs	r3, #1
 8005198:	4652      	mov	r2, sl
 800519a:	4649      	mov	r1, r9
 800519c:	4638      	mov	r0, r7
 800519e:	47c0      	blx	r8
 80051a0:	3001      	adds	r0, #1
 80051a2:	d103      	bne.n	80051ac <_printf_common+0xac>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ac:	3501      	adds	r5, #1
 80051ae:	e7c6      	b.n	800513e <_printf_common+0x3e>
 80051b0:	18e1      	adds	r1, r4, r3
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	2030      	movs	r0, #48	; 0x30
 80051b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051ba:	4422      	add	r2, r4
 80051bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051c4:	3302      	adds	r3, #2
 80051c6:	e7c7      	b.n	8005158 <_printf_common+0x58>
 80051c8:	2301      	movs	r3, #1
 80051ca:	4622      	mov	r2, r4
 80051cc:	4649      	mov	r1, r9
 80051ce:	4638      	mov	r0, r7
 80051d0:	47c0      	blx	r8
 80051d2:	3001      	adds	r0, #1
 80051d4:	d0e6      	beq.n	80051a4 <_printf_common+0xa4>
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7d9      	b.n	800518e <_printf_common+0x8e>
	...

080051dc <_printf_i>:
 80051dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051e0:	7e0f      	ldrb	r7, [r1, #24]
 80051e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051e4:	2f78      	cmp	r7, #120	; 0x78
 80051e6:	4691      	mov	r9, r2
 80051e8:	4680      	mov	r8, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	469a      	mov	sl, r3
 80051ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80051f2:	d807      	bhi.n	8005204 <_printf_i+0x28>
 80051f4:	2f62      	cmp	r7, #98	; 0x62
 80051f6:	d80a      	bhi.n	800520e <_printf_i+0x32>
 80051f8:	2f00      	cmp	r7, #0
 80051fa:	f000 80d4 	beq.w	80053a6 <_printf_i+0x1ca>
 80051fe:	2f58      	cmp	r7, #88	; 0x58
 8005200:	f000 80c0 	beq.w	8005384 <_printf_i+0x1a8>
 8005204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800520c:	e03a      	b.n	8005284 <_printf_i+0xa8>
 800520e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005212:	2b15      	cmp	r3, #21
 8005214:	d8f6      	bhi.n	8005204 <_printf_i+0x28>
 8005216:	a101      	add	r1, pc, #4	; (adr r1, 800521c <_printf_i+0x40>)
 8005218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800521c:	08005275 	.word	0x08005275
 8005220:	08005289 	.word	0x08005289
 8005224:	08005205 	.word	0x08005205
 8005228:	08005205 	.word	0x08005205
 800522c:	08005205 	.word	0x08005205
 8005230:	08005205 	.word	0x08005205
 8005234:	08005289 	.word	0x08005289
 8005238:	08005205 	.word	0x08005205
 800523c:	08005205 	.word	0x08005205
 8005240:	08005205 	.word	0x08005205
 8005244:	08005205 	.word	0x08005205
 8005248:	0800538d 	.word	0x0800538d
 800524c:	080052b5 	.word	0x080052b5
 8005250:	08005347 	.word	0x08005347
 8005254:	08005205 	.word	0x08005205
 8005258:	08005205 	.word	0x08005205
 800525c:	080053af 	.word	0x080053af
 8005260:	08005205 	.word	0x08005205
 8005264:	080052b5 	.word	0x080052b5
 8005268:	08005205 	.word	0x08005205
 800526c:	08005205 	.word	0x08005205
 8005270:	0800534f 	.word	0x0800534f
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	1d1a      	adds	r2, r3, #4
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	602a      	str	r2, [r5, #0]
 800527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005284:	2301      	movs	r3, #1
 8005286:	e09f      	b.n	80053c8 <_printf_i+0x1ec>
 8005288:	6820      	ldr	r0, [r4, #0]
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	0607      	lsls	r7, r0, #24
 800528e:	f103 0104 	add.w	r1, r3, #4
 8005292:	6029      	str	r1, [r5, #0]
 8005294:	d501      	bpl.n	800529a <_printf_i+0xbe>
 8005296:	681e      	ldr	r6, [r3, #0]
 8005298:	e003      	b.n	80052a2 <_printf_i+0xc6>
 800529a:	0646      	lsls	r6, r0, #25
 800529c:	d5fb      	bpl.n	8005296 <_printf_i+0xba>
 800529e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052a2:	2e00      	cmp	r6, #0
 80052a4:	da03      	bge.n	80052ae <_printf_i+0xd2>
 80052a6:	232d      	movs	r3, #45	; 0x2d
 80052a8:	4276      	negs	r6, r6
 80052aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ae:	485a      	ldr	r0, [pc, #360]	; (8005418 <_printf_i+0x23c>)
 80052b0:	230a      	movs	r3, #10
 80052b2:	e012      	b.n	80052da <_printf_i+0xfe>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	1d19      	adds	r1, r3, #4
 80052ba:	6029      	str	r1, [r5, #0]
 80052bc:	0605      	lsls	r5, r0, #24
 80052be:	d501      	bpl.n	80052c4 <_printf_i+0xe8>
 80052c0:	681e      	ldr	r6, [r3, #0]
 80052c2:	e002      	b.n	80052ca <_printf_i+0xee>
 80052c4:	0641      	lsls	r1, r0, #25
 80052c6:	d5fb      	bpl.n	80052c0 <_printf_i+0xe4>
 80052c8:	881e      	ldrh	r6, [r3, #0]
 80052ca:	4853      	ldr	r0, [pc, #332]	; (8005418 <_printf_i+0x23c>)
 80052cc:	2f6f      	cmp	r7, #111	; 0x6f
 80052ce:	bf0c      	ite	eq
 80052d0:	2308      	moveq	r3, #8
 80052d2:	230a      	movne	r3, #10
 80052d4:	2100      	movs	r1, #0
 80052d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052da:	6865      	ldr	r5, [r4, #4]
 80052dc:	60a5      	str	r5, [r4, #8]
 80052de:	2d00      	cmp	r5, #0
 80052e0:	bfa2      	ittt	ge
 80052e2:	6821      	ldrge	r1, [r4, #0]
 80052e4:	f021 0104 	bicge.w	r1, r1, #4
 80052e8:	6021      	strge	r1, [r4, #0]
 80052ea:	b90e      	cbnz	r6, 80052f0 <_printf_i+0x114>
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	d04b      	beq.n	8005388 <_printf_i+0x1ac>
 80052f0:	4615      	mov	r5, r2
 80052f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80052f6:	fb03 6711 	mls	r7, r3, r1, r6
 80052fa:	5dc7      	ldrb	r7, [r0, r7]
 80052fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005300:	4637      	mov	r7, r6
 8005302:	42bb      	cmp	r3, r7
 8005304:	460e      	mov	r6, r1
 8005306:	d9f4      	bls.n	80052f2 <_printf_i+0x116>
 8005308:	2b08      	cmp	r3, #8
 800530a:	d10b      	bne.n	8005324 <_printf_i+0x148>
 800530c:	6823      	ldr	r3, [r4, #0]
 800530e:	07de      	lsls	r6, r3, #31
 8005310:	d508      	bpl.n	8005324 <_printf_i+0x148>
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	6861      	ldr	r1, [r4, #4]
 8005316:	4299      	cmp	r1, r3
 8005318:	bfde      	ittt	le
 800531a:	2330      	movle	r3, #48	; 0x30
 800531c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005320:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005324:	1b52      	subs	r2, r2, r5
 8005326:	6122      	str	r2, [r4, #16]
 8005328:	f8cd a000 	str.w	sl, [sp]
 800532c:	464b      	mov	r3, r9
 800532e:	aa03      	add	r2, sp, #12
 8005330:	4621      	mov	r1, r4
 8005332:	4640      	mov	r0, r8
 8005334:	f7ff fee4 	bl	8005100 <_printf_common>
 8005338:	3001      	adds	r0, #1
 800533a:	d14a      	bne.n	80053d2 <_printf_i+0x1f6>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	b004      	add	sp, #16
 8005342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	f043 0320 	orr.w	r3, r3, #32
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	4833      	ldr	r0, [pc, #204]	; (800541c <_printf_i+0x240>)
 8005350:	2778      	movs	r7, #120	; 0x78
 8005352:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	6829      	ldr	r1, [r5, #0]
 800535a:	061f      	lsls	r7, r3, #24
 800535c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005360:	d402      	bmi.n	8005368 <_printf_i+0x18c>
 8005362:	065f      	lsls	r7, r3, #25
 8005364:	bf48      	it	mi
 8005366:	b2b6      	uxthmi	r6, r6
 8005368:	07df      	lsls	r7, r3, #31
 800536a:	bf48      	it	mi
 800536c:	f043 0320 	orrmi.w	r3, r3, #32
 8005370:	6029      	str	r1, [r5, #0]
 8005372:	bf48      	it	mi
 8005374:	6023      	strmi	r3, [r4, #0]
 8005376:	b91e      	cbnz	r6, 8005380 <_printf_i+0x1a4>
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	f023 0320 	bic.w	r3, r3, #32
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	2310      	movs	r3, #16
 8005382:	e7a7      	b.n	80052d4 <_printf_i+0xf8>
 8005384:	4824      	ldr	r0, [pc, #144]	; (8005418 <_printf_i+0x23c>)
 8005386:	e7e4      	b.n	8005352 <_printf_i+0x176>
 8005388:	4615      	mov	r5, r2
 800538a:	e7bd      	b.n	8005308 <_printf_i+0x12c>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	6826      	ldr	r6, [r4, #0]
 8005390:	6961      	ldr	r1, [r4, #20]
 8005392:	1d18      	adds	r0, r3, #4
 8005394:	6028      	str	r0, [r5, #0]
 8005396:	0635      	lsls	r5, r6, #24
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	d501      	bpl.n	80053a0 <_printf_i+0x1c4>
 800539c:	6019      	str	r1, [r3, #0]
 800539e:	e002      	b.n	80053a6 <_printf_i+0x1ca>
 80053a0:	0670      	lsls	r0, r6, #25
 80053a2:	d5fb      	bpl.n	800539c <_printf_i+0x1c0>
 80053a4:	8019      	strh	r1, [r3, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	4615      	mov	r5, r2
 80053ac:	e7bc      	b.n	8005328 <_printf_i+0x14c>
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	1d1a      	adds	r2, r3, #4
 80053b2:	602a      	str	r2, [r5, #0]
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	6862      	ldr	r2, [r4, #4]
 80053b8:	2100      	movs	r1, #0
 80053ba:	4628      	mov	r0, r5
 80053bc:	f7fa ff48 	bl	8000250 <memchr>
 80053c0:	b108      	cbz	r0, 80053c6 <_printf_i+0x1ea>
 80053c2:	1b40      	subs	r0, r0, r5
 80053c4:	6060      	str	r0, [r4, #4]
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	2300      	movs	r3, #0
 80053cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d0:	e7aa      	b.n	8005328 <_printf_i+0x14c>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d0ad      	beq.n	800533c <_printf_i+0x160>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	079b      	lsls	r3, r3, #30
 80053e4:	d413      	bmi.n	800540e <_printf_i+0x232>
 80053e6:	68e0      	ldr	r0, [r4, #12]
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	4298      	cmp	r0, r3
 80053ec:	bfb8      	it	lt
 80053ee:	4618      	movlt	r0, r3
 80053f0:	e7a6      	b.n	8005340 <_printf_i+0x164>
 80053f2:	2301      	movs	r3, #1
 80053f4:	4632      	mov	r2, r6
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d09d      	beq.n	800533c <_printf_i+0x160>
 8005400:	3501      	adds	r5, #1
 8005402:	68e3      	ldr	r3, [r4, #12]
 8005404:	9903      	ldr	r1, [sp, #12]
 8005406:	1a5b      	subs	r3, r3, r1
 8005408:	42ab      	cmp	r3, r5
 800540a:	dcf2      	bgt.n	80053f2 <_printf_i+0x216>
 800540c:	e7eb      	b.n	80053e6 <_printf_i+0x20a>
 800540e:	2500      	movs	r5, #0
 8005410:	f104 0619 	add.w	r6, r4, #25
 8005414:	e7f5      	b.n	8005402 <_printf_i+0x226>
 8005416:	bf00      	nop
 8005418:	08005759 	.word	0x08005759
 800541c:	0800576a 	.word	0x0800576a

08005420 <memmove>:
 8005420:	4288      	cmp	r0, r1
 8005422:	b510      	push	{r4, lr}
 8005424:	eb01 0402 	add.w	r4, r1, r2
 8005428:	d902      	bls.n	8005430 <memmove+0x10>
 800542a:	4284      	cmp	r4, r0
 800542c:	4623      	mov	r3, r4
 800542e:	d807      	bhi.n	8005440 <memmove+0x20>
 8005430:	1e43      	subs	r3, r0, #1
 8005432:	42a1      	cmp	r1, r4
 8005434:	d008      	beq.n	8005448 <memmove+0x28>
 8005436:	f811 2b01 	ldrb.w	r2, [r1], #1
 800543a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800543e:	e7f8      	b.n	8005432 <memmove+0x12>
 8005440:	4402      	add	r2, r0
 8005442:	4601      	mov	r1, r0
 8005444:	428a      	cmp	r2, r1
 8005446:	d100      	bne.n	800544a <memmove+0x2a>
 8005448:	bd10      	pop	{r4, pc}
 800544a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800544e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005452:	e7f7      	b.n	8005444 <memmove+0x24>

08005454 <_sbrk_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d06      	ldr	r5, [pc, #24]	; (8005470 <_sbrk_r+0x1c>)
 8005458:	2300      	movs	r3, #0
 800545a:	4604      	mov	r4, r0
 800545c:	4608      	mov	r0, r1
 800545e:	602b      	str	r3, [r5, #0]
 8005460:	f7fb fe7a 	bl	8001158 <_sbrk>
 8005464:	1c43      	adds	r3, r0, #1
 8005466:	d102      	bne.n	800546e <_sbrk_r+0x1a>
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	b103      	cbz	r3, 800546e <_sbrk_r+0x1a>
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	bd38      	pop	{r3, r4, r5, pc}
 8005470:	20000344 	.word	0x20000344

08005474 <memcpy>:
 8005474:	440a      	add	r2, r1
 8005476:	4291      	cmp	r1, r2
 8005478:	f100 33ff 	add.w	r3, r0, #4294967295
 800547c:	d100      	bne.n	8005480 <memcpy+0xc>
 800547e:	4770      	bx	lr
 8005480:	b510      	push	{r4, lr}
 8005482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548a:	4291      	cmp	r1, r2
 800548c:	d1f9      	bne.n	8005482 <memcpy+0xe>
 800548e:	bd10      	pop	{r4, pc}

08005490 <_realloc_r>:
 8005490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	4680      	mov	r8, r0
 8005496:	4614      	mov	r4, r2
 8005498:	460e      	mov	r6, r1
 800549a:	b921      	cbnz	r1, 80054a6 <_realloc_r+0x16>
 800549c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a0:	4611      	mov	r1, r2
 80054a2:	f7ff bc49 	b.w	8004d38 <_malloc_r>
 80054a6:	b92a      	cbnz	r2, 80054b4 <_realloc_r+0x24>
 80054a8:	f7ff fbda 	bl	8004c60 <_free_r>
 80054ac:	4625      	mov	r5, r4
 80054ae:	4628      	mov	r0, r5
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	f000 f81b 	bl	80054ee <_malloc_usable_size_r>
 80054b8:	4284      	cmp	r4, r0
 80054ba:	4607      	mov	r7, r0
 80054bc:	d802      	bhi.n	80054c4 <_realloc_r+0x34>
 80054be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054c2:	d812      	bhi.n	80054ea <_realloc_r+0x5a>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4640      	mov	r0, r8
 80054c8:	f7ff fc36 	bl	8004d38 <_malloc_r>
 80054cc:	4605      	mov	r5, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d0ed      	beq.n	80054ae <_realloc_r+0x1e>
 80054d2:	42bc      	cmp	r4, r7
 80054d4:	4622      	mov	r2, r4
 80054d6:	4631      	mov	r1, r6
 80054d8:	bf28      	it	cs
 80054da:	463a      	movcs	r2, r7
 80054dc:	f7ff ffca 	bl	8005474 <memcpy>
 80054e0:	4631      	mov	r1, r6
 80054e2:	4640      	mov	r0, r8
 80054e4:	f7ff fbbc 	bl	8004c60 <_free_r>
 80054e8:	e7e1      	b.n	80054ae <_realloc_r+0x1e>
 80054ea:	4635      	mov	r5, r6
 80054ec:	e7df      	b.n	80054ae <_realloc_r+0x1e>

080054ee <_malloc_usable_size_r>:
 80054ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f2:	1f18      	subs	r0, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfbc      	itt	lt
 80054f8:	580b      	ldrlt	r3, [r1, r0]
 80054fa:	18c0      	addlt	r0, r0, r3
 80054fc:	4770      	bx	lr
	...

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
