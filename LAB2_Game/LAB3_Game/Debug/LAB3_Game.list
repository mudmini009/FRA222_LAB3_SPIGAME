
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004708  08004708  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004710  08004710  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004714  08004714  00014714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000010  08004728  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004728  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143ea  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a3  00000000  00000000  0003446d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00036b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  00037d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e75  00000000  00000000  00038bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015053  00000000  00000000  0005ea29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa142  00000000  00000000  00073a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e50  00000000  00000000  0016dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00172a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080046b0 	.word	0x080046b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080046b0 	.word	0x080046b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd35 	bl	8000f86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f818 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f938 	bl	8000794 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f860 	bl	80005e8 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000528:	f000 f8a8 	bl	800067c <MX_SPI3_Init>
  MX_TIM3_Init();
 800052c:	f000 f8e4 	bl	80006f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 8000530:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x38>)
 8000532:	f002 feb7 	bl	80032a4 <HAL_TIM_Base_Start>
  SPITxRx_Setup();
 8000536:	f000 f9bd 	bl	80008b4 <SPITxRx_Setup>
  TikTokGame();
 800053a:	f000 f9fb 	bl	8000934 <TikTokGame>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 800053e:	f000 f9cf 	bl	80008e0 <SPITxRx_readIO>
	  TikTokGame();
 8000542:	f000 f9f7 	bl	8000934 <TikTokGame>
	  LEDdisplay();
 8000546:	f000 fb49 	bl	8000bdc <LEDdisplay>
  {
 800054a:	e7f8      	b.n	800053e <main+0x2a>
 800054c:	20000124 	.word	0x20000124

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	2238      	movs	r2, #56	; 0x38
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f004 f87a 	bl	8004658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000572:	2000      	movs	r0, #0
 8000574:	f001 f8e6 	bl	8001744 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800058e:	2304      	movs	r3, #4
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000592:	2355      	movs	r3, #85	; 0x55
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0318 	add.w	r3, r7, #24
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f980 	bl	80018ac <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b2:	f000 fb83 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fc7e 	bl	8001ed0 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005da:	f000 fb6f 	bl	8000cbc <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005ee:	4a22      	ldr	r2, [pc, #136]	; (8000678 <MX_LPUART1_UART_Init+0x90>)
 80005f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800061a:	2200      	movs	r2, #0
 800061c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000620:	2200      	movs	r2, #0
 8000622:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800062c:	f003 f9a6 	bl	800397c <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000636:	f000 fb41 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 800063e:	f003 ff41 	bl	80044c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000648:	f000 fb38 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	f003 ff76 	bl	8004540 <HAL_UARTEx_SetRxFifoThreshold>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065a:	f000 fb2f 	bl	8000cbc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f003 fef7 	bl	8004452 <HAL_UARTEx_DisableFifoMode>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066a:	f000 fb27 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	2000002c 	.word	0x2000002c
 8000678:	40008000 	.word	0x40008000

0800067c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_SPI3_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_SPI3_Init+0x74>)
 8000696:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800069a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_SPI3_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006b2:	2238      	movs	r2, #56	; 0x38
 80006b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_SPI3_Init+0x74>)
 80006dc:	f002 f862 	bl	80027a4 <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 fae9 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000c0 	.word	0x200000c0
 80006f4:	40003c00 	.word	0x40003c00

080006f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_TIM3_Init+0x94>)
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <MX_TIM3_Init+0x98>)
 800071a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM3_Init+0x94>)
 800071e:	f244 2267 	movw	r2, #16999	; 0x4267
 8000722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_TIM3_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_TIM3_Init+0x94>)
 800072c:	2263      	movs	r2, #99	; 0x63
 800072e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_TIM3_Init+0x94>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_TIM3_Init+0x94>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <MX_TIM3_Init+0x94>)
 800073e:	f002 fd59 	bl	80031f4 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000748:	f000 fab8 	bl	8000cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	4619      	mov	r1, r3
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_TIM3_Init+0x94>)
 800075a:	f002 fe13 	bl	8003384 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000764:	f000 faaa 	bl	8000cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_TIM3_Init+0x94>)
 8000776:	f003 f86b 	bl	8003850 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000780:	f000 fa9c 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000124 	.word	0x20000124
 8000790:	40000400 	.word	0x40000400

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a3e      	ldr	r2, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a38      	ldr	r2, [pc, #224]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007c8:	f043 0320 	orr.w	r3, r3, #32
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0320 	and.w	r3, r3, #32
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <MX_GPIO_Init+0x114>)
 80007f8:	f043 0308 	orr.w	r3, r3, #8
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_GPIO_Init+0x114>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0308 	and.w	r3, r3, #8
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_GPIO_Init+0x114>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <MX_GPIO_Init+0x114>)
 8000810:	f043 0302 	orr.w	r3, r3, #2
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_GPIO_Init+0x114>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2120      	movs	r1, #32
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f000 ff4f 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	2104      	movs	r1, #4
 8000832:	481e      	ldr	r0, [pc, #120]	; (80008ac <MX_GPIO_Init+0x118>)
 8000834:	f000 ff4a 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <MX_GPIO_Init+0x11c>)
 8000850:	f000 fda2 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000854:	2320      	movs	r3, #32
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f000 fd93 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000872:	2304      	movs	r3, #4
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <MX_GPIO_Init+0x118>)
 800088a:	f000 fd85 	bl	8001398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2028      	movs	r0, #40	; 0x28
 8000894:	f000 fce5 	bl	8001262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000898:	2028      	movs	r0, #40	; 0x28
 800089a:	f000 fcfc 	bl	8001296 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000c00 	.word	0x48000c00
 80008b0:	48000800 	.word	0x48000800

080008b4 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */

void SPITxRx_Setup()
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008b8:	2200      	movs	r2, #0
 80008ba:	2104      	movs	r1, #4
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <SPITxRx_Setup+0x28>)
 80008be:	f000 ff05 	bl	80016cc <HAL_GPIO_WritePin>
HAL_Delay(1);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f000 fbd0 	bl	8001068 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 80008c8:	2201      	movs	r2, #1
 80008ca:	2104      	movs	r1, #4
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <SPITxRx_Setup+0x28>)
 80008ce:	f000 fefd 	bl	80016cc <HAL_GPIO_WritePin>
HAL_Delay(1);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 fbc8 	bl	8001068 <HAL_Delay>
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	48000c00 	.word	0x48000c00

080008e0 <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80008e4:	2104      	movs	r1, #4
 80008e6:	480f      	ldr	r0, [pc, #60]	; (8000924 <SPITxRx_readIO+0x44>)
 80008e8:	f000 fed8 	bl	800169c <HAL_GPIO_ReadPin>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d016      	beq.n	8000920 <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008f2:	2200      	movs	r2, #0
 80008f4:	2104      	movs	r1, #4
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <SPITxRx_readIO+0x44>)
 80008f8:	f000 fee8 	bl	80016cc <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <SPITxRx_readIO+0x48>)
 80008fe:	2241      	movs	r2, #65	; 0x41
 8000900:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <SPITxRx_readIO+0x48>)
 8000904:	2212      	movs	r2, #18
 8000906:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <SPITxRx_readIO+0x48>)
 800090a:	2200      	movs	r2, #0
 800090c:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SPITxRx_readIO+0x48>)
 8000910:	2200      	movs	r2, #0
 8000912:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000914:	2304      	movs	r3, #4
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SPITxRx_readIO+0x4c>)
 8000918:	4903      	ldr	r1, [pc, #12]	; (8000928 <SPITxRx_readIO+0x48>)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <SPITxRx_readIO+0x50>)
 800091c:	f001 ffee 	bl	80028fc <HAL_SPI_TransmitReceive_IT>
}
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	48000c00 	.word	0x48000c00
 8000928:	2000017c 	.word	0x2000017c
 800092c:	20000170 	.word	0x20000170
 8000930:	200000c0 	.word	0x200000c0

08000934 <TikTokGame>:

void TikTokGame()
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 8000938:	4ba3      	ldr	r3, [pc, #652]	; (8000bc8 <TikTokGame+0x294>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	f040 8102 	bne.w	8000b46 <TikTokGame+0x212>
    {
    	switch (game_left) {
 8000942:	4ba2      	ldr	r3, [pc, #648]	; (8000bcc <TikTokGame+0x298>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	3b01      	subs	r3, #1
 8000948:	2b04      	cmp	r3, #4
 800094a:	f200 8138 	bhi.w	8000bbe <TikTokGame+0x28a>
 800094e:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <TikTokGame+0x20>)
 8000950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000954:	08000acf 	.word	0x08000acf
 8000958:	08000a57 	.word	0x08000a57
 800095c:	080009df 	.word	0x080009df
 8000960:	08000bbf 	.word	0x08000bbf
 8000964:	08000969 	.word	0x08000969
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 8000968:	4b99      	ldr	r3, [pc, #612]	; (8000bd0 <TikTokGame+0x29c>)
 800096a:	789b      	ldrb	r3, [r3, #2]
 800096c:	3b03      	subs	r3, #3
 800096e:	2b04      	cmp	r3, #4
 8000970:	d833      	bhi.n	80009da <TikTokGame+0xa6>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <TikTokGame+0x44>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	080009c1 	.word	0x080009c1
 800097c:	080009db 	.word	0x080009db
 8000980:	080009a7 	.word	0x080009a7
 8000984:	0800098d 	.word	0x0800098d
 8000988:	080009db 	.word	0x080009db
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 800098c:	4b91      	ldr	r3, [pc, #580]	; (8000bd4 <TikTokGame+0x2a0>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000992:	4b8e      	ldr	r3, [pc, #568]	; (8000bcc <TikTokGame+0x298>)
 8000994:	2204      	movs	r2, #4
 8000996:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000998:	4b8f      	ldr	r3, [pc, #572]	; (8000bd8 <TikTokGame+0x2a4>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 800099e:	4b8a      	ldr	r3, [pc, #552]	; (8000bc8 <TikTokGame+0x294>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
    	                break;
 80009a4:	e01a      	b.n	80009dc <TikTokGame+0xa8>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 80009a6:	4b8b      	ldr	r3, [pc, #556]	; (8000bd4 <TikTokGame+0x2a0>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 80009ac:	4b87      	ldr	r3, [pc, #540]	; (8000bcc <TikTokGame+0x298>)
 80009ae:	2203      	movs	r2, #3
 80009b0:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80009b2:	4b89      	ldr	r3, [pc, #548]	; (8000bd8 <TikTokGame+0x2a4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 80009b8:	4b83      	ldr	r3, [pc, #524]	; (8000bc8 <TikTokGame+0x294>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
    	                break;
 80009be:	e00d      	b.n	80009dc <TikTokGame+0xa8>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 80009c0:	4b84      	ldr	r3, [pc, #528]	; (8000bd4 <TikTokGame+0x2a0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <TikTokGame+0x298>)
 80009c8:	2205      	movs	r2, #5
 80009ca:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80009cc:	4b82      	ldr	r3, [pc, #520]	; (8000bd8 <TikTokGame+0x2a4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 80009d2:	4b7d      	ldr	r3, [pc, #500]	; (8000bc8 <TikTokGame+0x294>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
    	                break;
 80009d8:	e000      	b.n	80009dc <TikTokGame+0xa8>
    	            default: // multi press do nothing
    	                break;
 80009da:	bf00      	nop
    	        }
    	        break;
 80009dc:	e0ef      	b.n	8000bbe <TikTokGame+0x28a>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 80009de:	4b7c      	ldr	r3, [pc, #496]	; (8000bd0 <TikTokGame+0x29c>)
 80009e0:	789b      	ldrb	r3, [r3, #2]
 80009e2:	3b03      	subs	r3, #3
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d834      	bhi.n	8000a52 <TikTokGame+0x11e>
 80009e8:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <TikTokGame+0xbc>)
 80009ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ee:	bf00      	nop
 80009f0:	08000a39 	.word	0x08000a39
 80009f4:	08000a53 	.word	0x08000a53
 80009f8:	08000a1f 	.word	0x08000a1f
 80009fc:	08000a05 	.word	0x08000a05
 8000a00:	08000a53 	.word	0x08000a53
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a04:	4b73      	ldr	r3, [pc, #460]	; (8000bd4 <TikTokGame+0x2a0>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000a0a:	4b70      	ldr	r3, [pc, #448]	; (8000bcc <TikTokGame+0x298>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a10:	4b71      	ldr	r3, [pc, #452]	; (8000bd8 <TikTokGame+0x2a4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a16:	4b6c      	ldr	r3, [pc, #432]	; (8000bc8 <TikTokGame+0x294>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
    	                break;
 8000a1c:	e01a      	b.n	8000a54 <TikTokGame+0x120>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000a1e:	4b6d      	ldr	r3, [pc, #436]	; (8000bd4 <TikTokGame+0x2a0>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000a24:	4b69      	ldr	r3, [pc, #420]	; (8000bcc <TikTokGame+0x298>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a2a:	4b6b      	ldr	r3, [pc, #428]	; (8000bd8 <TikTokGame+0x2a4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a30:	4b65      	ldr	r3, [pc, #404]	; (8000bc8 <TikTokGame+0x294>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
    	                break;
 8000a36:	e00d      	b.n	8000a54 <TikTokGame+0x120>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <TikTokGame+0x2a0>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000a3e:	4b63      	ldr	r3, [pc, #396]	; (8000bcc <TikTokGame+0x298>)
 8000a40:	2205      	movs	r2, #5
 8000a42:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a44:	4b64      	ldr	r3, [pc, #400]	; (8000bd8 <TikTokGame+0x2a4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000a4a:	4b5f      	ldr	r3, [pc, #380]	; (8000bc8 <TikTokGame+0x294>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
    	                break;
 8000a50:	e000      	b.n	8000a54 <TikTokGame+0x120>
    	            default: // multi press do nothing
    	                break;
 8000a52:	bf00      	nop
    	        }
    	        break;
 8000a54:	e0b3      	b.n	8000bbe <TikTokGame+0x28a>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000a56:	4b5e      	ldr	r3, [pc, #376]	; (8000bd0 <TikTokGame+0x29c>)
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	3b03      	subs	r3, #3
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d834      	bhi.n	8000aca <TikTokGame+0x196>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <TikTokGame+0x134>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000ab1 	.word	0x08000ab1
 8000a6c:	08000acb 	.word	0x08000acb
 8000a70:	08000a97 	.word	0x08000a97
 8000a74:	08000a7d 	.word	0x08000a7d
 8000a78:	08000acb 	.word	0x08000acb
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a7c:	4b55      	ldr	r3, [pc, #340]	; (8000bd4 <TikTokGame+0x2a0>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000a82:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <TikTokGame+0x298>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a88:	4b53      	ldr	r3, [pc, #332]	; (8000bd8 <TikTokGame+0x2a4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a8e:	4b4e      	ldr	r3, [pc, #312]	; (8000bc8 <TikTokGame+0x294>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
    	                break;
 8000a94:	e01a      	b.n	8000acc <TikTokGame+0x198>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000a96:	4b4f      	ldr	r3, [pc, #316]	; (8000bd4 <TikTokGame+0x2a0>)
 8000a98:	2202      	movs	r2, #2
 8000a9a:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000a9c:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <TikTokGame+0x298>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <TikTokGame+0x2a4>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000aa8:	4b47      	ldr	r3, [pc, #284]	; (8000bc8 <TikTokGame+0x294>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
    	                break;
 8000aae:	e00d      	b.n	8000acc <TikTokGame+0x198>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000ab0:	4b48      	ldr	r3, [pc, #288]	; (8000bd4 <TikTokGame+0x2a0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000ab6:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <TikTokGame+0x298>)
 8000ab8:	2205      	movs	r2, #5
 8000aba:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000abc:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <TikTokGame+0x2a4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <TikTokGame+0x294>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
    	                break;
 8000ac8:	e000      	b.n	8000acc <TikTokGame+0x198>
    	            default: // multi press do nothing
    	                break;
 8000aca:	bf00      	nop
    	        }
    	        break;
 8000acc:	e077      	b.n	8000bbe <TikTokGame+0x28a>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000ace:	4b40      	ldr	r3, [pc, #256]	; (8000bd0 <TikTokGame+0x29c>)
 8000ad0:	789b      	ldrb	r3, [r3, #2]
 8000ad2:	3b03      	subs	r3, #3
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d834      	bhi.n	8000b42 <TikTokGame+0x20e>
 8000ad8:	a201      	add	r2, pc, #4	; (adr r2, 8000ae0 <TikTokGame+0x1ac>)
 8000ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ade:	bf00      	nop
 8000ae0:	08000b29 	.word	0x08000b29
 8000ae4:	08000b43 	.word	0x08000b43
 8000ae8:	08000b0f 	.word	0x08000b0f
 8000aec:	08000af5 	.word	0x08000af5
 8000af0:	08000b43 	.word	0x08000b43
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000af4:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <TikTokGame+0x2a0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <TikTokGame+0x298>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000b00:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <TikTokGame+0x2a4>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <TikTokGame+0x294>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
    	                break;
 8000b0c:	e01a      	b.n	8000b44 <TikTokGame+0x210>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <TikTokGame+0x2a0>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000b14:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <TikTokGame+0x298>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <TikTokGame+0x2a4>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000b20:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <TikTokGame+0x294>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
    	                break;
 8000b26:	e00d      	b.n	8000b44 <TikTokGame+0x210>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000b28:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <TikTokGame+0x2a0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000b2e:	4b27      	ldr	r3, [pc, #156]	; (8000bcc <TikTokGame+0x298>)
 8000b30:	2205      	movs	r2, #5
 8000b32:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <TikTokGame+0x2a4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <TikTokGame+0x294>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
    	                break;
 8000b40:	e000      	b.n	8000b44 <TikTokGame+0x210>
    	            default: // multi press do nothing
    	                break;
 8000b42:	bf00      	nop
    	        }
    	        break;
 8000b44:	e03b      	b.n	8000bbe <TikTokGame+0x28a>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <TikTokGame+0x298>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	d833      	bhi.n	8000bb8 <TikTokGame+0x284>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <TikTokGame+0x224>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000ba5 	.word	0x08000ba5
 8000b5c:	08000b91 	.word	0x08000b91
 8000b60:	08000b7d 	.word	0x08000b7d
 8000b64:	08000b69 	.word	0x08000b69
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <TikTokGame+0x2a0>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <TikTokGame+0x298>)
 8000b70:	2203      	movs	r2, #3
 8000b72:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <TikTokGame+0x2a4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
                break;
 8000b7a:	e01d      	b.n	8000bb8 <TikTokGame+0x284>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <TikTokGame+0x2a0>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <TikTokGame+0x298>)
 8000b84:	2202      	movs	r2, #2
 8000b86:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <TikTokGame+0x2a4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
                break;
 8000b8e:	e013      	b.n	8000bb8 <TikTokGame+0x284>
            case 2:
                // statements
                game_pick = 2; // pick2
 8000b90:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <TikTokGame+0x2a0>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <TikTokGame+0x298>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <TikTokGame+0x2a4>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
                break;
 8000ba2:	e009      	b.n	8000bb8 <TikTokGame+0x284>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <TikTokGame+0x2a0>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <TikTokGame+0x298>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <TikTokGame+0x2a4>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	601a      	str	r2, [r3, #0]
                break;
 8000bb6:	bf00      	nop
        }
        game_turn = 0;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <TikTokGame+0x294>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
    }
    HAL_Delay(100);//delay
 8000bbe:	2064      	movs	r0, #100	; 0x64
 8000bc0:	f000 fa52 	bl	8001068 <HAL_Delay>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000018c 	.word	0x2000018c
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000170 	.word	0x20000170
 8000bd4:	20000190 	.word	0x20000190
 8000bd8:	20000188 	.word	0x20000188

08000bdc <LEDdisplay>:

void LEDdisplay(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	SPITx[0] = 0b01000000;//write
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <LEDdisplay+0xac>)
 8000be2:	2240      	movs	r2, #64	; 0x40
 8000be4:	701a      	strb	r2, [r3, #0]
	SPITx[1] = 0x15;//OLATB
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <LEDdisplay+0xac>)
 8000be8:	2215      	movs	r2, #21
 8000bea:	705a      	strb	r2, [r3, #1]
	switch (game_winner) {
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <LEDdisplay+0xb0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d044      	beq.n	8000c7e <LEDdisplay+0xa2>
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	dc45      	bgt.n	8000c84 <LEDdisplay+0xa8>
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d042      	beq.n	8000c82 <LEDdisplay+0xa6>
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d000      	beq.n	8000c02 <LEDdisplay+0x26>
	            // Human wins
	            // Add code for the case when the human wins
	            break;
	    }
    // For example:
}
 8000c00:	e040      	b.n	8000c84 <LEDdisplay+0xa8>
	        	SPITx[2] = 0b00111111;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <LEDdisplay+0xac>)
 8000c04:	223f      	movs	r2, #63	; 0x3f
 8000c06:	709a      	strb	r2, [r3, #2]
	        	HAL_Delay(1000);//delay
 8000c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0c:	f000 fa2c 	bl	8001068 <HAL_Delay>
	        	SPITx[2] = 0b00000000;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <LEDdisplay+0xac>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	709a      	strb	r2, [r3, #2]
	        	HAL_Delay(1000);//delay
 8000c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1a:	f000 fa25 	bl	8001068 <HAL_Delay>
	        	SPITx[2] = 0b00111111;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <LEDdisplay+0xac>)
 8000c20:	223f      	movs	r2, #63	; 0x3f
 8000c22:	709a      	strb	r2, [r3, #2]
	        	HAL_Delay(1000);//delay
 8000c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c28:	f000 fa1e 	bl	8001068 <HAL_Delay>
	        	SPITx[2] = 0b00000000;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <LEDdisplay+0xac>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	709a      	strb	r2, [r3, #2]
	        	HAL_Delay(1000);//delay
 8000c32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c36:	f000 fa17 	bl	8001068 <HAL_Delay>
	        	SPITx[2] = 0b00111111;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <LEDdisplay+0xac>)
 8000c3c:	223f      	movs	r2, #63	; 0x3f
 8000c3e:	709a      	strb	r2, [r3, #2]
	        	HAL_Delay(1000);//delay
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 fa10 	bl	8001068 <HAL_Delay>
	        	SPITx[2] = 0b00000000;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <LEDdisplay+0xac>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	709a      	strb	r2, [r3, #2]
	        	HAL_Delay(1000);//delay
 8000c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c52:	f000 fa09 	bl	8001068 <HAL_Delay>
	        	SPITx[2] = 0b00111111;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LEDdisplay+0xac>)
 8000c58:	223f      	movs	r2, #63	; 0x3f
 8000c5a:	709a      	strb	r2, [r3, #2]
	        	HAL_Delay(1000);//delay
 8000c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c60:	f000 fa02 	bl	8001068 <HAL_Delay>
                game_pick = 0; // no pick
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <LEDdisplay+0xb4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <LEDdisplay+0xb8>)
 8000c6c:	2205      	movs	r2, #5
 8000c6e:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <LEDdisplay+0xb0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <LEDdisplay+0xbc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
	            break;
 8000c7c:	e002      	b.n	8000c84 <LEDdisplay+0xa8>
	            break;
 8000c7e:	bf00      	nop
 8000c80:	e000      	b.n	8000c84 <LEDdisplay+0xa8>
	            break;
 8000c82:	bf00      	nop
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000017c 	.word	0x2000017c
 8000c8c:	20000188 	.word	0x20000188
 8000c90:	20000190 	.word	0x20000190
 8000c94:	20000000 	.word	0x20000000
 8000c98:	2000018c 	.word	0x2000018c

08000c9c <HAL_SPI_TxRxCpltCallback>:
HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2104      	movs	r1, #4
 8000ca8:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000caa:	f000 fd0f 	bl	80016cc <HAL_GPIO_WritePin>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	48000c00 	.word	0x48000c00

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <Error_Handler+0x8>
	...

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x44>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x44>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cfe:	f000 fdc5 	bl	800188c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b09e      	sub	sp, #120	; 0x78
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	2254      	movs	r2, #84	; 0x54
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fc91 	bl	8004658 <memset>
  if(huart->Instance==LPUART1)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a1f      	ldr	r2, [pc, #124]	; (8000db8 <HAL_UART_MspInit+0xa8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d136      	bne.n	8000dae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d40:	2320      	movs	r3, #32
 8000d42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 fadb 	bl	8002308 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d58:	f7ff ffb0 	bl	8000cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d60:	4a16      	ldr	r2, [pc, #88]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <HAL_UART_MspInit+0xac>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 faf5 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	3778      	adds	r7, #120	; 0x78
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40008000 	.word	0x40008000
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_SPI_MspInit+0x8c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d130      	bne.n	8000e44 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_SPI_MspInit+0x90>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_SPI_MspInit+0x90>)
 8000de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_SPI_MspInit+0x90>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_SPI_MspInit+0x90>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <HAL_SPI_MspInit+0x90>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_SPI_MspInit+0x90>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e12:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e24:	2306      	movs	r3, #6
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_SPI_MspInit+0x94>)
 8000e30:	f000 fab2 	bl	8001398 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2033      	movs	r0, #51	; 0x33
 8000e3a:	f000 fa12 	bl	8001262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000e3e:	2033      	movs	r0, #51	; 0x33
 8000e40:	f000 fa29 	bl	8001296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40003c00 	.word	0x40003c00
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000800 	.word	0x48000800

08000e58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_TIM_Base_MspInit+0x38>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10b      	bne.n	8000e82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <HAL_TIM_Base_MspInit+0x3c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_TIM_Base_MspInit+0x3c>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40000400 	.word	0x40000400
 8000e94:	40021000 	.word	0x40021000

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 f8a2 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ef0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ef4:	f000 fc02 	bl	80016fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <SPI3_IRQHandler+0x10>)
 8000f02:	f001 fda9 	bl	8002a58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200000c0 	.word	0x200000c0

08000f10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	; (8000f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	; (8000f80 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f003 fb81 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f66:	f7ff fad5 	bl	8000514 <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   r0, =_estack
 8000f6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f78:	08004718 	.word	0x08004718
  ldr r2, =_sbss
 8000f7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f80:	20000198 	.word	0x20000198

08000f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_2_IRQHandler>

08000f86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 f95b 	bl	800124c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f80e 	bl	8000fb8 <HAL_InitTick>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	71fb      	strb	r3, [r7, #7]
 8000fa6:	e001      	b.n	8000fac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa8:	f7ff fe8e 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fac:	79fb      	ldrb	r3, [r7, #7]

}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_InitTick+0x68>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d022      	beq.n	8001012 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_InitTick+0x6c>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_InitTick+0x68>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f966 	bl	80012b2 <HAL_SYSTICK_Config>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	d809      	bhi.n	8001006 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffa:	f000 f932 	bl	8001262 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_InitTick+0x70>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e007      	b.n	8001016 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e004      	b.n	8001016 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	e001      	b.n	8001016 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2000000c 	.word	0x2000000c
 8001024:	20000004 	.word	0x20000004
 8001028:	20000008 	.word	0x20000008

0800102c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_IncTick+0x1c>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x20>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4413      	add	r3, r2
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <HAL_IncTick+0x1c>)
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000194 	.word	0x20000194
 800104c:	2000000c 	.word	0x2000000c

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000194 	.word	0x20000194

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001080:	d004      	beq.n	800108c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_Delay+0x40>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4413      	add	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800108c:	bf00      	nop
 800108e:	f7ff ffdf 	bl	8001050 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	429a      	cmp	r2, r3
 800109c:	d8f7      	bhi.n	800108e <HAL_Delay+0x26>
  {
  }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000000c 	.word	0x2000000c

080010ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c8:	4013      	ands	r3, r2
 80010ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <__NVIC_SetPriorityGrouping+0x44>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <__NVIC_GetPriorityGrouping+0x18>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	0a1b      	lsrs	r3, r3, #8
 80010fe:	f003 0307 	and.w	r3, r3, #7
}
 8001102:	4618      	mov	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db0b      	blt.n	800113a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <__NVIC_EnableIRQ+0x38>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	; (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	; 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
         );
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001218:	d301      	bcc.n	800121e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121a:	2301      	movs	r3, #1
 800121c:	e00f      	b.n	800123e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <SysTick_Config+0x40>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001226:	210f      	movs	r1, #15
 8001228:	f04f 30ff 	mov.w	r0, #4294967295
 800122c:	f7ff ff8e 	bl	800114c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SysTick_Config+0x40>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SysTick_Config+0x40>)
 8001238:	2207      	movs	r2, #7
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	e000e010 	.word	0xe000e010

0800124c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff29 	bl	80010ac <__NVIC_SetPriorityGrouping>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff40 	bl	80010f4 <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff90 	bl	80011a0 <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5f 	bl	800114c <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	4603      	mov	r3, r0
 800129e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff33 	bl	8001110 <__NVIC_EnableIRQ>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffa4 	bl	8001208 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d00d      	beq.n	80012fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2204      	movs	r2, #4
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e047      	b.n	800138e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 020e 	bic.w	r2, r2, #14
 800130c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800132c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f003 021f 	and.w	r2, r3, #31
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f202 	lsl.w	r2, r1, r2
 8001340:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800134a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00c      	beq.n	800136e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001362:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800136c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
    }
  }
  return status;
 800138e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013a6:	e15a      	b.n	800165e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 814c 	beq.w	8001658 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d005      	beq.n	80013d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d130      	bne.n	800143a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140e:	2201      	movs	r2, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	f003 0201 	and.w	r2, r3, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b03      	cmp	r3, #3
 8001444:	d017      	beq.n	8001476 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	2203      	movs	r2, #3
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d123      	bne.n	80014ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	08da      	lsrs	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3208      	adds	r2, #8
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	6939      	ldr	r1, [r7, #16]
 80014c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0203 	and.w	r2, r3, #3
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80a6 	beq.w	8001658 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b5b      	ldr	r3, [pc, #364]	; (800167c <HAL_GPIO_Init+0x2e4>)
 800150e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001510:	4a5a      	ldr	r2, [pc, #360]	; (800167c <HAL_GPIO_Init+0x2e4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6613      	str	r3, [r2, #96]	; 0x60
 8001518:	4b58      	ldr	r3, [pc, #352]	; (800167c <HAL_GPIO_Init+0x2e4>)
 800151a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001524:	4a56      	ldr	r2, [pc, #344]	; (8001680 <HAL_GPIO_Init+0x2e8>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154e:	d01f      	beq.n	8001590 <HAL_GPIO_Init+0x1f8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_GPIO_Init+0x2ec>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d019      	beq.n	800158c <HAL_GPIO_Init+0x1f4>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4b      	ldr	r2, [pc, #300]	; (8001688 <HAL_GPIO_Init+0x2f0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d013      	beq.n	8001588 <HAL_GPIO_Init+0x1f0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a4a      	ldr	r2, [pc, #296]	; (800168c <HAL_GPIO_Init+0x2f4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d00d      	beq.n	8001584 <HAL_GPIO_Init+0x1ec>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a49      	ldr	r2, [pc, #292]	; (8001690 <HAL_GPIO_Init+0x2f8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d007      	beq.n	8001580 <HAL_GPIO_Init+0x1e8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a48      	ldr	r2, [pc, #288]	; (8001694 <HAL_GPIO_Init+0x2fc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d101      	bne.n	800157c <HAL_GPIO_Init+0x1e4>
 8001578:	2305      	movs	r3, #5
 800157a:	e00a      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 800157c:	2306      	movs	r3, #6
 800157e:	e008      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001580:	2304      	movs	r3, #4
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001584:	2303      	movs	r3, #3
 8001586:	e004      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001588:	2302      	movs	r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_GPIO_Init+0x1fa>
 8001590:	2300      	movs	r3, #0
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	f002 0203 	and.w	r2, r2, #3
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	4093      	lsls	r3, r2
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a2:	4937      	ldr	r1, [pc, #220]	; (8001680 <HAL_GPIO_Init+0x2e8>)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d4:	4a30      	ldr	r2, [pc, #192]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_GPIO_Init+0x300>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015fe:	4a26      	ldr	r2, [pc, #152]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	43db      	mvns	r3, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4013      	ands	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <HAL_GPIO_Init+0x300>)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001652:	4a11      	ldr	r2, [pc, #68]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	2b00      	cmp	r3, #0
 800166a:	f47f ae9d 	bne.w	80013a8 <HAL_GPIO_Init+0x10>
  }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	371c      	adds	r7, #28
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	48000400 	.word	0x48000400
 8001688:	48000800 	.word	0x48000800
 800168c:	48000c00 	.word	0x48000c00
 8001690:	48001000 	.word	0x48001000
 8001694:	48001400 	.word	0x48001400
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e001      	b.n	80016be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4618      	mov	r0, r3
 800171c:	f000 f806 	bl	800172c <HAL_GPIO_EXTI_Callback>
  }
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010400 	.word	0x40010400

0800172c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d141      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001752:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175e:	d131      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001760:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001766:	4a46      	ldr	r2, [pc, #280]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800176c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001778:	4a41      	ldr	r2, [pc, #260]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2232      	movs	r2, #50	; 0x32
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	4a3f      	ldr	r2, [pc, #252]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001796:	e002      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3b01      	subs	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d102      	bne.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f2      	bne.n	8001798 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017be:	d158      	bne.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e057      	b.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c4:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ca:	4a2d      	ldr	r2, [pc, #180]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017d4:	e04d      	b.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017dc:	d141      	bne.n	8001862 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017de:	4b28      	ldr	r3, [pc, #160]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ea:	d131      	bne.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017f2:	4a23      	ldr	r2, [pc, #140]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001804:	4a1e      	ldr	r2, [pc, #120]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2232      	movs	r2, #50	; 0x32
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	0c9b      	lsrs	r3, r3, #18
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001822:	e002      	b.n	800182a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3b01      	subs	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001836:	d102      	bne.n	800183e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f2      	bne.n	8001824 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d112      	bne.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e011      	b.n	8001874 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001860:	e007      	b.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001870:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40007000 	.word	0x40007000
 8001884:	20000004 	.word	0x20000004
 8001888:	431bde83 	.word	0x431bde83

0800188c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189a:	6093      	str	r3, [r2, #8]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000

080018ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e2fe      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d075      	beq.n	80019b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4b97      	ldr	r3, [pc, #604]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d4:	4b94      	ldr	r3, [pc, #592]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b0c      	cmp	r3, #12
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0x3e>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_OscConfig+0x44>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d10b      	bne.n	8001908 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	4b8d      	ldr	r3, [pc, #564]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d05b      	beq.n	80019b4 <HAL_RCC_OscConfig+0x108>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d157      	bne.n	80019b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e2d9      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d106      	bne.n	8001920 <HAL_RCC_OscConfig+0x74>
 8001912:	4b85      	ldr	r3, [pc, #532]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a84      	ldr	r2, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e01d      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001928:	d10c      	bne.n	8001944 <HAL_RCC_OscConfig+0x98>
 800192a:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a7e      	ldr	r2, [pc, #504]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7b      	ldr	r2, [pc, #492]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e00b      	b.n	800195c <HAL_RCC_OscConfig+0xb0>
 8001944:	4b78      	ldr	r3, [pc, #480]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a77      	ldr	r2, [pc, #476]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 800194a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b75      	ldr	r3, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a74      	ldr	r2, [pc, #464]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fb74 	bl	8001050 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fb70 	bl	8001050 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	; 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e29e      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197e:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0xc0>
 800198a:	e014      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb60 	bl	8001050 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fb5c 	bl	8001050 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e28a      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a6:	4b60      	ldr	r3, [pc, #384]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0xe8>
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d075      	beq.n	8001aae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c2:	4b59      	ldr	r3, [pc, #356]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019cc:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2b0c      	cmp	r3, #12
 80019da:	d102      	bne.n	80019e2 <HAL_RCC_OscConfig+0x136>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d002      	beq.n	80019e8 <HAL_RCC_OscConfig+0x13c>
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d11f      	bne.n	8001a28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e8:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_OscConfig+0x154>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e25d      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b49      	ldr	r3, [pc, #292]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	061b      	lsls	r3, r3, #24
 8001a0e:	4946      	ldr	r1, [pc, #280]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a14:	4b45      	ldr	r3, [pc, #276]	; (8001b2c <HAL_RCC_OscConfig+0x280>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff facd 	bl	8000fb8 <HAL_InitTick>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d043      	beq.n	8001aac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e249      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d023      	beq.n	8001a78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a30:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a3c      	ldr	r2, [pc, #240]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fb08 	bl	8001050 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a44:	f7ff fb04 	bl	8001050 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e232      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	061b      	lsls	r3, r3, #24
 8001a70:	492d      	ldr	r1, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
 8001a76:	e01a      	b.n	8001aae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2a      	ldr	r2, [pc, #168]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fae4 	bl	8001050 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fae0 	bl	8001050 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e20e      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1e0>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d041      	beq.n	8001b3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d01c      	beq.n	8001afc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fabd 	bl	8001050 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ada:	f7ff fab9 	bl	8001050 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1e7      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0ef      	beq.n	8001ada <HAL_RCC_OscConfig+0x22e>
 8001afa:	e020      	b.n	8001b3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	f023 0301 	bic.w	r3, r3, #1
 8001b08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0c:	f7ff faa0 	bl	8001050 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b12:	e00d      	b.n	8001b30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b14:	f7ff fa9c 	bl	8001050 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d906      	bls.n	8001b30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1ca      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b30:	4b8c      	ldr	r3, [pc, #560]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ea      	bne.n	8001b14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80a6 	beq.w	8001c98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b50:	4b84      	ldr	r3, [pc, #528]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2b4>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x2b6>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00d      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b7f      	ldr	r3, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	4a7e      	ldr	r2, [pc, #504]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	6593      	str	r3, [r2, #88]	; 0x58
 8001b72:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b82:	4b79      	ldr	r3, [pc, #484]	; (8001d68 <HAL_RCC_OscConfig+0x4bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d118      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8e:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <HAL_RCC_OscConfig+0x4bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a75      	ldr	r2, [pc, #468]	; (8001d68 <HAL_RCC_OscConfig+0x4bc>)
 8001b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fa59 	bl	8001050 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba2:	f7ff fa55 	bl	8001050 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e183      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb4:	4b6c      	ldr	r3, [pc, #432]	; (8001d68 <HAL_RCC_OscConfig+0x4bc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d108      	bne.n	8001bda <HAL_RCC_OscConfig+0x32e>
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a65      	ldr	r2, [pc, #404]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd8:	e024      	b.n	8001c24 <HAL_RCC_OscConfig+0x378>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d110      	bne.n	8001c04 <HAL_RCC_OscConfig+0x358>
 8001be2:	4b60      	ldr	r3, [pc, #384]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be8:	4a5e      	ldr	r2, [pc, #376]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf2:	4b5c      	ldr	r3, [pc, #368]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	4a5a      	ldr	r2, [pc, #360]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_OscConfig+0x378>
 8001c04:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0a:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	4a52      	ldr	r2, [pc, #328]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d016      	beq.n	8001c5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff fa10 	bl	8001050 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff fa0c 	bl	8001050 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e138      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c4a:	4b46      	ldr	r3, [pc, #280]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ed      	beq.n	8001c34 <HAL_RCC_OscConfig+0x388>
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f9f9 	bl	8001050 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff f9f5 	bl	8001050 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e121      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1ed      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d105      	bne.n	8001c98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8c:	4b35      	ldr	r3, [pc, #212]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c90:	4a34      	ldr	r2, [pc, #208]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0320 	and.w	r3, r3, #32
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d03c      	beq.n	8001d1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb2:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f9c8 	bl	8001050 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc4:	f7ff f9c4 	bl	8001050 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0f2      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ef      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x418>
 8001ce4:	e01b      	b.n	8001d1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf6:	f7ff f9ab 	bl	8001050 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfe:	f7ff f9a7 	bl	8001050 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0d5      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1ef      	bne.n	8001cfe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80c9 	beq.w	8001eba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	f000 8083 	beq.w	8001e3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d15e      	bne.n	8001dfc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff f981 	bl	8001050 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	e00c      	b.n	8001d6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d52:	f7ff f97d 	bl	8001050 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d905      	bls.n	8001d6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e0ab      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ec      	bne.n	8001d52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d78:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <HAL_RCC_OscConfig+0x61c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6a11      	ldr	r1, [r2, #32]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d88:	3a01      	subs	r2, #1
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d92:	0212      	lsls	r2, r2, #8
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d9a:	0852      	lsrs	r2, r2, #1
 8001d9c:	3a01      	subs	r2, #1
 8001d9e:	0552      	lsls	r2, r2, #21
 8001da0:	4311      	orrs	r1, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001da6:	0852      	lsrs	r2, r2, #1
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0652      	lsls	r2, r2, #25
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001db2:	06d2      	lsls	r2, r2, #27
 8001db4:	430a      	orrs	r2, r1
 8001db6:	4943      	ldr	r1, [pc, #268]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a40      	ldr	r2, [pc, #256]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f93c 	bl	8001050 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f938 	bl	8001050 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e066      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x530>
 8001dfa:	e05e      	b.n	8001eba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a30      	ldr	r2, [pc, #192]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f922 	bl	8001050 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f91e 	bl	8001050 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e04c      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e2e:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	4924      	ldr	r1, [pc, #144]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_RCC_OscConfig+0x620>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	60cb      	str	r3, [r1, #12]
 8001e3a:	e03e      	b.n	8001eba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e039      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x618>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d12c      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	3b01      	subs	r3, #1
 8001e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d123      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d11b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d113      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	085b      	lsrs	r3, r3, #1
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3720      	adds	r7, #32
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	019f800c 	.word	0x019f800c
 8001ecc:	feeefffc 	.word	0xfeeefffc

08001ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e11e      	b.n	8002126 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b91      	ldr	r3, [pc, #580]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b8e      	ldr	r3, [pc, #568]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 020f 	bic.w	r2, r3, #15
 8001efe:	498c      	ldr	r1, [pc, #560]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b8a      	ldr	r3, [pc, #552]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e106      	b.n	8002126 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d073      	beq.n	800200c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d129      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2c:	4b81      	ldr	r3, [pc, #516]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0f4      	b.n	8002126 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f3c:	f000 f99e 	bl	800227c <RCC_GetSysClockFreqFromPLLSource>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4a7c      	ldr	r2, [pc, #496]	; (8002138 <HAL_RCC_ClockConfig+0x268>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d93f      	bls.n	8001fca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d033      	beq.n	8001fca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d12f      	bne.n	8001fca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f6a:	4b72      	ldr	r3, [pc, #456]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f72:	4a70      	ldr	r2, [pc, #448]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e024      	b.n	8001fca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f88:	4b6a      	ldr	r3, [pc, #424]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0c6      	b.n	8002126 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f98:	4b66      	ldr	r3, [pc, #408]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0be      	b.n	8002126 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fa8:	f000 f8ce 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4a61      	ldr	r2, [pc, #388]	; (8002138 <HAL_RCC_ClockConfig+0x268>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d909      	bls.n	8001fca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fbe:	4a5d      	ldr	r2, [pc, #372]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4957      	ldr	r1, [pc, #348]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f838 	bl	8001050 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff f834 	bl	8001050 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e095      	b.n	8002126 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b4e      	ldr	r3, [pc, #312]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d023      	beq.n	8002060 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a42      	ldr	r2, [pc, #264]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 800202a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d007      	beq.n	800204c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800203c:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8002046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800204a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	4936      	ldr	r1, [pc, #216]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
 800205e:	e008      	b.n	8002072 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d105      	bne.n	8002072 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	4a32      	ldr	r2, [pc, #200]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002070:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002072:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d21d      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 020f 	bic.w	r2, r3, #15
 8002088:	4929      	ldr	r1, [pc, #164]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002090:	f7fe ffde 	bl	8001050 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7fe ffda 	bl	8001050 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e03b      	b.n	8002126 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x260>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d1ed      	bne.n	8002098 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4917      	ldr	r1, [pc, #92]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490f      	ldr	r1, [pc, #60]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020fa:	f000 f825 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_RCC_ClockConfig+0x264>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490c      	ldr	r1, [pc, #48]	; (800213c <HAL_RCC_ClockConfig+0x26c>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	f003 031f 	and.w	r3, r3, #31
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x270>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x274>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe ff4a 	bl	8000fb8 <HAL_InitTick>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40022000 	.word	0x40022000
 8002134:	40021000 	.word	0x40021000
 8002138:	04c4b400 	.word	0x04c4b400
 800213c:	080046c8 	.word	0x080046c8
 8002140:	20000004 	.word	0x20000004
 8002144:	20000008 	.word	0x20000008

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	b480      	push	{r7}
 800214a:	b087      	sub	sp, #28
 800214c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d102      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_GetSysClockFreq+0xbc>)
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	e047      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d102      	bne.n	8002172 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800216c:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e03e      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002172:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d136      	bne.n	80021ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002188:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3301      	adds	r3, #1
 8002194:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d10c      	bne.n	80021b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <HAL_RCC_GetSysClockFreq+0xc0>)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	4a16      	ldr	r2, [pc, #88]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a6:	68d2      	ldr	r2, [r2, #12]
 80021a8:	0a12      	lsrs	r2, r2, #8
 80021aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ae:	fb02 f303 	mul.w	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
      break;
 80021b4:	e00c      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b6:	4a13      	ldr	r2, [pc, #76]	; (8002204 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021c0:	68d2      	ldr	r2, [r2, #12]
 80021c2:	0a12      	lsrs	r2, r2, #8
 80021c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
      break;
 80021ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0e5b      	lsrs	r3, r3, #25
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	3301      	adds	r3, #1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	e001      	b.n	80021f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021f0:	693b      	ldr	r3, [r7, #16]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	00f42400 	.word	0x00f42400
 8002208:	016e3600 	.word	0x016e3600

0800220c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <HAL_RCC_GetHCLKFreq+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002228:	f7ff fff0 	bl	800220c <HAL_RCC_GetHCLKFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	4904      	ldr	r1, [pc, #16]	; (800224c <HAL_RCC_GetPCLK1Freq+0x28>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	080046d8 	.word	0x080046d8

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002254:	f7ff ffda 	bl	800220c <HAL_RCC_GetHCLKFreq>
 8002258:	4602      	mov	r2, r0
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0adb      	lsrs	r3, r3, #11
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4904      	ldr	r1, [pc, #16]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002266:	5ccb      	ldrb	r3, [r1, r3]
 8002268:	f003 031f 	and.w	r3, r3, #31
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	080046d8 	.word	0x080046d8

0800227c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3301      	adds	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d10c      	bne.n	80022ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a0:	4a17      	ldr	r2, [pc, #92]	; (8002300 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022aa:	68d2      	ldr	r2, [r2, #12]
 80022ac:	0a12      	lsrs	r2, r2, #8
 80022ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b2:	fb02 f303 	mul.w	r3, r2, r3
 80022b6:	617b      	str	r3, [r7, #20]
    break;
 80022b8:	e00c      	b.n	80022d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c4:	68d2      	ldr	r2, [r2, #12]
 80022c6:	0a12      	lsrs	r2, r2, #8
 80022c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    break;
 80022d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0e5b      	lsrs	r3, r3, #25
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	3301      	adds	r3, #1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022ee:	687b      	ldr	r3, [r7, #4]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40021000 	.word	0x40021000
 8002300:	016e3600 	.word	0x016e3600
 8002304:	00f42400 	.word	0x00f42400

08002308 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002310:	2300      	movs	r3, #0
 8002312:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002314:	2300      	movs	r3, #0
 8002316:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8098 	beq.w	8002456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232a:	4b43      	ldr	r3, [pc, #268]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10d      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	4b40      	ldr	r3, [pc, #256]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a3f      	ldr	r2, [pc, #252]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
 8002342:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002352:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a39      	ldr	r2, [pc, #228]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800235e:	f7fe fe77 	bl	8001050 <HAL_GetTick>
 8002362:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002364:	e009      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002366:	f7fe fe73 	bl	8001050 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d902      	bls.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	74fb      	strb	r3, [r7, #19]
        break;
 8002378:	e005      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ef      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d159      	bne.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800238c:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d01e      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d019      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023a8:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b4:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a1f      	ldr	r2, [pc, #124]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a1b      	ldr	r2, [pc, #108]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7fe fe33 	bl	8001050 <HAL_GetTick>
 80023ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ec:	e00b      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fe2f 	bl	8001050 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d902      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	74fb      	strb	r3, [r7, #19]
            break;
 8002404:	e006      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ec      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002430:	e008      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	74bb      	strb	r3, [r7, #18]
 8002436:	e005      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002444:	7c7b      	ldrb	r3, [r7, #17]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d105      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244a:	4ba7      	ldr	r3, [pc, #668]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	4aa6      	ldr	r2, [pc, #664]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002454:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002462:	4ba1      	ldr	r3, [pc, #644]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f023 0203 	bic.w	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	499d      	ldr	r1, [pc, #628]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002484:	4b98      	ldr	r3, [pc, #608]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f023 020c 	bic.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4995      	ldr	r1, [pc, #596]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024a6:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	498c      	ldr	r1, [pc, #560]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c8:	4b87      	ldr	r3, [pc, #540]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	4984      	ldr	r1, [pc, #528]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ea:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	497b      	ldr	r1, [pc, #492]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800250c:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	4973      	ldr	r1, [pc, #460]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252e:	4b6e      	ldr	r3, [pc, #440]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	496a      	ldr	r1, [pc, #424]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00a      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002550:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4962      	ldr	r1, [pc, #392]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002572:	4b5d      	ldr	r3, [pc, #372]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	4959      	ldr	r1, [pc, #356]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002594:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800259a:	f023 0203 	bic.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	4951      	ldr	r1, [pc, #324]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025b6:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	4948      	ldr	r1, [pc, #288]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d8:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4940      	ldr	r1, [pc, #256]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f6:	d105      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a3a      	ldr	r2, [pc, #232]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002602:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002610:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	4932      	ldr	r1, [pc, #200]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262e:	d105      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a2c      	ldr	r2, [pc, #176]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800263a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d015      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	4924      	ldr	r1, [pc, #144]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002666:	d105      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002672:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002686:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268e:	4916      	ldr	r1, [pc, #88]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800269e:	d105      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d019      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4908      	ldr	r1, [pc, #32]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d6:	d109      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a02      	ldr	r2, [pc, #8]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
 80026e4:	e002      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026e6:	bf00      	nop
 80026e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d015      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026f8:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4926      	ldr	r1, [pc, #152]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002716:	d105      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002718:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273e:	4918      	ldr	r1, [pc, #96]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800276a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800276e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	490a      	ldr	r1, [pc, #40]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a04      	ldr	r2, [pc, #16]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002794:	7cbb      	ldrb	r3, [r7, #18]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e09d      	b.n	80028f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c6:	d009      	beq.n	80027dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
 80027ce:	e005      	b.n	80027dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fae2 	bl	8000dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800281c:	d902      	bls.n	8002824 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	e002      	b.n	800282a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002828:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002832:	d007      	beq.n	8002844 <HAL_SPI_Init+0xa0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800283c:	d002      	beq.n	8002844 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800287c:	431a      	orrs	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002886:	ea42 0103 	orr.w	r1, r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	0c1b      	lsrs	r3, r3, #16
 80028a0:	f003 0204 	and.w	r2, r3, #4
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028c0:	ea42 0103 	orr.w	r1, r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	69da      	ldr	r2, [r3, #28]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002914:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800291c:	7dbb      	ldrb	r3, [r7, #22]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d00d      	beq.n	800293e <HAL_SPI_TransmitReceive_IT+0x42>
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002928:	d106      	bne.n	8002938 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002932:	7dbb      	ldrb	r3, [r7, #22]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d002      	beq.n	800293e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800293c:	e07d      	b.n	8002a3a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_SPI_TransmitReceive_IT+0x54>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_SPI_TransmitReceive_IT+0x54>
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d102      	bne.n	8002956 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002954:	e071      	b.n	8002a3a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_SPI_TransmitReceive_IT+0x68>
 8002960:	2302      	movs	r3, #2
 8002962:	e06b      	b.n	8002a3c <HAL_SPI_TransmitReceive_IT+0x140>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b04      	cmp	r3, #4
 8002976:	d003      	beq.n	8002980 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2205      	movs	r2, #5
 800297c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	887a      	ldrh	r2, [r7, #2]
 8002990:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	887a      	ldrh	r2, [r7, #2]
 8002996:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	887a      	ldrh	r2, [r7, #2]
 80029a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	887a      	ldrh	r2, [r7, #2]
 80029aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029b6:	d906      	bls.n	80029c6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80029bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_SPI_TransmitReceive_IT+0x150>)
 80029c2:	651a      	str	r2, [r3, #80]	; 0x50
 80029c4:	e005      	b.n	80029d2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <HAL_SPI_TransmitReceive_IT+0x154>)
 80029ca:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a21      	ldr	r2, [pc, #132]	; (8002a54 <HAL_SPI_TransmitReceive_IT+0x158>)
 80029d0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029da:	d802      	bhi.n	80029e2 <HAL_SPI_TransmitReceive_IT+0xe6>
 80029dc:	887b      	ldrh	r3, [r7, #2]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d908      	bls.n	80029f4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	e007      	b.n	8002a04 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a02:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d007      	beq.n	8002a22 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002a38:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	08002de3 	.word	0x08002de3
 8002a4c:	08002e49 	.word	0x08002e49
 8002a50:	08002c93 	.word	0x08002c93
 8002a54:	08002d51 	.word	0x08002d51

08002a58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10e      	bne.n	8002a98 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
    return;
 8002a96:	e0ce      	b.n	8002c36 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_SPI_IRQHandler+0x5e>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	4798      	blx	r3
    return;
 8002ab4:	e0bf      	b.n	8002c36 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_SPI_IRQHandler+0x7e>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d105      	bne.n	8002ad6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80b0 	beq.w	8002c36 <HAL_SPI_IRQHandler+0x1de>
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80aa 	beq.w	8002c36 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d023      	beq.n	8002b34 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d011      	beq.n	8002b1c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	e00b      	b.n	8002b34 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	693b      	ldr	r3, [r7, #16]
        return;
 8002b32:	e080      	b.n	8002c36 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d014      	beq.n	8002b68 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	f043 0208 	orr.w	r2, r3, #8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d04f      	beq.n	8002c34 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d104      	bne.n	8002bc0 <HAL_SPI_IRQHandler+0x168>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d034      	beq.n	8002c2a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0203 	bic.w	r2, r2, #3
 8002bce:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d011      	beq.n	8002bfc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bdc:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_SPI_IRQHandler+0x1e4>)
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fb70 	bl	80012ca <HAL_DMA_Abort_IT>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d016      	beq.n	8002c32 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	4a0c      	ldr	r2, [pc, #48]	; (8002c3c <HAL_SPI_IRQHandler+0x1e4>)
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fb5a 	bl	80012ca <HAL_DMA_Abort_IT>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002c28:	e003      	b.n	8002c32 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f812 	bl	8002c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c30:	e000      	b.n	8002c34 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002c32:	bf00      	nop
    return;
 8002c34:	bf00      	nop
  }
}
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	08002c69 	.word	0x08002c69

08002c40 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f7ff ffe5 	bl	8002c54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d923      	bls.n	8002cee <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	b292      	uxth	r2, r2
 8002cb2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b02      	subs	r3, #2
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d11f      	bne.n	8002d1c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	e016      	b.n	8002d1c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f103 020c 	add.w	r2, r3, #12
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10f      	bne.n	8002d48 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d36:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa14 	bl	8003170 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d912      	bls.n	8002d88 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d72:	1c9a      	adds	r2, r3, #2
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b02      	subs	r3, #2
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d86:	e012      	b.n	8002dae <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d110      	bne.n	8002dda <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f9cb 	bl	8003170 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	b292      	uxth	r2, r2
 8002df6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10f      	bne.n	8002e40 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d102      	bne.n	8002e40 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f998 	bl	8003170 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	881a      	ldrh	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	1c9a      	adds	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d110      	bne.n	8002ea0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e8c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d102      	bne.n	8002ea0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f968 	bl	8003170 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eb8:	f7fe f8ca 	bl	8001050 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ec8:	f7fe f8c2 	bl	8001050 <HAL_GetTick>
 8002ecc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	015b      	lsls	r3, r3, #5
 8002ed4:	0d1b      	lsrs	r3, r3, #20
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	fb02 f303 	mul.w	r3, r2, r3
 8002edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ede:	e054      	b.n	8002f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d050      	beq.n	8002f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ee8:	f7fe f8b2 	bl	8001050 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d902      	bls.n	8002efe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d13d      	bne.n	8002f7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f16:	d111      	bne.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f20:	d004      	beq.n	8002f2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d107      	bne.n	8002f3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f44:	d10f      	bne.n	8002f66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e017      	b.n	8002faa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d101      	bne.n	8002f84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	3b01      	subs	r3, #1
 8002f88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d19b      	bne.n	8002ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000004 	.word	0x20000004

08002fb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fca:	f7fe f841 	bl	8001050 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002fda:	f7fe f839 	bl	8001050 <HAL_GetTick>
 8002fde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00da      	lsls	r2, r3, #3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	0d1b      	lsrs	r3, r3, #20
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003000:	e060      	b.n	80030c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003008:	d107      	bne.n	800301a <SPI_WaitFifoStateUntilTimeout+0x62>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003018:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d050      	beq.n	80030c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003022:	f7fe f815 	bl	8001050 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302e:	429a      	cmp	r2, r3
 8003030:	d902      	bls.n	8003038 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	d13d      	bne.n	80030b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003046:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003050:	d111      	bne.n	8003076 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305a:	d004      	beq.n	8003066 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003064:	d107      	bne.n	8003076 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307e:	d10f      	bne.n	80030a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800309e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e010      	b.n	80030d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d196      	bne.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3728      	adds	r7, #40	; 0x28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000004 	.word	0x20000004

080030e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f7ff ff5b 	bl	8002fb8 <SPI_WaitFifoStateUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e027      	b.n	8003168 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2200      	movs	r2, #0
 8003120:	2180      	movs	r1, #128	; 0x80
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f7ff fec0 	bl	8002ea8 <SPI_WaitFlagStateUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	f043 0220 	orr.w	r2, r3, #32
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e014      	b.n	8003168 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7ff ff34 	bl	8002fb8 <SPI_WaitFifoStateUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e000      	b.n	8003168 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003178:	f7fd ff6a 	bl	8001050 <HAL_GetTick>
 800317c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0220 	bic.w	r2, r2, #32
 800318c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	2164      	movs	r1, #100	; 0x64
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa6 	bl	80030e4 <SPI_EndRxTxTransaction>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d115      	bne.n	80031de <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fd3a 	bl	8002c40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80031cc:	e00e      	b.n	80031ec <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fd60 	bl	8000c9c <HAL_SPI_TxRxCpltCallback>
}
 80031dc:	e006      	b.n	80031ec <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff fd34 	bl	8002c54 <HAL_SPI_ErrorCallback>
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e049      	b.n	800329a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fe1c 	bl	8000e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 f9bc 	bl	80035b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04c      	b.n	8003356 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <HAL_TIM_Base_Start+0xc0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d022      	beq.n	8003314 <HAL_TIM_Base_Start+0x70>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d01d      	beq.n	8003314 <HAL_TIM_Base_Start+0x70>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_TIM_Base_Start+0xc4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d018      	beq.n	8003314 <HAL_TIM_Base_Start+0x70>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_TIM_Base_Start+0xc8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_TIM_Base_Start+0x70>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_TIM_Base_Start+0xcc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00e      	beq.n	8003314 <HAL_TIM_Base_Start+0x70>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_TIM_Base_Start+0xd0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_TIM_Base_Start+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <HAL_TIM_Base_Start+0xd4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_TIM_Base_Start+0x70>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1b      	ldr	r2, [pc, #108]	; (800337c <HAL_TIM_Base_Start+0xd8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d115      	bne.n	8003340 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_TIM_Base_Start+0xdc>)
 800331c:	4013      	ands	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b06      	cmp	r3, #6
 8003324:	d015      	beq.n	8003352 <HAL_TIM_Base_Start+0xae>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d011      	beq.n	8003352 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	e008      	b.n	8003352 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	e000      	b.n	8003354 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800
 8003370:	40000c00 	.word	0x40000c00
 8003374:	40013400 	.word	0x40013400
 8003378:	40014000 	.word	0x40014000
 800337c:	40015000 	.word	0x40015000
 8003380:	00010007 	.word	0x00010007

08003384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_TIM_ConfigClockSource+0x1c>
 800339c:	2302      	movs	r3, #2
 800339e:	e0f6      	b.n	800358e <HAL_TIM_ConfigClockSource+0x20a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80033be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6f      	ldr	r2, [pc, #444]	; (8003598 <HAL_TIM_ConfigClockSource+0x214>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f000 80c1 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 80033e0:	4a6d      	ldr	r2, [pc, #436]	; (8003598 <HAL_TIM_ConfigClockSource+0x214>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f200 80c6 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 80033e8:	4a6c      	ldr	r2, [pc, #432]	; (800359c <HAL_TIM_ConfigClockSource+0x218>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	f000 80b9 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 80033f0:	4a6a      	ldr	r2, [pc, #424]	; (800359c <HAL_TIM_ConfigClockSource+0x218>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f200 80be 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 80033f8:	4a69      	ldr	r2, [pc, #420]	; (80035a0 <HAL_TIM_ConfigClockSource+0x21c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	f000 80b1 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 8003400:	4a67      	ldr	r2, [pc, #412]	; (80035a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	f200 80b6 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003408:	4a66      	ldr	r2, [pc, #408]	; (80035a4 <HAL_TIM_ConfigClockSource+0x220>)
 800340a:	4293      	cmp	r3, r2
 800340c:	f000 80a9 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 8003410:	4a64      	ldr	r2, [pc, #400]	; (80035a4 <HAL_TIM_ConfigClockSource+0x220>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f200 80ae 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003418:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_TIM_ConfigClockSource+0x224>)
 800341a:	4293      	cmp	r3, r2
 800341c:	f000 80a1 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 8003420:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <HAL_TIM_ConfigClockSource+0x224>)
 8003422:	4293      	cmp	r3, r2
 8003424:	f200 80a6 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003428:	4a60      	ldr	r2, [pc, #384]	; (80035ac <HAL_TIM_ConfigClockSource+0x228>)
 800342a:	4293      	cmp	r3, r2
 800342c:	f000 8099 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 8003430:	4a5e      	ldr	r2, [pc, #376]	; (80035ac <HAL_TIM_ConfigClockSource+0x228>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f200 809e 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003438:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800343c:	f000 8091 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 8003440:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003444:	f200 8096 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344c:	f000 8089 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 8003450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003454:	f200 808e 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345c:	d03e      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x158>
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	f200 8087 	bhi.w	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346a:	f000 8086 	beq.w	800357a <HAL_TIM_ConfigClockSource+0x1f6>
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	d87f      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003474:	2b70      	cmp	r3, #112	; 0x70
 8003476:	d01a      	beq.n	80034ae <HAL_TIM_ConfigClockSource+0x12a>
 8003478:	2b70      	cmp	r3, #112	; 0x70
 800347a:	d87b      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 800347c:	2b60      	cmp	r3, #96	; 0x60
 800347e:	d050      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x19e>
 8003480:	2b60      	cmp	r3, #96	; 0x60
 8003482:	d877      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003484:	2b50      	cmp	r3, #80	; 0x50
 8003486:	d03c      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x17e>
 8003488:	2b50      	cmp	r3, #80	; 0x50
 800348a:	d873      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d058      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x1be>
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d86f      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 8003494:	2b30      	cmp	r3, #48	; 0x30
 8003496:	d064      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 8003498:	2b30      	cmp	r3, #48	; 0x30
 800349a:	d86b      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d060      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d867      	bhi.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d05c      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d05a      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0x1de>
 80034ac:	e062      	b.n	8003574 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034be:	f000 f9a7 	bl	8003810 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	609a      	str	r2, [r3, #8]
      break;
 80034da:	e04f      	b.n	800357c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ec:	f000 f990 	bl	8003810 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fe:	609a      	str	r2, [r3, #8]
      break;
 8003500:	e03c      	b.n	800357c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	461a      	mov	r2, r3
 8003510:	f000 f902 	bl	8003718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2150      	movs	r1, #80	; 0x50
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f95b 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003520:	e02c      	b.n	800357c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352e:	461a      	mov	r2, r3
 8003530:	f000 f921 	bl	8003776 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2160      	movs	r1, #96	; 0x60
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f94b 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003540:	e01c      	b.n	800357c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354e:	461a      	mov	r2, r3
 8003550:	f000 f8e2 	bl	8003718 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2140      	movs	r1, #64	; 0x40
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f93b 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003560:	e00c      	b.n	800357c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4619      	mov	r1, r3
 800356c:	4610      	mov	r0, r2
 800356e:	f000 f932 	bl	80037d6 <TIM_ITRx_SetConfig>
      break;
 8003572:	e003      	b.n	800357c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      break;
 8003578:	e000      	b.n	800357c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800357a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	00100070 	.word	0x00100070
 800359c:	00100060 	.word	0x00100060
 80035a0:	00100050 	.word	0x00100050
 80035a4:	00100040 	.word	0x00100040
 80035a8:	00100030 	.word	0x00100030
 80035ac:	00100020 	.word	0x00100020

080035b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <TIM_Base_SetConfig+0x144>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d017      	beq.n	80035f8 <TIM_Base_SetConfig+0x48>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d013      	beq.n	80035f8 <TIM_Base_SetConfig+0x48>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a49      	ldr	r2, [pc, #292]	; (80036f8 <TIM_Base_SetConfig+0x148>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00f      	beq.n	80035f8 <TIM_Base_SetConfig+0x48>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a48      	ldr	r2, [pc, #288]	; (80036fc <TIM_Base_SetConfig+0x14c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00b      	beq.n	80035f8 <TIM_Base_SetConfig+0x48>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a47      	ldr	r2, [pc, #284]	; (8003700 <TIM_Base_SetConfig+0x150>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d007      	beq.n	80035f8 <TIM_Base_SetConfig+0x48>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a46      	ldr	r2, [pc, #280]	; (8003704 <TIM_Base_SetConfig+0x154>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d003      	beq.n	80035f8 <TIM_Base_SetConfig+0x48>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a45      	ldr	r2, [pc, #276]	; (8003708 <TIM_Base_SetConfig+0x158>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d108      	bne.n	800360a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <TIM_Base_SetConfig+0x144>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d023      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d01f      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a36      	ldr	r2, [pc, #216]	; (80036f8 <TIM_Base_SetConfig+0x148>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01b      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a35      	ldr	r2, [pc, #212]	; (80036fc <TIM_Base_SetConfig+0x14c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d017      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a34      	ldr	r2, [pc, #208]	; (8003700 <TIM_Base_SetConfig+0x150>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a33      	ldr	r2, [pc, #204]	; (8003704 <TIM_Base_SetConfig+0x154>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a33      	ldr	r2, [pc, #204]	; (800370c <TIM_Base_SetConfig+0x15c>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a32      	ldr	r2, [pc, #200]	; (8003710 <TIM_Base_SetConfig+0x160>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a31      	ldr	r2, [pc, #196]	; (8003714 <TIM_Base_SetConfig+0x164>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0xaa>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <TIM_Base_SetConfig+0x158>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a18      	ldr	r2, [pc, #96]	; (80036f4 <TIM_Base_SetConfig+0x144>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <TIM_Base_SetConfig+0x110>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1a      	ldr	r2, [pc, #104]	; (8003704 <TIM_Base_SetConfig+0x154>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00f      	beq.n	80036c0 <TIM_Base_SetConfig+0x110>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	; (800370c <TIM_Base_SetConfig+0x15c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <TIM_Base_SetConfig+0x110>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a19      	ldr	r2, [pc, #100]	; (8003710 <TIM_Base_SetConfig+0x160>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_Base_SetConfig+0x110>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <TIM_Base_SetConfig+0x164>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_Base_SetConfig+0x110>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <TIM_Base_SetConfig+0x158>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d103      	bne.n	80036c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d105      	bne.n	80036e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f023 0201 	bic.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	611a      	str	r2, [r3, #16]
  }
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40012c00 	.word	0x40012c00
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40013400 	.word	0x40013400
 8003708:	40015000 	.word	0x40015000
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800

08003718 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f023 0201 	bic.w	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 030a 	bic.w	r3, r3, #10
 8003754:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	621a      	str	r2, [r3, #32]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b087      	sub	sp, #28
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f023 0210 	bic.w	r2, r3, #16
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	031b      	lsls	r3, r3, #12
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f043 0307 	orr.w	r3, r3, #7
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	609a      	str	r2, [r3, #8]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003810:	b480      	push	{r7}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800382a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	431a      	orrs	r2, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	371c      	adds	r7, #28
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003864:	2302      	movs	r3, #2
 8003866:	e074      	b.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a34      	ldr	r2, [pc, #208]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a33      	ldr	r2, [pc, #204]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a31      	ldr	r2, [pc, #196]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d108      	bne.n	80038b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a21      	ldr	r2, [pc, #132]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d022      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e8:	d01d      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d018      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d013      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1c      	ldr	r2, [pc, #112]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a15      	ldr	r2, [pc, #84]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d009      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a11      	ldr	r2, [pc, #68]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10c      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40013400 	.word	0x40013400
 8003968:	40015000 	.word	0x40015000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40014000 	.word	0x40014000

0800397c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e042      	b.n	8003a14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	2b00      	cmp	r3, #0
 8003996:	d106      	bne.n	80039a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fd f9b5 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	; 0x24
 80039aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0201 	bic.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fb24 	bl	8004014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f825 	bl	8003a1c <UART_SetConfig>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e01b      	b.n	8003a14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fba3 	bl	8004158 <UART_CheckIdleState>
 8003a12:	4603      	mov	r3, r0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a20:	b08c      	sub	sp, #48	; 0x30
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	431a      	orrs	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4baa      	ldr	r3, [pc, #680]	; (8003cf4 <UART_SetConfig+0x2d8>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	6812      	ldr	r2, [r2, #0]
 8003a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a9f      	ldr	r2, [pc, #636]	; (8003cf8 <UART_SetConfig+0x2dc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a84:	4313      	orrs	r3, r2
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f023 010f 	bic.w	r1, r3, #15
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a90      	ldr	r2, [pc, #576]	; (8003cfc <UART_SetConfig+0x2e0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d125      	bne.n	8003b0c <UART_SetConfig+0xf0>
 8003ac0:	4b8f      	ldr	r3, [pc, #572]	; (8003d00 <UART_SetConfig+0x2e4>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d81a      	bhi.n	8003b04 <UART_SetConfig+0xe8>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0xb8>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af5 	.word	0x08003af5
 8003adc:	08003aed 	.word	0x08003aed
 8003ae0:	08003afd 	.word	0x08003afd
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e116      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af2:	e112      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003af4:	2304      	movs	r3, #4
 8003af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afa:	e10e      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003afc:	2308      	movs	r3, #8
 8003afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b02:	e10a      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b0a:	e106      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a7c      	ldr	r2, [pc, #496]	; (8003d04 <UART_SetConfig+0x2e8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d138      	bne.n	8003b88 <UART_SetConfig+0x16c>
 8003b16:	4b7a      	ldr	r3, [pc, #488]	; (8003d00 <UART_SetConfig+0x2e4>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f003 030c 	and.w	r3, r3, #12
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	d82d      	bhi.n	8003b80 <UART_SetConfig+0x164>
 8003b24:	a201      	add	r2, pc, #4	; (adr r2, 8003b2c <UART_SetConfig+0x110>)
 8003b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2a:	bf00      	nop
 8003b2c:	08003b61 	.word	0x08003b61
 8003b30:	08003b81 	.word	0x08003b81
 8003b34:	08003b81 	.word	0x08003b81
 8003b38:	08003b81 	.word	0x08003b81
 8003b3c:	08003b71 	.word	0x08003b71
 8003b40:	08003b81 	.word	0x08003b81
 8003b44:	08003b81 	.word	0x08003b81
 8003b48:	08003b81 	.word	0x08003b81
 8003b4c:	08003b69 	.word	0x08003b69
 8003b50:	08003b81 	.word	0x08003b81
 8003b54:	08003b81 	.word	0x08003b81
 8003b58:	08003b81 	.word	0x08003b81
 8003b5c:	08003b79 	.word	0x08003b79
 8003b60:	2300      	movs	r3, #0
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b66:	e0d8      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6e:	e0d4      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003b70:	2304      	movs	r3, #4
 8003b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b76:	e0d0      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003b78:	2308      	movs	r3, #8
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7e:	e0cc      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003b80:	2310      	movs	r3, #16
 8003b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b86:	e0c8      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a5e      	ldr	r2, [pc, #376]	; (8003d08 <UART_SetConfig+0x2ec>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d125      	bne.n	8003bde <UART_SetConfig+0x1c2>
 8003b92:	4b5b      	ldr	r3, [pc, #364]	; (8003d00 <UART_SetConfig+0x2e4>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b9c:	2b30      	cmp	r3, #48	; 0x30
 8003b9e:	d016      	beq.n	8003bce <UART_SetConfig+0x1b2>
 8003ba0:	2b30      	cmp	r3, #48	; 0x30
 8003ba2:	d818      	bhi.n	8003bd6 <UART_SetConfig+0x1ba>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d00a      	beq.n	8003bbe <UART_SetConfig+0x1a2>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d814      	bhi.n	8003bd6 <UART_SetConfig+0x1ba>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <UART_SetConfig+0x19a>
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d008      	beq.n	8003bc6 <UART_SetConfig+0x1aa>
 8003bb4:	e00f      	b.n	8003bd6 <UART_SetConfig+0x1ba>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bbc:	e0ad      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc4:	e0a9      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bcc:	e0a5      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd4:	e0a1      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003bd6:	2310      	movs	r3, #16
 8003bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bdc:	e09d      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a4a      	ldr	r2, [pc, #296]	; (8003d0c <UART_SetConfig+0x2f0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d125      	bne.n	8003c34 <UART_SetConfig+0x218>
 8003be8:	4b45      	ldr	r3, [pc, #276]	; (8003d00 <UART_SetConfig+0x2e4>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf4:	d016      	beq.n	8003c24 <UART_SetConfig+0x208>
 8003bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf8:	d818      	bhi.n	8003c2c <UART_SetConfig+0x210>
 8003bfa:	2b80      	cmp	r3, #128	; 0x80
 8003bfc:	d00a      	beq.n	8003c14 <UART_SetConfig+0x1f8>
 8003bfe:	2b80      	cmp	r3, #128	; 0x80
 8003c00:	d814      	bhi.n	8003c2c <UART_SetConfig+0x210>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d002      	beq.n	8003c0c <UART_SetConfig+0x1f0>
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d008      	beq.n	8003c1c <UART_SetConfig+0x200>
 8003c0a:	e00f      	b.n	8003c2c <UART_SetConfig+0x210>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c12:	e082      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c14:	2302      	movs	r3, #2
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	e07e      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c1c:	2304      	movs	r3, #4
 8003c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c22:	e07a      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c24:	2308      	movs	r3, #8
 8003c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2a:	e076      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c32:	e072      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a35      	ldr	r2, [pc, #212]	; (8003d10 <UART_SetConfig+0x2f4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d12a      	bne.n	8003c94 <UART_SetConfig+0x278>
 8003c3e:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <UART_SetConfig+0x2e4>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4c:	d01a      	beq.n	8003c84 <UART_SetConfig+0x268>
 8003c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c52:	d81b      	bhi.n	8003c8c <UART_SetConfig+0x270>
 8003c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c58:	d00c      	beq.n	8003c74 <UART_SetConfig+0x258>
 8003c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5e:	d815      	bhi.n	8003c8c <UART_SetConfig+0x270>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <UART_SetConfig+0x250>
 8003c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c68:	d008      	beq.n	8003c7c <UART_SetConfig+0x260>
 8003c6a:	e00f      	b.n	8003c8c <UART_SetConfig+0x270>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c72:	e052      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c74:	2302      	movs	r3, #2
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7a:	e04e      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c7c:	2304      	movs	r3, #4
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c82:	e04a      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c84:	2308      	movs	r3, #8
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8a:	e046      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c92:	e042      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a17      	ldr	r2, [pc, #92]	; (8003cf8 <UART_SetConfig+0x2dc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d13a      	bne.n	8003d14 <UART_SetConfig+0x2f8>
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <UART_SetConfig+0x2e4>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cac:	d01a      	beq.n	8003ce4 <UART_SetConfig+0x2c8>
 8003cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb2:	d81b      	bhi.n	8003cec <UART_SetConfig+0x2d0>
 8003cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb8:	d00c      	beq.n	8003cd4 <UART_SetConfig+0x2b8>
 8003cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbe:	d815      	bhi.n	8003cec <UART_SetConfig+0x2d0>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <UART_SetConfig+0x2b0>
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	d008      	beq.n	8003cdc <UART_SetConfig+0x2c0>
 8003cca:	e00f      	b.n	8003cec <UART_SetConfig+0x2d0>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd2:	e022      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cda:	e01e      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce2:	e01a      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cea:	e016      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003cec:	2310      	movs	r3, #16
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf2:	e012      	b.n	8003d1a <UART_SetConfig+0x2fe>
 8003cf4:	cfff69f3 	.word	0xcfff69f3
 8003cf8:	40008000 	.word	0x40008000
 8003cfc:	40013800 	.word	0x40013800
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40004400 	.word	0x40004400
 8003d08:	40004800 	.word	0x40004800
 8003d0c:	40004c00 	.word	0x40004c00
 8003d10:	40005000 	.word	0x40005000
 8003d14:	2310      	movs	r3, #16
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4aae      	ldr	r2, [pc, #696]	; (8003fd8 <UART_SetConfig+0x5bc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	f040 8097 	bne.w	8003e54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d823      	bhi.n	8003d76 <UART_SetConfig+0x35a>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x318>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d77 	.word	0x08003d77
 8003d3c:	08003d61 	.word	0x08003d61
 8003d40:	08003d77 	.word	0x08003d77
 8003d44:	08003d67 	.word	0x08003d67
 8003d48:	08003d77 	.word	0x08003d77
 8003d4c:	08003d77 	.word	0x08003d77
 8003d50:	08003d77 	.word	0x08003d77
 8003d54:	08003d6f 	.word	0x08003d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7fe fa64 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d5e:	e010      	b.n	8003d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d60:	4b9e      	ldr	r3, [pc, #632]	; (8003fdc <UART_SetConfig+0x5c0>)
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d64:	e00d      	b.n	8003d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d66:	f7fe f9ef 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8003d6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d6c:	e009      	b.n	8003d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d74:	e005      	b.n	8003d82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8130 	beq.w	8003fea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	4a94      	ldr	r2, [pc, #592]	; (8003fe0 <UART_SetConfig+0x5c4>)
 8003d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d305      	bcc.n	8003dba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d903      	bls.n	8003dc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dc0:	e113      	b.n	8003fea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	60fa      	str	r2, [r7, #12]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	4a84      	ldr	r2, [pc, #528]	; (8003fe0 <UART_SetConfig+0x5c4>)
 8003dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003de0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003de4:	f7fc fa18 	bl	8000218 <__aeabi_uldivmod>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	020b      	lsls	r3, r1, #8
 8003dfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dfe:	0202      	lsls	r2, r0, #8
 8003e00:	6979      	ldr	r1, [r7, #20]
 8003e02:	6849      	ldr	r1, [r1, #4]
 8003e04:	0849      	lsrs	r1, r1, #1
 8003e06:	2000      	movs	r0, #0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	eb12 0804 	adds.w	r8, r2, r4
 8003e10:	eb43 0905 	adc.w	r9, r3, r5
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	469a      	mov	sl, r3
 8003e1c:	4693      	mov	fp, r2
 8003e1e:	4652      	mov	r2, sl
 8003e20:	465b      	mov	r3, fp
 8003e22:	4640      	mov	r0, r8
 8003e24:	4649      	mov	r1, r9
 8003e26:	f7fc f9f7 	bl	8000218 <__aeabi_uldivmod>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4613      	mov	r3, r2
 8003e30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d308      	bcc.n	8003e4c <UART_SetConfig+0x430>
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e40:	d204      	bcs.n	8003e4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6a3a      	ldr	r2, [r7, #32]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	e0ce      	b.n	8003fea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e52:	e0ca      	b.n	8003fea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5c:	d166      	bne.n	8003f2c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d827      	bhi.n	8003eb6 <UART_SetConfig+0x49a>
 8003e66:	a201      	add	r2, pc, #4	; (adr r2, 8003e6c <UART_SetConfig+0x450>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003e91 	.word	0x08003e91
 8003e70:	08003e99 	.word	0x08003e99
 8003e74:	08003ea1 	.word	0x08003ea1
 8003e78:	08003eb7 	.word	0x08003eb7
 8003e7c:	08003ea7 	.word	0x08003ea7
 8003e80:	08003eb7 	.word	0x08003eb7
 8003e84:	08003eb7 	.word	0x08003eb7
 8003e88:	08003eb7 	.word	0x08003eb7
 8003e8c:	08003eaf 	.word	0x08003eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7fe f9c8 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e96:	e014      	b.n	8003ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e98:	f7fe f9da 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8003e9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e9e:	e010      	b.n	8003ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea0:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <UART_SetConfig+0x5c0>)
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ea4:	e00d      	b.n	8003ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea6:	f7fe f94f 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eac:	e009      	b.n	8003ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eb4:	e005      	b.n	8003ec2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8090 	beq.w	8003fea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	4a44      	ldr	r2, [pc, #272]	; (8003fe0 <UART_SetConfig+0x5c4>)
 8003ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003edc:	005a      	lsls	r2, r3, #1
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	441a      	add	r2, r3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	d916      	bls.n	8003f24 <UART_SetConfig+0x508>
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d212      	bcs.n	8003f24 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	f023 030f 	bic.w	r3, r3, #15
 8003f06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	8bfb      	ldrh	r3, [r7, #30]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	8bfa      	ldrh	r2, [r7, #30]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	e062      	b.n	8003fea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f2a:	e05e      	b.n	8003fea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d828      	bhi.n	8003f86 <UART_SetConfig+0x56a>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x520>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f61 	.word	0x08003f61
 8003f40:	08003f69 	.word	0x08003f69
 8003f44:	08003f71 	.word	0x08003f71
 8003f48:	08003f87 	.word	0x08003f87
 8003f4c:	08003f77 	.word	0x08003f77
 8003f50:	08003f87 	.word	0x08003f87
 8003f54:	08003f87 	.word	0x08003f87
 8003f58:	08003f87 	.word	0x08003f87
 8003f5c:	08003f7f 	.word	0x08003f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f60:	f7fe f960 	bl	8002224 <HAL_RCC_GetPCLK1Freq>
 8003f64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f66:	e014      	b.n	8003f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7fe f972 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f6e:	e010      	b.n	8003f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f70:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <UART_SetConfig+0x5c0>)
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f74:	e00d      	b.n	8003f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f76:	f7fe f8e7 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8003f7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f7c:	e009      	b.n	8003f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f84:	e005      	b.n	8003f92 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f90:	bf00      	nop
    }

    if (pclk != 0U)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d028      	beq.n	8003fea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <UART_SetConfig+0x5c4>)
 8003f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	441a      	add	r2, r3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b0f      	cmp	r3, #15
 8003fc0:	d910      	bls.n	8003fe4 <UART_SetConfig+0x5c8>
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc8:	d20c      	bcs.n	8003fe4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60da      	str	r2, [r3, #12]
 8003fd4:	e009      	b.n	8003fea <UART_SetConfig+0x5ce>
 8003fd6:	bf00      	nop
 8003fd8:	40008000 	.word	0x40008000
 8003fdc:	00f42400 	.word	0x00f42400
 8003fe0:	080046e0 	.word	0x080046e0
      }
      else
      {
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2200      	movs	r2, #0
 8004004:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004006:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800400a:	4618      	mov	r0, r3
 800400c:	3730      	adds	r7, #48	; 0x30
 800400e:	46bd      	mov	sp, r7
 8004010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	430a      	orrs	r2, r1
 800405e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d01a      	beq.n	800412a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004112:	d10a      	bne.n	800412a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	605a      	str	r2, [r3, #4]
  }
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b098      	sub	sp, #96	; 0x60
 800415c:	af02      	add	r7, sp, #8
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004168:	f7fc ff72 	bl	8001050 <HAL_GetTick>
 800416c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b08      	cmp	r3, #8
 800417a:	d12f      	bne.n	80041dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f88e 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d022      	beq.n	80041dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041aa:	653b      	str	r3, [r7, #80]	; 0x50
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
 80041b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e063      	b.n	80042a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d149      	bne.n	800427e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f857 	bl	80042ac <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d03c      	beq.n	800427e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	623b      	str	r3, [r7, #32]
   return(result);
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	633b      	str	r3, [r7, #48]	; 0x30
 8004224:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e6      	bne.n	8004204 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	60fb      	str	r3, [r7, #12]
   return(result);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	64bb      	str	r3, [r7, #72]	; 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004256:	61fa      	str	r2, [r7, #28]
 8004258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	69b9      	ldr	r1, [r7, #24]
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	617b      	str	r3, [r7, #20]
   return(result);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e012      	b.n	80042a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3758      	adds	r7, #88	; 0x58
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042bc:	e04f      	b.n	800435e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d04b      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fc fec3 	bl	8001050 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <UART_WaitOnFlagUntilTimeout+0x30>
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e04e      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d037      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d034      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d031      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b08      	cmp	r3, #8
 8004306:	d110      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2208      	movs	r2, #8
 800430e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f838 	bl	8004386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2208      	movs	r2, #8
 800431a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e029      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	d111      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f81e 	bl	8004386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2220      	movs	r2, #32
 800434e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e00f      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	429a      	cmp	r2, r3
 800437a:	d0a0      	beq.n	80042be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004386:	b480      	push	{r7}
 8004388:	b095      	sub	sp, #84	; 0x54
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ac:	643b      	str	r3, [r7, #64]	; 0x40
 80043ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e6      	bne.n	800438e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	64bb      	str	r3, [r7, #72]	; 0x48
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3308      	adds	r3, #8
 80043e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e3      	bne.n	80043c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d118      	bne.n	8004432 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	60bb      	str	r3, [r7, #8]
   return(result);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f023 0310 	bic.w	r3, r3, #16
 8004414:	647b      	str	r3, [r7, #68]	; 0x44
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6979      	ldr	r1, [r7, #20]
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	613b      	str	r3, [r7, #16]
   return(result);
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2220      	movs	r2, #32
 8004436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004446:	bf00      	nop
 8004448:	3754      	adds	r7, #84	; 0x54
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_UARTEx_DisableFifoMode+0x16>
 8004464:	2302      	movs	r3, #2
 8004466:	e027      	b.n	80044b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	; 0x24
 8004474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004496:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e02d      	b.n	8004538 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2224      	movs	r2, #36	; 0x24
 80044e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 0201 	bic.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f84f 	bl	80045bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e02d      	b.n	80045b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f811 	bl	80045bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045dc:	e031      	b.n	8004642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045de:	2308      	movs	r3, #8
 80045e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045e2:	2308      	movs	r3, #8
 80045e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	0e5b      	lsrs	r3, r3, #25
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	0f5b      	lsrs	r3, r3, #29
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004606:	7bbb      	ldrb	r3, [r7, #14]
 8004608:	7b3a      	ldrb	r2, [r7, #12]
 800460a:	4911      	ldr	r1, [pc, #68]	; (8004650 <UARTEx_SetNbDataToProcess+0x94>)
 800460c:	5c8a      	ldrb	r2, [r1, r2]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004612:	7b3a      	ldrb	r2, [r7, #12]
 8004614:	490f      	ldr	r1, [pc, #60]	; (8004654 <UARTEx_SetNbDataToProcess+0x98>)
 8004616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004618:	fb93 f3f2 	sdiv	r3, r3, r2
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	7b7a      	ldrb	r2, [r7, #13]
 8004628:	4909      	ldr	r1, [pc, #36]	; (8004650 <UARTEx_SetNbDataToProcess+0x94>)
 800462a:	5c8a      	ldrb	r2, [r1, r2]
 800462c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004630:	7b7a      	ldrb	r2, [r7, #13]
 8004632:	4908      	ldr	r1, [pc, #32]	; (8004654 <UARTEx_SetNbDataToProcess+0x98>)
 8004634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004636:	fb93 f3f2 	sdiv	r3, r3, r2
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	080046f8 	.word	0x080046f8
 8004654:	08004700 	.word	0x08004700

08004658 <memset>:
 8004658:	4402      	add	r2, r0
 800465a:	4603      	mov	r3, r0
 800465c:	4293      	cmp	r3, r2
 800465e:	d100      	bne.n	8004662 <memset+0xa>
 8004660:	4770      	bx	lr
 8004662:	f803 1b01 	strb.w	r1, [r3], #1
 8004666:	e7f9      	b.n	800465c <memset+0x4>

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	; (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	; (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	; (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	; (80046ac <__libc_init_array+0x44>)
 800467c:	f000 f818 	bl	80046b0 <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	08004710 	.word	0x08004710
 80046a4:	08004710 	.word	0x08004710
 80046a8:	08004710 	.word	0x08004710
 80046ac:	08004714 	.word	0x08004714

080046b0 <_init>:
 80046b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b2:	bf00      	nop
 80046b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b6:	bc08      	pop	{r3}
 80046b8:	469e      	mov	lr, r3
 80046ba:	4770      	bx	lr

080046bc <_fini>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	bf00      	nop
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr
