
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046b0  080046b0  000146b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f0  080046f0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080046f0  080046f0  000146f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046f8  080046f8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000010  08004710  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004710  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143cd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268b  00000000  00000000  00034450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00036ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  00037d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e75  00000000  00000000  00038b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015031  00000000  00000000  0005e9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa142  00000000  00000000  00073a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e54  00000000  00000000  0016db6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001729c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004698 	.word	0x08004698

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08004698 	.word	0x08004698

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd29 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81a 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f93a 	bl	8000798 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f862 	bl	80005ec <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000528:	f000 f8aa 	bl	8000680 <MX_SPI3_Init>
  MX_TIM3_Init();
 800052c:	f000 f8e6 	bl	80006fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <main+0x3c>)
 8000532:	f002 feab 	bl	800328c <HAL_TIM_Base_Start>
  SPITxRx_Setup();
 8000536:	f000 f9bf 	bl	80008b8 <SPITxRx_Setup>
  TikTokGame();
 800053a:	f000 f9fd 	bl	8000938 <TikTokGame>
  LEDdisplay();
 800053e:	f000 fb4f 	bl	8000be0 <LEDdisplay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000542:	f000 f9cf 	bl	80008e4 <SPITxRx_readIO>
	  TikTokGame();
 8000546:	f000 f9f7 	bl	8000938 <TikTokGame>
	  LEDdisplay();
 800054a:	f000 fb49 	bl	8000be0 <LEDdisplay>
  {
 800054e:	e7f8      	b.n	8000542 <main+0x2e>
 8000550:	20000124 	.word	0x20000124

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 f86c 	bl	8004640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	2000      	movs	r0, #0
 8000578:	f001 f8d8 	bl	800172c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f972 	bl	8001894 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b6:	f000 fb75 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc70 	bl	8001eb8 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005de:	f000 fb61 	bl	8000ca4 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <MX_LPUART1_UART_Init+0x90>)
 80005f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000630:	f003 f998 	bl	8003964 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 fb33 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000642:	f003 ff33 	bl	80044ac <HAL_UARTEx_SetTxFifoThreshold>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800064c:	f000 fb2a 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000654:	f003 ff68 	bl	8004528 <HAL_UARTEx_SetRxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065e:	f000 fb21 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000664:	f003 fee9 	bl	800443a <HAL_UARTEx_DisableFifoMode>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066e:	f000 fb19 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c
 800067c:	40008000 	.word	0x40008000

08000680 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_SPI3_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_SPI3_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_SPI3_Init+0x74>)
 800068c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_SPI3_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI3_Init+0x74>)
 800069a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800069e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006b6:	2238      	movs	r2, #56	; 0x38
 80006b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006da:	2208      	movs	r2, #8
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006e0:	f002 f854 	bl	800278c <HAL_SPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 fadb 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000c0 	.word	0x200000c0
 80006f8:	40003c00 	.word	0x40003c00

080006fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM3_Init+0x94>)
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_TIM3_Init+0x98>)
 800071e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM3_Init+0x94>)
 8000722:	f244 2267 	movw	r2, #16999	; 0x4267
 8000726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_TIM3_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_TIM3_Init+0x94>)
 8000730:	2263      	movs	r2, #99	; 0x63
 8000732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_TIM3_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_TIM3_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <MX_TIM3_Init+0x94>)
 8000742:	f002 fd4b 	bl	80031dc <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800074c:	f000 faaa 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_TIM3_Init+0x94>)
 800075e:	f002 fe05 	bl	800336c <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 fa9c 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM3_Init+0x94>)
 800077a:	f003 f85d 	bl	8003838 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000784:	f000 fa8e 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000124 	.word	0x20000124
 8000794:	40000400 	.word	0x40000400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <MX_GPIO_Init+0x114>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a3e      	ldr	r2, [pc, #248]	; (80008ac <MX_GPIO_Init+0x114>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <MX_GPIO_Init+0x114>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_GPIO_Init+0x114>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a38      	ldr	r2, [pc, #224]	; (80008ac <MX_GPIO_Init+0x114>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_GPIO_Init+0x114>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0320 	and.w	r3, r3, #32
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <MX_GPIO_Init+0x114>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a32      	ldr	r2, [pc, #200]	; (80008ac <MX_GPIO_Init+0x114>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_GPIO_Init+0x114>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_GPIO_Init+0x114>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_GPIO_Init+0x114>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0x114>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_GPIO_Init+0x114>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a26      	ldr	r2, [pc, #152]	; (80008ac <MX_GPIO_Init+0x114>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <MX_GPIO_Init+0x114>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 ff41 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2104      	movs	r1, #4
 8000836:	481e      	ldr	r0, [pc, #120]	; (80008b0 <MX_GPIO_Init+0x118>)
 8000838:	f000 ff3c 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <MX_GPIO_Init+0x11c>)
 8000854:	f000 fd94 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 fd85 	bl	8001380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000876:	2304      	movs	r3, #4
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_GPIO_Init+0x118>)
 800088e:	f000 fd77 	bl	8001380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2028      	movs	r0, #40	; 0x28
 8000898:	f000 fcd7 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800089c:	2028      	movs	r0, #40	; 0x28
 800089e:	f000 fcee 	bl	800127e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000c00 	.word	0x48000c00
 80008b4:	48000800 	.word	0x48000800

080008b8 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */

void SPITxRx_Setup()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008bc:	2200      	movs	r2, #0
 80008be:	2104      	movs	r1, #4
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <SPITxRx_Setup+0x28>)
 80008c2:	f000 fef7 	bl	80016b4 <HAL_GPIO_WritePin>
HAL_Delay(1);
 80008c6:	2001      	movs	r0, #1
 80008c8:	f000 fbc2 	bl	8001050 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 80008cc:	2201      	movs	r2, #1
 80008ce:	2104      	movs	r1, #4
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <SPITxRx_Setup+0x28>)
 80008d2:	f000 feef 	bl	80016b4 <HAL_GPIO_WritePin>
HAL_Delay(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fbba 	bl	8001050 <HAL_Delay>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	48000c00 	.word	0x48000c00

080008e4 <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80008e8:	2104      	movs	r1, #4
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <SPITxRx_readIO+0x44>)
 80008ec:	f000 feca 	bl	8001684 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d016      	beq.n	8000924 <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008f6:	2200      	movs	r2, #0
 80008f8:	2104      	movs	r1, #4
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <SPITxRx_readIO+0x44>)
 80008fc:	f000 feda 	bl	80016b4 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <SPITxRx_readIO+0x48>)
 8000902:	2241      	movs	r2, #65	; 0x41
 8000904:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <SPITxRx_readIO+0x48>)
 8000908:	2212      	movs	r2, #18
 800090a:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <SPITxRx_readIO+0x48>)
 800090e:	2200      	movs	r2, #0
 8000910:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <SPITxRx_readIO+0x48>)
 8000914:	2200      	movs	r2, #0
 8000916:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000918:	2304      	movs	r3, #4
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SPITxRx_readIO+0x4c>)
 800091c:	4903      	ldr	r1, [pc, #12]	; (800092c <SPITxRx_readIO+0x48>)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <SPITxRx_readIO+0x50>)
 8000920:	f001 ffe0 	bl	80028e4 <HAL_SPI_TransmitReceive_IT>
}
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	48000c00 	.word	0x48000c00
 800092c:	2000017c 	.word	0x2000017c
 8000930:	20000170 	.word	0x20000170
 8000934:	200000c0 	.word	0x200000c0

08000938 <TikTokGame>:

void TikTokGame()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 800093c:	4ba3      	ldr	r3, [pc, #652]	; (8000bcc <TikTokGame+0x294>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	f040 8102 	bne.w	8000b4a <TikTokGame+0x212>
    {
    	switch (game_left) {
 8000946:	4ba2      	ldr	r3, [pc, #648]	; (8000bd0 <TikTokGame+0x298>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	2b04      	cmp	r3, #4
 800094e:	f200 8138 	bhi.w	8000bc2 <TikTokGame+0x28a>
 8000952:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <TikTokGame+0x20>)
 8000954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000958:	08000ad3 	.word	0x08000ad3
 800095c:	08000a5b 	.word	0x08000a5b
 8000960:	080009e3 	.word	0x080009e3
 8000964:	08000bc3 	.word	0x08000bc3
 8000968:	0800096d 	.word	0x0800096d
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 800096c:	4b99      	ldr	r3, [pc, #612]	; (8000bd4 <TikTokGame+0x29c>)
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	3b03      	subs	r3, #3
 8000972:	2b04      	cmp	r3, #4
 8000974:	d833      	bhi.n	80009de <TikTokGame+0xa6>
 8000976:	a201      	add	r2, pc, #4	; (adr r2, 800097c <TikTokGame+0x44>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	080009c5 	.word	0x080009c5
 8000980:	080009df 	.word	0x080009df
 8000984:	080009ab 	.word	0x080009ab
 8000988:	08000991 	.word	0x08000991
 800098c:	080009df 	.word	0x080009df
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000990:	4b91      	ldr	r3, [pc, #580]	; (8000bd8 <TikTokGame+0x2a0>)
 8000992:	2201      	movs	r2, #1
 8000994:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000996:	4b8e      	ldr	r3, [pc, #568]	; (8000bd0 <TikTokGame+0x298>)
 8000998:	2204      	movs	r2, #4
 800099a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 800099c:	4b8f      	ldr	r3, [pc, #572]	; (8000bdc <TikTokGame+0x2a4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 80009a2:	4b8a      	ldr	r3, [pc, #552]	; (8000bcc <TikTokGame+0x294>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
    	                break;
 80009a8:	e01a      	b.n	80009e0 <TikTokGame+0xa8>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 80009aa:	4b8b      	ldr	r3, [pc, #556]	; (8000bd8 <TikTokGame+0x2a0>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 80009b0:	4b87      	ldr	r3, [pc, #540]	; (8000bd0 <TikTokGame+0x298>)
 80009b2:	2203      	movs	r2, #3
 80009b4:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80009b6:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <TikTokGame+0x2a4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 80009bc:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <TikTokGame+0x294>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
    	                break;
 80009c2:	e00d      	b.n	80009e0 <TikTokGame+0xa8>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 80009c4:	4b84      	ldr	r3, [pc, #528]	; (8000bd8 <TikTokGame+0x2a0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 80009ca:	4b81      	ldr	r3, [pc, #516]	; (8000bd0 <TikTokGame+0x298>)
 80009cc:	2205      	movs	r2, #5
 80009ce:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80009d0:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <TikTokGame+0x2a4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 80009d6:	4b7d      	ldr	r3, [pc, #500]	; (8000bcc <TikTokGame+0x294>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
    	                break;
 80009dc:	e000      	b.n	80009e0 <TikTokGame+0xa8>
    	            default: // multi press do nothing
    	                break;
 80009de:	bf00      	nop
    	        }
    	        break;
 80009e0:	e0ef      	b.n	8000bc2 <TikTokGame+0x28a>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 80009e2:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <TikTokGame+0x29c>)
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	3b03      	subs	r3, #3
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d834      	bhi.n	8000a56 <TikTokGame+0x11e>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <TikTokGame+0xbc>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a3d 	.word	0x08000a3d
 80009f8:	08000a57 	.word	0x08000a57
 80009fc:	08000a23 	.word	0x08000a23
 8000a00:	08000a09 	.word	0x08000a09
 8000a04:	08000a57 	.word	0x08000a57
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a08:	4b73      	ldr	r3, [pc, #460]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000a0e:	4b70      	ldr	r3, [pc, #448]	; (8000bd0 <TikTokGame+0x298>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a14:	4b71      	ldr	r3, [pc, #452]	; (8000bdc <TikTokGame+0x2a4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a1a:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <TikTokGame+0x294>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
    	                break;
 8000a20:	e01a      	b.n	8000a58 <TikTokGame+0x120>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000a22:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000a28:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <TikTokGame+0x298>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a2e:	4b6b      	ldr	r3, [pc, #428]	; (8000bdc <TikTokGame+0x2a4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a34:	4b65      	ldr	r3, [pc, #404]	; (8000bcc <TikTokGame+0x294>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
    	                break;
 8000a3a:	e00d      	b.n	8000a58 <TikTokGame+0x120>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000a3c:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000a42:	4b63      	ldr	r3, [pc, #396]	; (8000bd0 <TikTokGame+0x298>)
 8000a44:	2205      	movs	r2, #5
 8000a46:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a48:	4b64      	ldr	r3, [pc, #400]	; (8000bdc <TikTokGame+0x2a4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <TikTokGame+0x294>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
    	                break;
 8000a54:	e000      	b.n	8000a58 <TikTokGame+0x120>
    	            default: // multi press do nothing
    	                break;
 8000a56:	bf00      	nop
    	        }
    	        break;
 8000a58:	e0b3      	b.n	8000bc2 <TikTokGame+0x28a>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000a5a:	4b5e      	ldr	r3, [pc, #376]	; (8000bd4 <TikTokGame+0x29c>)
 8000a5c:	789b      	ldrb	r3, [r3, #2]
 8000a5e:	3b03      	subs	r3, #3
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d834      	bhi.n	8000ace <TikTokGame+0x196>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <TikTokGame+0x134>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000ab5 	.word	0x08000ab5
 8000a70:	08000acf 	.word	0x08000acf
 8000a74:	08000a9b 	.word	0x08000a9b
 8000a78:	08000a81 	.word	0x08000a81
 8000a7c:	08000acf 	.word	0x08000acf
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a80:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000a86:	4b52      	ldr	r3, [pc, #328]	; (8000bd0 <TikTokGame+0x298>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a8c:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <TikTokGame+0x2a4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a92:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <TikTokGame+0x294>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
    	                break;
 8000a98:	e01a      	b.n	8000ad0 <TikTokGame+0x198>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000a9a:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000aa0:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <TikTokGame+0x298>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000aa6:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <TikTokGame+0x2a4>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000aac:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <TikTokGame+0x294>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
    	                break;
 8000ab2:	e00d      	b.n	8000ad0 <TikTokGame+0x198>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000ab4:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <TikTokGame+0x2a0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000aba:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <TikTokGame+0x298>)
 8000abc:	2205      	movs	r2, #5
 8000abe:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000ac0:	4b46      	ldr	r3, [pc, #280]	; (8000bdc <TikTokGame+0x2a4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000ac6:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <TikTokGame+0x294>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
    	                break;
 8000acc:	e000      	b.n	8000ad0 <TikTokGame+0x198>
    	            default: // multi press do nothing
    	                break;
 8000ace:	bf00      	nop
    	        }
    	        break;
 8000ad0:	e077      	b.n	8000bc2 <TikTokGame+0x28a>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <TikTokGame+0x29c>)
 8000ad4:	789b      	ldrb	r3, [r3, #2]
 8000ad6:	3b03      	subs	r3, #3
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d834      	bhi.n	8000b46 <TikTokGame+0x20e>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <TikTokGame+0x1ac>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000b2d 	.word	0x08000b2d
 8000ae8:	08000b47 	.word	0x08000b47
 8000aec:	08000b13 	.word	0x08000b13
 8000af0:	08000af9 	.word	0x08000af9
 8000af4:	08000b47 	.word	0x08000b47
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <TikTokGame+0x2a0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <TikTokGame+0x298>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <TikTokGame+0x2a4>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <TikTokGame+0x294>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
    	                break;
 8000b10:	e01a      	b.n	8000b48 <TikTokGame+0x210>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <TikTokGame+0x298>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <TikTokGame+0x2a4>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <TikTokGame+0x294>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
    	                break;
 8000b2a:	e00d      	b.n	8000b48 <TikTokGame+0x210>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <TikTokGame+0x298>)
 8000b34:	2205      	movs	r2, #5
 8000b36:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <TikTokGame+0x2a4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <TikTokGame+0x294>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
    	                break;
 8000b44:	e000      	b.n	8000b48 <TikTokGame+0x210>
    	            default: // multi press do nothing
    	                break;
 8000b46:	bf00      	nop
    	        }
    	        break;
 8000b48:	e03b      	b.n	8000bc2 <TikTokGame+0x28a>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <TikTokGame+0x298>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d833      	bhi.n	8000bbc <TikTokGame+0x284>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <TikTokGame+0x224>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000ba9 	.word	0x08000ba9
 8000b60:	08000b95 	.word	0x08000b95
 8000b64:	08000b81 	.word	0x08000b81
 8000b68:	08000b6d 	.word	0x08000b6d
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <TikTokGame+0x298>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <TikTokGame+0x2a4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
                break;
 8000b7e:	e01d      	b.n	8000bbc <TikTokGame+0x284>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <TikTokGame+0x298>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <TikTokGame+0x2a4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
                break;
 8000b92:	e013      	b.n	8000bbc <TikTokGame+0x284>
            case 2:
                // statements
                game_pick = 2; // pick2
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <TikTokGame+0x298>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <TikTokGame+0x2a4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
                break;
 8000ba6:	e009      	b.n	8000bbc <TikTokGame+0x284>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <TikTokGame+0x2a0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <TikTokGame+0x298>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <TikTokGame+0x2a4>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
                break;
 8000bba:	bf00      	nop
        }
        game_turn = 0;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <TikTokGame+0x294>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
    }
    HAL_Delay(100);//delay
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f000 fa44 	bl	8001050 <HAL_Delay>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000018c 	.word	0x2000018c
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000170 	.word	0x20000170
 8000bd8:	20000190 	.word	0x20000190
 8000bdc:	20000188 	.word	0x20000188

08000be0 <LEDdisplay>:

void LEDdisplay() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	switch (game_winner) {
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <LEDdisplay+0x88>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d037      	beq.n	8000c5c <LEDdisplay+0x7c>
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	dc38      	bgt.n	8000c62 <LEDdisplay+0x82>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d035      	beq.n	8000c60 <LEDdisplay+0x80>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d000      	beq.n	8000bfa <LEDdisplay+0x1a>
	            // Human wins
	            // Add code for the case when the human wins
	            break;
	    }
    // For example:
}
 8000bf8:	e033      	b.n	8000c62 <LEDdisplay+0x82>
	        	SPITx[0] = 0b01000000; // write command
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <LEDdisplay+0x8c>)
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	701a      	strb	r2, [r3, #0]
	        	SPITx[1] = 0x15;       // OLATB register address
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <LEDdisplay+0x8c>)
 8000c02:	2215      	movs	r2, #21
 8000c04:	705a      	strb	r2, [r3, #1]
	        	SPITx[2] = 0b00000001; // set the appropriate bit to turn the LED on
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <LEDdisplay+0x8c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	709a      	strb	r2, [r3, #2]
	        	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <LEDdisplay+0x90>)
 8000c10:	4916      	ldr	r1, [pc, #88]	; (8000c6c <LEDdisplay+0x8c>)
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <LEDdisplay+0x94>)
 8000c14:	f001 fe66 	bl	80028e4 <HAL_SPI_TransmitReceive_IT>
	        	HAL_Delay(100);
 8000c18:	2064      	movs	r0, #100	; 0x64
 8000c1a:	f000 fa19 	bl	8001050 <HAL_Delay>
	        	SPITx[0] = 0b01000000; // write command
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <LEDdisplay+0x8c>)
 8000c20:	2240      	movs	r2, #64	; 0x40
 8000c22:	701a      	strb	r2, [r3, #0]
	        	SPITx[1] = 0x15;       // OLATB register address
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <LEDdisplay+0x8c>)
 8000c26:	2215      	movs	r2, #21
 8000c28:	705a      	strb	r2, [r3, #1]
	        	SPITx[2] = 0b00000010; // clear the appropriate bit to turn the LED off
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <LEDdisplay+0x8c>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	709a      	strb	r2, [r3, #2]
	        	HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c30:	2303      	movs	r3, #3
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <LEDdisplay+0x90>)
 8000c34:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LEDdisplay+0x8c>)
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <LEDdisplay+0x94>)
 8000c38:	f001 fe54 	bl	80028e4 <HAL_SPI_TransmitReceive_IT>
	        	HAL_Delay(100);
 8000c3c:	2064      	movs	r0, #100	; 0x64
 8000c3e:	f000 fa07 	bl	8001050 <HAL_Delay>
                game_pick = 0; // no pick
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <LEDdisplay+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <LEDdisplay+0x9c>)
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <LEDdisplay+0x88>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <LEDdisplay+0xa0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
	            break;
 8000c5a:	e002      	b.n	8000c62 <LEDdisplay+0x82>
	            break;
 8000c5c:	bf00      	nop
 8000c5e:	e000      	b.n	8000c62 <LEDdisplay+0x82>
	            break;
 8000c60:	bf00      	nop
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000188 	.word	0x20000188
 8000c6c:	2000017c 	.word	0x2000017c
 8000c70:	20000170 	.word	0x20000170
 8000c74:	200000c0 	.word	0x200000c0
 8000c78:	20000190 	.word	0x20000190
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	2000018c 	.word	0x2000018c

08000c84 <HAL_SPI_TxRxCpltCallback>:
//
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000c92:	f000 fd0f 	bl	80016b4 <HAL_GPIO_WritePin>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	48000c00 	.word	0x48000c00

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ce6:	f000 fdc5 	bl	8001874 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09e      	sub	sp, #120	; 0x78
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2254      	movs	r2, #84	; 0x54
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f003 fc91 	bl	8004640 <memset>
  if(huart->Instance==LPUART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_UART_MspInit+0xa8>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d136      	bne.n	8000d96 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fadb 	bl	80022f0 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d40:	f7ff ffb0 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_UART_MspInit+0xac>)
 8000d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d48:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <HAL_UART_MspInit+0xac>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_UART_MspInit+0xac>)
 8000d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0xac>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_UART_MspInit+0xac>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_UART_MspInit+0xac>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d74:	230c      	movs	r3, #12
 8000d76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d84:	230c      	movs	r3, #12
 8000d86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 faf5 	bl	8001380 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3778      	adds	r7, #120	; 0x78
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40008000 	.word	0x40008000
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_SPI_MspInit+0x8c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d130      	bne.n	8000e2c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dca:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dce:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000de8:	f043 0304 	orr.w	r3, r3, #4
 8000dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_SPI_MspInit+0x90>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f003 0304 	and.w	r3, r3, #4
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000dfa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4809      	ldr	r0, [pc, #36]	; (8000e3c <HAL_SPI_MspInit+0x94>)
 8000e18:	f000 fab2 	bl	8001380 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2033      	movs	r0, #51	; 0x33
 8000e22:	f000 fa12 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000e26:	2033      	movs	r0, #51	; 0x33
 8000e28:	f000 fa29 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000800 	.word	0x48000800

08000e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_TIM_Base_MspInit+0x38>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10b      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_TIM_Base_MspInit+0x3c>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e56:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <HAL_TIM_Base_MspInit+0x3c>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_TIM_Base_MspInit+0x3c>)
 8000e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40000400 	.word	0x40000400
 8000e7c:	40021000 	.word	0x40021000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ecc:	f000 f8a2 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ed8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000edc:	f000 fc02 	bl	80016e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <SPI3_IRQHandler+0x10>)
 8000eea:	f001 fda9 	bl	8002a40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000c0 	.word	0x200000c0

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f20:	f7ff ffea 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f003 fb81 	bl	8004650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f7ff fae1 	bl	8000514 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f60:	08004700 	.word	0x08004700
  ldr r2, =_sbss
 8000f64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f68:	20000198 	.word	0x20000198

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fe8e 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000194 	.word	0x20000194
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000194 	.word	0x20000194

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d00d      	beq.n	80012e6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e047      	b.n	8001376 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020e 	bic.w	r2, r2, #14
 80012f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001314:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f003 021f 	and.w	r2, r3, #31
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2101      	movs	r1, #1
 8001324:	fa01 f202 	lsl.w	r2, r1, r2
 8001328:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001332:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	2b00      	cmp	r3, #0
 800133a:	d00c      	beq.n	8001356 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800134a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001354:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	4798      	blx	r3
    }
  }
  return status;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800138e:	e15a      	b.n	8001646 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 814c 	beq.w	8001640 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d005      	beq.n	80013c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d130      	bne.n	8001422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013f6:	2201      	movs	r2, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f003 0201 	and.w	r2, r3, #1
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	2b03      	cmp	r3, #3
 800142c:	d017      	beq.n	800145e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d123      	bne.n	80014b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	6939      	ldr	r1, [r7, #16]
 80014ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0203 	and.w	r2, r3, #3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80a6 	beq.w	8001640 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <HAL_GPIO_Init+0x2e4>)
 80014f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f8:	4a5a      	ldr	r2, [pc, #360]	; (8001664 <HAL_GPIO_Init+0x2e4>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001500:	4b58      	ldr	r3, [pc, #352]	; (8001664 <HAL_GPIO_Init+0x2e4>)
 8001502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800150c:	4a56      	ldr	r2, [pc, #344]	; (8001668 <HAL_GPIO_Init+0x2e8>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001536:	d01f      	beq.n	8001578 <HAL_GPIO_Init+0x1f8>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4c      	ldr	r2, [pc, #304]	; (800166c <HAL_GPIO_Init+0x2ec>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d019      	beq.n	8001574 <HAL_GPIO_Init+0x1f4>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4b      	ldr	r2, [pc, #300]	; (8001670 <HAL_GPIO_Init+0x2f0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d013      	beq.n	8001570 <HAL_GPIO_Init+0x1f0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <HAL_GPIO_Init+0x2f4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1ec>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a49      	ldr	r2, [pc, #292]	; (8001678 <HAL_GPIO_Init+0x2f8>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1e8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a48      	ldr	r2, [pc, #288]	; (800167c <HAL_GPIO_Init+0x2fc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1e4>
 8001560:	2305      	movs	r3, #5
 8001562:	e00a      	b.n	800157a <HAL_GPIO_Init+0x1fa>
 8001564:	2306      	movs	r3, #6
 8001566:	e008      	b.n	800157a <HAL_GPIO_Init+0x1fa>
 8001568:	2304      	movs	r3, #4
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x1fa>
 800156c:	2303      	movs	r3, #3
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1fa>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1fa>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1fa>
 8001578:	2300      	movs	r3, #0
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800158a:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x2e8>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <HAL_GPIO_Init+0x300>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015bc:	4a30      	ldr	r2, [pc, #192]	; (8001680 <HAL_GPIO_Init+0x300>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015c2:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_GPIO_Init+0x300>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015e6:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_GPIO_Init+0x300>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <HAL_GPIO_Init+0x300>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <HAL_GPIO_Init+0x300>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <HAL_GPIO_Init+0x300>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800163a:	4a11      	ldr	r2, [pc, #68]	; (8001680 <HAL_GPIO_Init+0x300>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae9d 	bne.w	8001390 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	371c      	adds	r7, #28
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	48001000 	.word	0x48001000
 800167c:	48001400 	.word	0x48001400
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d006      	beq.n	8001708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f806 	bl	8001714 <HAL_GPIO_EXTI_Callback>
  }
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40010400 	.word	0x40010400

08001714 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d141      	bne.n	80017be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800173a:	4b4b      	ldr	r3, [pc, #300]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001746:	d131      	bne.n	80017ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001748:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174e:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	4b43      	ldr	r3, [pc, #268]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001760:	4a41      	ldr	r2, [pc, #260]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2232      	movs	r2, #50	; 0x32
 800176e:	fb02 f303 	mul.w	r3, r2, r3
 8001772:	4a3f      	ldr	r2, [pc, #252]	; (8001870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	3301      	adds	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177e:	e002      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3b01      	subs	r3, #1
 8001784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001786:	4b38      	ldr	r3, [pc, #224]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001792:	d102      	bne.n	800179a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f2      	bne.n	8001780 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d158      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e057      	b.n	800185c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ac:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b2:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017bc:	e04d      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c4:	d141      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d131      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2232      	movs	r2, #50	; 0x32
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	0c9b      	lsrs	r3, r3, #18
 8001806:	3301      	adds	r3, #1
 8001808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180a:	e002      	b.n	8001812 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3b01      	subs	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181e:	d102      	bne.n	8001826 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f2      	bne.n	800180c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001832:	d112      	bne.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e011      	b.n	800185c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001844:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001848:	e007      	b.n	800185a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001858:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40007000 	.word	0x40007000
 800186c:	20000004 	.word	0x20000004
 8001870:	431bde83 	.word	0x431bde83

08001874 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800187e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001882:	6093      	str	r3, [r2, #8]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40007000 	.word	0x40007000

08001894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e2fe      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d075      	beq.n	800199e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b2:	4b97      	ldr	r3, [pc, #604]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018bc:	4b94      	ldr	r3, [pc, #592]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d102      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3e>
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d002      	beq.n	80018d8 <HAL_RCC_OscConfig+0x44>
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d10b      	bne.n	80018f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	4b8d      	ldr	r3, [pc, #564]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d05b      	beq.n	800199c <HAL_RCC_OscConfig+0x108>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d157      	bne.n	800199c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e2d9      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f8:	d106      	bne.n	8001908 <HAL_RCC_OscConfig+0x74>
 80018fa:	4b85      	ldr	r3, [pc, #532]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a84      	ldr	r2, [pc, #528]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e01d      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x98>
 8001912:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7b      	ldr	r2, [pc, #492]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xb0>
 800192c:	4b78      	ldr	r3, [pc, #480]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a77      	ldr	r2, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a74      	ldr	r2, [pc, #464]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 800193e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff fb74 	bl	8001038 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fb70 	bl	8001038 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b64      	cmp	r3, #100	; 0x64
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e29e      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0xc0>
 8001972:	e014      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff fb60 	bl	8001038 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fb5c 	bl	8001038 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	; 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e28a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198e:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0xe8>
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d075      	beq.n	8001a96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019aa:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b4:	4b56      	ldr	r3, [pc, #344]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d102      	bne.n	80019ca <HAL_RCC_OscConfig+0x136>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d002      	beq.n	80019d0 <HAL_RCC_OscConfig+0x13c>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d11f      	bne.n	8001a10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d0:	4b4f      	ldr	r3, [pc, #316]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_OscConfig+0x154>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e25d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b49      	ldr	r3, [pc, #292]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	4946      	ldr	r1, [pc, #280]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019fc:	4b45      	ldr	r3, [pc, #276]	; (8001b14 <HAL_RCC_OscConfig+0x280>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff facd 	bl	8000fa0 <HAL_InitTick>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d043      	beq.n	8001a94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e249      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d023      	beq.n	8001a60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a3c      	ldr	r2, [pc, #240]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff fb08 	bl	8001038 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e232      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3e:	4b34      	ldr	r3, [pc, #208]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	061b      	lsls	r3, r3, #24
 8001a58:	492d      	ldr	r1, [pc, #180]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
 8001a5e:	e01a      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2a      	ldr	r2, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fae4 	bl	8001038 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7ff fae0 	bl	8001038 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e20e      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1e0>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d041      	beq.n	8001b26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d01c      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab0:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff fabd 	bl	8001038 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7ff fab9 	bl	8001038 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1e7      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad4:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ef      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x22e>
 8001ae2:	e020      	b.n	8001b26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x27c>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff faa0 	bl	8001038 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001afa:	e00d      	b.n	8001b18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fa9c 	bl	8001038 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d906      	bls.n	8001b18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1ca      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
 8001b0e:	bf00      	nop
 8001b10:	40021000 	.word	0x40021000
 8001b14:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ea      	bne.n	8001afc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80a6 	beq.w	8001c80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b38:	4b84      	ldr	r3, [pc, #528]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2b4>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x2b6>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00d      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b52:	4a7e      	ldr	r2, [pc, #504]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5a:	4b7c      	ldr	r3, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6a:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <HAL_RCC_OscConfig+0x4bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d118      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b76:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_RCC_OscConfig+0x4bc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a75      	ldr	r2, [pc, #468]	; (8001d50 <HAL_RCC_OscConfig+0x4bc>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b82:	f7ff fa59 	bl	8001038 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8a:	f7ff fa55 	bl	8001038 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e183      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <HAL_RCC_OscConfig+0x4bc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d108      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x32e>
 8001bb0:	4b66      	ldr	r3, [pc, #408]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb6:	4a65      	ldr	r2, [pc, #404]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc0:	e024      	b.n	8001c0c <HAL_RCC_OscConfig+0x378>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d110      	bne.n	8001bec <HAL_RCC_OscConfig+0x358>
 8001bca:	4b60      	ldr	r3, [pc, #384]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd0:	4a5e      	ldr	r2, [pc, #376]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bda:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be0:	4a5a      	ldr	r2, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bea:	e00f      	b.n	8001c0c <HAL_RCC_OscConfig+0x378>
 8001bec:	4b57      	ldr	r3, [pc, #348]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	4a56      	ldr	r2, [pc, #344]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d016      	beq.n	8001c42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c14:	f7ff fa10 	bl	8001038 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fa0c 	bl	8001038 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e138      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ed      	beq.n	8001c1c <HAL_RCC_OscConfig+0x388>
 8001c40:	e015      	b.n	8001c6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7ff f9f5 	bl	8001038 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e121      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1ed      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c6e:	7ffb      	ldrb	r3, [r7, #31]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d03c      	beq.n	8001d06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01c      	beq.n	8001cce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c9a:	4a2c      	ldr	r2, [pc, #176]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f9c8 	bl	8001038 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cac:	f7ff f9c4 	bl	8001038 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e0f2      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cbe:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ef      	beq.n	8001cac <HAL_RCC_OscConfig+0x418>
 8001ccc:	e01b      	b.n	8001d06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cce:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001cd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cde:	f7ff f9ab 	bl	8001038 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce6:	f7ff f9a7 	bl	8001038 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0d5      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf8:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001cfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ef      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80c9 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030c 	and.w	r3, r3, #12
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	f000 8083 	beq.w	8001e24 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d15e      	bne.n	8001de4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_RCC_OscConfig+0x4b8>)
 8001d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff f981 	bl	8001038 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d38:	e00c      	b.n	8001d54 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3a:	f7ff f97d 	bl	8001038 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d905      	bls.n	8001d54 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e0ab      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1ec      	bne.n	8001d3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	4b52      	ldr	r3, [pc, #328]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b52      	ldr	r3, [pc, #328]	; (8001eb0 <HAL_RCC_OscConfig+0x61c>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6a11      	ldr	r1, [r2, #32]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d70:	3a01      	subs	r2, #1
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d7a:	0212      	lsls	r2, r2, #8
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d82:	0852      	lsrs	r2, r2, #1
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0552      	lsls	r2, r2, #21
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d8e:	0852      	lsrs	r2, r2, #1
 8001d90:	3a01      	subs	r2, #1
 8001d92:	0652      	lsls	r2, r2, #25
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d9a:	06d2      	lsls	r2, r2, #27
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	4943      	ldr	r1, [pc, #268]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da4:	4b41      	ldr	r3, [pc, #260]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a40      	ldr	r2, [pc, #256]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db0:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f93c 	bl	8001038 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff f938 	bl	8001038 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e066      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x530>
 8001de2:	e05e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a30      	ldr	r2, [pc, #192]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff f922 	bl	8001038 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff f91e 	bl	8001038 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e04c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4924      	ldr	r1, [pc, #144]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001e1c:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60cb      	str	r3, [r1, #12]
 8001e22:	e03e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e039      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_RCC_OscConfig+0x618>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d12c      	bne.n	8001e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d123      	bne.n	8001e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d11b      	bne.n	8001e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d113      	bne.n	8001e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	019f800c 	.word	0x019f800c
 8001eb4:	feeefffc 	.word	0xfeeefffc

08001eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e11e      	b.n	800210e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b91      	ldr	r3, [pc, #580]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d910      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 020f 	bic.w	r2, r3, #15
 8001ee6:	498c      	ldr	r1, [pc, #560]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b8a      	ldr	r3, [pc, #552]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e106      	b.n	800210e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d073      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d129      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f14:	4b81      	ldr	r3, [pc, #516]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0f4      	b.n	800210e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f24:	f000 f99e 	bl	8002264 <RCC_GetSysClockFreqFromPLLSource>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4a7c      	ldr	r2, [pc, #496]	; (8002120 <HAL_RCC_ClockConfig+0x268>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d93f      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f32:	4b7a      	ldr	r3, [pc, #488]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d033      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d12f      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f52:	4b72      	ldr	r3, [pc, #456]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f5a:	4a70      	ldr	r2, [pc, #448]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e024      	b.n	8001fb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f70:	4b6a      	ldr	r3, [pc, #424]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0c6      	b.n	800210e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	4b66      	ldr	r3, [pc, #408]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0be      	b.n	800210e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f90:	f000 f8ce 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4a61      	ldr	r2, [pc, #388]	; (8002120 <HAL_RCC_ClockConfig+0x268>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d909      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9e:	4b5f      	ldr	r3, [pc, #380]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa6:	4a5d      	ldr	r2, [pc, #372]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 0203 	bic.w	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4957      	ldr	r1, [pc, #348]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc4:	f7ff f838 	bl	8001038 <HAL_GetTick>
 8001fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fcc:	f7ff f834 	bl	8001038 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e095      	b.n	800210e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	4b4e      	ldr	r3, [pc, #312]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 020c 	and.w	r2, r3, #12
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d1eb      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d023      	beq.n	8002048 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b43      	ldr	r3, [pc, #268]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a42      	ldr	r2, [pc, #264]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8002012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002016:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d007      	beq.n	8002034 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002024:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800202c:	4a3b      	ldr	r2, [pc, #236]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 800202e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002034:	4b39      	ldr	r3, [pc, #228]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4936      	ldr	r1, [pc, #216]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
 8002046:	e008      	b.n	800205a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d105      	bne.n	800205a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800204e:	4b33      	ldr	r3, [pc, #204]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	4a32      	ldr	r2, [pc, #200]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 8002054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002058:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800205a:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d21d      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 020f 	bic.w	r2, r3, #15
 8002070:	4929      	ldr	r1, [pc, #164]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002078:	f7fe ffde 	bl	8001038 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7fe ffda 	bl	8001038 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e03b      	b.n	800210e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_ClockConfig+0x260>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d1ed      	bne.n	8002080 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d008      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4917      	ldr	r1, [pc, #92]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ce:	4b13      	ldr	r3, [pc, #76]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	490f      	ldr	r1, [pc, #60]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e2:	f000 f825 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020e6:	4602      	mov	r2, r0
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	490c      	ldr	r1, [pc, #48]	; (8002124 <HAL_RCC_ClockConfig+0x26c>)
 80020f4:	5ccb      	ldrb	r3, [r1, r3]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x270>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x274>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ff4a 	bl	8000fa0 <HAL_InitTick>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40022000 	.word	0x40022000
 800211c:	40021000 	.word	0x40021000
 8002120:	04c4b400 	.word	0x04c4b400
 8002124:	080046b0 	.word	0x080046b0
 8002128:	20000004 	.word	0x20000004
 800212c:	20000008 	.word	0x20000008

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b04      	cmp	r3, #4
 8002140:	d102      	bne.n	8002148 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	e047      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b08      	cmp	r3, #8
 8002152:	d102      	bne.n	800215a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002154:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	e03e      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d136      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002170:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3301      	adds	r3, #1
 800217c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d10c      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800218e:	68d2      	ldr	r2, [r2, #12]
 8002190:	0a12      	lsrs	r2, r2, #8
 8002192:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
      break;
 800219c:	e00c      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800219e:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4a10      	ldr	r2, [pc, #64]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a8:	68d2      	ldr	r2, [r2, #12]
 80021aa:	0a12      	lsrs	r2, r2, #8
 80021ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021b0:	fb02 f303 	mul.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
      break;
 80021b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0e5b      	lsrs	r3, r3, #25
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	3301      	adds	r3, #1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e001      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021d8:	693b      	ldr	r3, [r7, #16]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	371c      	adds	r7, #28
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	00f42400 	.word	0x00f42400
 80021f0:	016e3600 	.word	0x016e3600

080021f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_GetHCLKFreq+0x14>)
 80021fa:	681b      	ldr	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000004 	.word	0x20000004

0800220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002210:	f7ff fff0 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4904      	ldr	r1, [pc, #16]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	f003 031f 	and.w	r3, r3, #31
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	080046c0 	.word	0x080046c0

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800223c:	f7ff ffda 	bl	80021f4 <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0adb      	lsrs	r3, r3, #11
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4904      	ldr	r1, [pc, #16]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	080046c0 	.word	0x080046c0

08002264 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3301      	adds	r3, #1
 8002280:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d10c      	bne.n	80022a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002288:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002292:	68d2      	ldr	r2, [r2, #12]
 8002294:	0a12      	lsrs	r2, r2, #8
 8002296:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800229a:	fb02 f303 	mul.w	r3, r2, r3
 800229e:	617b      	str	r3, [r7, #20]
    break;
 80022a0:	e00c      	b.n	80022bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ac:	68d2      	ldr	r2, [r2, #12]
 80022ae:	0a12      	lsrs	r2, r2, #8
 80022b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    break;
 80022ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0e5b      	lsrs	r3, r3, #25
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	3301      	adds	r3, #1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022d6:	687b      	ldr	r3, [r7, #4]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40021000 	.word	0x40021000
 80022e8:	016e3600 	.word	0x016e3600
 80022ec:	00f42400 	.word	0x00f42400

080022f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022f8:	2300      	movs	r3, #0
 80022fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022fc:	2300      	movs	r3, #0
 80022fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8098 	beq.w	800243e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b40      	ldr	r3, [pc, #256]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002322:	4a3f      	ldr	r2, [pc, #252]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	6593      	str	r3, [r2, #88]	; 0x58
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800233a:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a39      	ldr	r2, [pc, #228]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002346:	f7fe fe77 	bl	8001038 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800234c:	e009      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234e:	f7fe fe73 	bl	8001038 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d902      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	74fb      	strb	r3, [r7, #19]
        break;
 8002360:	e005      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0ef      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d159      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d01e      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d019      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002390:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800239a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a2:	4a1f      	ldr	r2, [pc, #124]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023ac:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023bc:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d016      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7fe fe33 	bl	8001038 <HAL_GetTick>
 80023d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d4:	e00b      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d6:	f7fe fe2f 	bl	8001038 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d902      	bls.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	74fb      	strb	r3, [r7, #19]
            break;
 80023ec:	e006      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ec      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10b      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002418:	e008      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	74bb      	strb	r3, [r7, #18]
 800241e:	e005      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800242c:	7c7b      	ldrb	r3, [r7, #17]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002432:	4ba7      	ldr	r3, [pc, #668]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	4aa6      	ldr	r2, [pc, #664]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800244a:	4ba1      	ldr	r3, [pc, #644]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f023 0203 	bic.w	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	499d      	ldr	r1, [pc, #628]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800246c:	4b98      	ldr	r3, [pc, #608]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f023 020c 	bic.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	4995      	ldr	r1, [pc, #596]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800248e:	4b90      	ldr	r3, [pc, #576]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	498c      	ldr	r1, [pc, #560]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024b0:	4b87      	ldr	r3, [pc, #540]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	4984      	ldr	r1, [pc, #528]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024d2:	4b7f      	ldr	r3, [pc, #508]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	497b      	ldr	r1, [pc, #492]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f4:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4973      	ldr	r1, [pc, #460]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002516:	4b6e      	ldr	r3, [pc, #440]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	496a      	ldr	r1, [pc, #424]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002538:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4962      	ldr	r1, [pc, #392]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	4959      	ldr	r1, [pc, #356]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800257c:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002582:	f023 0203 	bic.w	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	4951      	ldr	r1, [pc, #324]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800259e:	4b4c      	ldr	r3, [pc, #304]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	4948      	ldr	r1, [pc, #288]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025c0:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4940      	ldr	r1, [pc, #256]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e0:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a3a      	ldr	r2, [pc, #232]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	4932      	ldr	r1, [pc, #200]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002616:	d105      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002618:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002622:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d015      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4924      	ldr	r1, [pc, #144]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800264e:	d105      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	4916      	ldr	r1, [pc, #88]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002682:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002686:	d105      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002692:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d019      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026be:	d109      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a02      	ldr	r2, [pc, #8]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	60d3      	str	r3, [r2, #12]
 80026cc:	e002      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d015      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026e0:	4b29      	ldr	r3, [pc, #164]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	4926      	ldr	r1, [pc, #152]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026fe:	d105      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a20      	ldr	r2, [pc, #128]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	4918      	ldr	r1, [pc, #96]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d105      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800273e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002742:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d015      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002750:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	490a      	ldr	r1, [pc, #40]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276e:	d105      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800277c:	7cbb      	ldrb	r3, [r7, #18]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000

0800278c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e09d      	b.n	80028da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ae:	d009      	beq.n	80027c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	61da      	str	r2, [r3, #28]
 80027b6:	e005      	b.n	80027c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fae2 	bl	8000da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002804:	d902      	bls.n	800280c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e002      	b.n	8002812 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002810:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800281a:	d007      	beq.n	800282c <HAL_SPI_Init+0xa0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002824:	d002      	beq.n	800282c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	ea42 0103 	orr.w	r1, r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	0c1b      	lsrs	r3, r3, #16
 8002888:	f003 0204 	and.w	r2, r3, #4
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028a8:	ea42 0103 	orr.w	r1, r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028fc:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002904:	7dbb      	ldrb	r3, [r7, #22]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d00d      	beq.n	8002926 <HAL_SPI_TransmitReceive_IT+0x42>
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002910:	d106      	bne.n	8002920 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d102      	bne.n	8002920 <HAL_SPI_TransmitReceive_IT+0x3c>
 800291a:	7dbb      	ldrb	r3, [r7, #22]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d002      	beq.n	8002926 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002920:	2302      	movs	r3, #2
 8002922:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002924:	e07d      	b.n	8002a22 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_SPI_TransmitReceive_IT+0x54>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_SPI_TransmitReceive_IT+0x54>
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800293c:	e071      	b.n	8002a22 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_SPI_TransmitReceive_IT+0x68>
 8002948:	2302      	movs	r3, #2
 800294a:	e06b      	b.n	8002a24 <HAL_SPI_TransmitReceive_IT+0x140>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b04      	cmp	r3, #4
 800295e:	d003      	beq.n	8002968 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2205      	movs	r2, #5
 8002964:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	887a      	ldrh	r2, [r7, #2]
 8002978:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	887a      	ldrh	r2, [r7, #2]
 800297e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	887a      	ldrh	r2, [r7, #2]
 800298a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800299e:	d906      	bls.n	80029ae <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80029a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_SPI_TransmitReceive_IT+0x150>)
 80029aa:	651a      	str	r2, [r3, #80]	; 0x50
 80029ac:	e005      	b.n	80029ba <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_SPI_TransmitReceive_IT+0x154>)
 80029b2:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <HAL_SPI_TransmitReceive_IT+0x158>)
 80029b8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029c2:	d802      	bhi.n	80029ca <HAL_SPI_TransmitReceive_IT+0xe6>
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d908      	bls.n	80029dc <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e007      	b.n	80029ec <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029ea:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d007      	beq.n	8002a0a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002a20:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	08002dcb 	.word	0x08002dcb
 8002a34:	08002e31 	.word	0x08002e31
 8002a38:	08002c7b 	.word	0x08002c7b
 8002a3c:	08002d39 	.word	0x08002d39

08002a40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10e      	bne.n	8002a80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d004      	beq.n	8002a80 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
    return;
 8002a7e:	e0ce      	b.n	8002c1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_SPI_IRQHandler+0x5e>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
    return;
 8002a9c:	e0bf      	b.n	8002c1e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_SPI_IRQHandler+0x7e>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d105      	bne.n	8002abe <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80b0 	beq.w	8002c1e <HAL_SPI_IRQHandler+0x1de>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80aa 	beq.w	8002c1e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d023      	beq.n	8002b1c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d011      	beq.n	8002b04 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae4:	f043 0204 	orr.w	r2, r3, #4
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	e00b      	b.n	8002b1c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
        return;
 8002b1a:	e080      	b.n	8002c1e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d014      	beq.n	8002b50 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	f043 0208 	orr.w	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d04f      	beq.n	8002c1c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b8a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <HAL_SPI_IRQHandler+0x168>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d034      	beq.n	8002c12 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0203 	bic.w	r2, r2, #3
 8002bb6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d011      	beq.n	8002be4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_SPI_IRQHandler+0x1e4>)
 8002bc6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fb70 	bl	80012b2 <HAL_DMA_Abort_IT>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d016      	beq.n	8002c1a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_SPI_IRQHandler+0x1e4>)
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fb5a 	bl	80012b2 <HAL_DMA_Abort_IT>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002c10:	e003      	b.n	8002c1a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f812 	bl	8002c3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c18:	e000      	b.n	8002c1c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002c1a:	bf00      	nop
    return;
 8002c1c:	bf00      	nop
  }
}
 8002c1e:	3720      	adds	r7, #32
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	08002c51 	.word	0x08002c51

08002c28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f7ff ffe5 	bl	8002c3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d923      	bls.n	8002cd6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b02      	subs	r3, #2
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d11f      	bne.n	8002d04 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	e016      	b.n	8002d04 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f103 020c 	add.w	r2, r3, #12
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	7812      	ldrb	r2, [r2, #0]
 8002ce4:	b2d2      	uxtb	r2, r2
 8002ce6:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10f      	bne.n	8002d30 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d1e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d102      	bne.n	8002d30 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fa14 	bl	8003158 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d912      	bls.n	8002d70 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	1c9a      	adds	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b02      	subs	r3, #2
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d6e:	e012      	b.n	8002d96 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d110      	bne.n	8002dc2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dae:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f9cb 	bl	8003158 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	b292      	uxth	r2, r2
 8002dde:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	1c9a      	adds	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10f      	bne.n	8002e28 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e16:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f998 	bl	8003158 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e28:	bf00      	nop
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	881a      	ldrh	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	1c9a      	adds	r2, r3, #2
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d110      	bne.n	8002e88 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e74:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d102      	bne.n	8002e88 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f968 	bl	8003158 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ea0:	f7fe f8ca 	bl	8001038 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	4413      	add	r3, r2
 8002eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002eb0:	f7fe f8c2 	bl	8001038 <HAL_GetTick>
 8002eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	0d1b      	lsrs	r3, r3, #20
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	fb02 f303 	mul.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ec6:	e054      	b.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d050      	beq.n	8002f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ed0:	f7fe f8b2 	bl	8001038 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d902      	bls.n	8002ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d13d      	bne.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efe:	d111      	bne.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f08:	d004      	beq.n	8002f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d107      	bne.n	8002f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2c:	d10f      	bne.n	8002f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e017      	b.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d19b      	bne.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000004 	.word	0x20000004

08002fa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fb2:	f7fe f841 	bl	8001038 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002fc2:	f7fe f839 	bl	8001038 <HAL_GetTick>
 8002fc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fd0:	4b3d      	ldr	r3, [pc, #244]	; (80030c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00da      	lsls	r2, r3, #3
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	0d1b      	lsrs	r3, r3, #20
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002fe8:	e060      	b.n	80030ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ff0:	d107      	bne.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d104      	bne.n	8003002 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003000:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d050      	beq.n	80030ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800300a:	f7fe f815 	bl	8001038 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003016:	429a      	cmp	r2, r3
 8003018:	d902      	bls.n	8003020 <SPI_WaitFifoStateUntilTimeout+0x80>
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d13d      	bne.n	800309c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800302e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003038:	d111      	bne.n	800305e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003042:	d004      	beq.n	800304e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800304c:	d107      	bne.n	800305e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	d10f      	bne.n	8003088 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e010      	b.n	80030be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d196      	bne.n	8002fea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000004 	.word	0x20000004

080030cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff ff5b 	bl	8002fa0 <SPI_WaitFifoStateUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e027      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2200      	movs	r2, #0
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff fec0 	bl	8002e90 <SPI_WaitFlagStateUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e014      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7ff ff34 	bl	8002fa0 <SPI_WaitFifoStateUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e000      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003160:	f7fd ff6a 	bl	8001038 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0220 	bic.w	r2, r2, #32
 8003174:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	2164      	movs	r1, #100	; 0x64
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffa6 	bl	80030cc <SPI_EndRxTxTransaction>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	2b00      	cmp	r3, #0
 8003198:	d115      	bne.n	80031c6 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d107      	bne.n	80031b6 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff fd3a 	bl	8002c28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80031b4:	e00e      	b.n	80031d4 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fd60 	bl	8000c84 <HAL_SPI_TxRxCpltCallback>
}
 80031c4:	e006      	b.n	80031d4 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fd34 	bl	8002c3c <HAL_SPI_ErrorCallback>
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e049      	b.n	8003282 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fe1c 	bl	8000e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f000 f9bc 	bl	8003598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d001      	beq.n	80032a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e04c      	b.n	800333e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a26      	ldr	r2, [pc, #152]	; (800334c <HAL_TIM_Base_Start+0xc0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d022      	beq.n	80032fc <HAL_TIM_Base_Start+0x70>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d01d      	beq.n	80032fc <HAL_TIM_Base_Start+0x70>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a22      	ldr	r2, [pc, #136]	; (8003350 <HAL_TIM_Base_Start+0xc4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d018      	beq.n	80032fc <HAL_TIM_Base_Start+0x70>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <HAL_TIM_Base_Start+0xc8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d013      	beq.n	80032fc <HAL_TIM_Base_Start+0x70>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_TIM_Base_Start+0xcc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00e      	beq.n	80032fc <HAL_TIM_Base_Start+0x70>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1e      	ldr	r2, [pc, #120]	; (800335c <HAL_TIM_Base_Start+0xd0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d009      	beq.n	80032fc <HAL_TIM_Base_Start+0x70>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <HAL_TIM_Base_Start+0xd4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d004      	beq.n	80032fc <HAL_TIM_Base_Start+0x70>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	; (8003364 <HAL_TIM_Base_Start+0xd8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d115      	bne.n	8003328 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_TIM_Base_Start+0xdc>)
 8003304:	4013      	ands	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b06      	cmp	r3, #6
 800330c:	d015      	beq.n	800333a <HAL_TIM_Base_Start+0xae>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003314:	d011      	beq.n	800333a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003326:	e008      	b.n	800333a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e000      	b.n	800333c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40014000 	.word	0x40014000
 8003364:	40015000 	.word	0x40015000
 8003368:	00010007 	.word	0x00010007

0800336c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_TIM_ConfigClockSource+0x1c>
 8003384:	2302      	movs	r3, #2
 8003386:	e0f6      	b.n	8003576 <HAL_TIM_ConfigClockSource+0x20a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80033a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6f      	ldr	r2, [pc, #444]	; (8003580 <HAL_TIM_ConfigClockSource+0x214>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	f000 80c1 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 80033c8:	4a6d      	ldr	r2, [pc, #436]	; (8003580 <HAL_TIM_ConfigClockSource+0x214>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	f200 80c6 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 80033d0:	4a6c      	ldr	r2, [pc, #432]	; (8003584 <HAL_TIM_ConfigClockSource+0x218>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	f000 80b9 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 80033d8:	4a6a      	ldr	r2, [pc, #424]	; (8003584 <HAL_TIM_ConfigClockSource+0x218>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	f200 80be 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 80033e0:	4a69      	ldr	r2, [pc, #420]	; (8003588 <HAL_TIM_ConfigClockSource+0x21c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f000 80b1 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 80033e8:	4a67      	ldr	r2, [pc, #412]	; (8003588 <HAL_TIM_ConfigClockSource+0x21c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	f200 80b6 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 80033f0:	4a66      	ldr	r2, [pc, #408]	; (800358c <HAL_TIM_ConfigClockSource+0x220>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f000 80a9 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 80033f8:	4a64      	ldr	r2, [pc, #400]	; (800358c <HAL_TIM_ConfigClockSource+0x220>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	f200 80ae 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003400:	4a63      	ldr	r2, [pc, #396]	; (8003590 <HAL_TIM_ConfigClockSource+0x224>)
 8003402:	4293      	cmp	r3, r2
 8003404:	f000 80a1 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003408:	4a61      	ldr	r2, [pc, #388]	; (8003590 <HAL_TIM_ConfigClockSource+0x224>)
 800340a:	4293      	cmp	r3, r2
 800340c:	f200 80a6 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003410:	4a60      	ldr	r2, [pc, #384]	; (8003594 <HAL_TIM_ConfigClockSource+0x228>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f000 8099 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003418:	4a5e      	ldr	r2, [pc, #376]	; (8003594 <HAL_TIM_ConfigClockSource+0x228>)
 800341a:	4293      	cmp	r3, r2
 800341c:	f200 809e 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003420:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003424:	f000 8091 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003428:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800342c:	f200 8096 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003434:	f000 8089 	beq.w	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343c:	f200 808e 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003444:	d03e      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0x158>
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344a:	f200 8087 	bhi.w	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	f000 8086 	beq.w	8003562 <HAL_TIM_ConfigClockSource+0x1f6>
 8003456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345a:	d87f      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 800345c:	2b70      	cmp	r3, #112	; 0x70
 800345e:	d01a      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x12a>
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	d87b      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003464:	2b60      	cmp	r3, #96	; 0x60
 8003466:	d050      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x19e>
 8003468:	2b60      	cmp	r3, #96	; 0x60
 800346a:	d877      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 800346c:	2b50      	cmp	r3, #80	; 0x50
 800346e:	d03c      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x17e>
 8003470:	2b50      	cmp	r3, #80	; 0x50
 8003472:	d873      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003474:	2b40      	cmp	r3, #64	; 0x40
 8003476:	d058      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x1be>
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d86f      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 800347c:	2b30      	cmp	r3, #48	; 0x30
 800347e:	d064      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003480:	2b30      	cmp	r3, #48	; 0x30
 8003482:	d86b      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 8003484:	2b20      	cmp	r3, #32
 8003486:	d060      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d867      	bhi.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
 800348c:	2b00      	cmp	r3, #0
 800348e:	d05c      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003490:	2b10      	cmp	r3, #16
 8003492:	d05a      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x1de>
 8003494:	e062      	b.n	800355c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034a6:	f000 f9a7 	bl	80037f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	609a      	str	r2, [r3, #8]
      break;
 80034c2:	e04f      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d4:	f000 f990 	bl	80037f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e6:	609a      	str	r2, [r3, #8]
      break;
 80034e8:	e03c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 f902 	bl	8003700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2150      	movs	r1, #80	; 0x50
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f95b 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003508:	e02c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 f921 	bl	800375e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2160      	movs	r1, #96	; 0x60
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f94b 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003528:	e01c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	461a      	mov	r2, r3
 8003538:	f000 f8e2 	bl	8003700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2140      	movs	r1, #64	; 0x40
 8003542:	4618      	mov	r0, r3
 8003544:	f000 f93b 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 8003548:	e00c      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f000 f932 	bl	80037be <TIM_ITRx_SetConfig>
      break;
 800355a:	e003      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      break;
 8003560:	e000      	b.n	8003564 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	00100070 	.word	0x00100070
 8003584:	00100060 	.word	0x00100060
 8003588:	00100050 	.word	0x00100050
 800358c:	00100040 	.word	0x00100040
 8003590:	00100030 	.word	0x00100030
 8003594:	00100020 	.word	0x00100020

08003598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a4c      	ldr	r2, [pc, #304]	; (80036dc <TIM_Base_SetConfig+0x144>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d017      	beq.n	80035e0 <TIM_Base_SetConfig+0x48>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d013      	beq.n	80035e0 <TIM_Base_SetConfig+0x48>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a49      	ldr	r2, [pc, #292]	; (80036e0 <TIM_Base_SetConfig+0x148>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00f      	beq.n	80035e0 <TIM_Base_SetConfig+0x48>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a48      	ldr	r2, [pc, #288]	; (80036e4 <TIM_Base_SetConfig+0x14c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00b      	beq.n	80035e0 <TIM_Base_SetConfig+0x48>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a47      	ldr	r2, [pc, #284]	; (80036e8 <TIM_Base_SetConfig+0x150>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <TIM_Base_SetConfig+0x48>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a46      	ldr	r2, [pc, #280]	; (80036ec <TIM_Base_SetConfig+0x154>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d003      	beq.n	80035e0 <TIM_Base_SetConfig+0x48>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a45      	ldr	r2, [pc, #276]	; (80036f0 <TIM_Base_SetConfig+0x158>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d108      	bne.n	80035f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a39      	ldr	r2, [pc, #228]	; (80036dc <TIM_Base_SetConfig+0x144>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d023      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d01f      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a36      	ldr	r2, [pc, #216]	; (80036e0 <TIM_Base_SetConfig+0x148>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01b      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a35      	ldr	r2, [pc, #212]	; (80036e4 <TIM_Base_SetConfig+0x14c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d017      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a34      	ldr	r2, [pc, #208]	; (80036e8 <TIM_Base_SetConfig+0x150>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a33      	ldr	r2, [pc, #204]	; (80036ec <TIM_Base_SetConfig+0x154>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00f      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a33      	ldr	r2, [pc, #204]	; (80036f4 <TIM_Base_SetConfig+0x15c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00b      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a32      	ldr	r2, [pc, #200]	; (80036f8 <TIM_Base_SetConfig+0x160>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <TIM_Base_SetConfig+0x164>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d003      	beq.n	8003642 <TIM_Base_SetConfig+0xaa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <TIM_Base_SetConfig+0x158>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d108      	bne.n	8003654 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <TIM_Base_SetConfig+0x144>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <TIM_Base_SetConfig+0x110>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <TIM_Base_SetConfig+0x154>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d00f      	beq.n	80036a8 <TIM_Base_SetConfig+0x110>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a1a      	ldr	r2, [pc, #104]	; (80036f4 <TIM_Base_SetConfig+0x15c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00b      	beq.n	80036a8 <TIM_Base_SetConfig+0x110>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <TIM_Base_SetConfig+0x160>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <TIM_Base_SetConfig+0x110>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a18      	ldr	r2, [pc, #96]	; (80036fc <TIM_Base_SetConfig+0x164>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <TIM_Base_SetConfig+0x110>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <TIM_Base_SetConfig+0x158>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f023 0201 	bic.w	r2, r3, #1
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]
  }
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40013400 	.word	0x40013400
 80036f0:	40015000 	.word	0x40015000
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400
 80036fc:	40014800 	.word	0x40014800

08003700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 030a 	bic.w	r3, r3, #10
 800373c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375e:	b480      	push	{r7}
 8003760:	b087      	sub	sp, #28
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f023 0210 	bic.w	r2, r3, #16
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003788:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	031b      	lsls	r3, r3, #12
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800379a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	621a      	str	r2, [r3, #32]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037be:	b480      	push	{r7}
 80037c0:	b085      	sub	sp, #20
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	f043 0307 	orr.w	r3, r3, #7
 80037e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
 8003804:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003812:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	021a      	lsls	r2, r3, #8
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	431a      	orrs	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4313      	orrs	r3, r2
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800384c:	2302      	movs	r3, #2
 800384e:	e074      	b.n	800393a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a34      	ldr	r2, [pc, #208]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d009      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a33      	ldr	r2, [pc, #204]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d004      	beq.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a31      	ldr	r2, [pc, #196]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d108      	bne.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003894:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d01d      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1d      	ldr	r2, [pc, #116]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a18      	ldr	r2, [pc, #96]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a11      	ldr	r2, [pc, #68]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10c      	bne.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4313      	orrs	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40012c00 	.word	0x40012c00
 800394c:	40013400 	.word	0x40013400
 8003950:	40015000 	.word	0x40015000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40014000 	.word	0x40014000

08003964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e042      	b.n	80039fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd f9b5 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2224      	movs	r2, #36	; 0x24
 8003992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fb24 	bl	8003ffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f825 	bl	8003a04 <UART_SetConfig>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e01b      	b.n	80039fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fba3 	bl	8004140 <UART_CheckIdleState>
 80039fa:	4603      	mov	r3, r0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a08:	b08c      	sub	sp, #48	; 0x30
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4baa      	ldr	r3, [pc, #680]	; (8003cdc <UART_SetConfig+0x2d8>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a9f      	ldr	r2, [pc, #636]	; (8003ce0 <UART_SetConfig+0x2dc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f023 010f 	bic.w	r1, r3, #15
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a90      	ldr	r2, [pc, #576]	; (8003ce4 <UART_SetConfig+0x2e0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d125      	bne.n	8003af4 <UART_SetConfig+0xf0>
 8003aa8:	4b8f      	ldr	r3, [pc, #572]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d81a      	bhi.n	8003aec <UART_SetConfig+0xe8>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0xb8>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003add 	.word	0x08003add
 8003ac4:	08003ad5 	.word	0x08003ad5
 8003ac8:	08003ae5 	.word	0x08003ae5
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad2:	e116      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ada:	e112      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae2:	e10e      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e10a      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af2:	e106      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7c      	ldr	r2, [pc, #496]	; (8003cec <UART_SetConfig+0x2e8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d138      	bne.n	8003b70 <UART_SetConfig+0x16c>
 8003afe:	4b7a      	ldr	r3, [pc, #488]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f003 030c 	and.w	r3, r3, #12
 8003b08:	2b0c      	cmp	r3, #12
 8003b0a:	d82d      	bhi.n	8003b68 <UART_SetConfig+0x164>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <UART_SetConfig+0x110>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b49 	.word	0x08003b49
 8003b18:	08003b69 	.word	0x08003b69
 8003b1c:	08003b69 	.word	0x08003b69
 8003b20:	08003b69 	.word	0x08003b69
 8003b24:	08003b59 	.word	0x08003b59
 8003b28:	08003b69 	.word	0x08003b69
 8003b2c:	08003b69 	.word	0x08003b69
 8003b30:	08003b69 	.word	0x08003b69
 8003b34:	08003b51 	.word	0x08003b51
 8003b38:	08003b69 	.word	0x08003b69
 8003b3c:	08003b69 	.word	0x08003b69
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b61 	.word	0x08003b61
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4e:	e0d8      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b56:	e0d4      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b5e:	e0d0      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b66:	e0cc      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6e:	e0c8      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a5e      	ldr	r2, [pc, #376]	; (8003cf0 <UART_SetConfig+0x2ec>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d125      	bne.n	8003bc6 <UART_SetConfig+0x1c2>
 8003b7a:	4b5b      	ldr	r3, [pc, #364]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b84:	2b30      	cmp	r3, #48	; 0x30
 8003b86:	d016      	beq.n	8003bb6 <UART_SetConfig+0x1b2>
 8003b88:	2b30      	cmp	r3, #48	; 0x30
 8003b8a:	d818      	bhi.n	8003bbe <UART_SetConfig+0x1ba>
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d00a      	beq.n	8003ba6 <UART_SetConfig+0x1a2>
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d814      	bhi.n	8003bbe <UART_SetConfig+0x1ba>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <UART_SetConfig+0x19a>
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d008      	beq.n	8003bae <UART_SetConfig+0x1aa>
 8003b9c:	e00f      	b.n	8003bbe <UART_SetConfig+0x1ba>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba4:	e0ad      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bac:	e0a9      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003bae:	2304      	movs	r3, #4
 8003bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb4:	e0a5      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bbc:	e0a1      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003bbe:	2310      	movs	r3, #16
 8003bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc4:	e09d      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a4a      	ldr	r2, [pc, #296]	; (8003cf4 <UART_SetConfig+0x2f0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d125      	bne.n	8003c1c <UART_SetConfig+0x218>
 8003bd0:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bda:	2bc0      	cmp	r3, #192	; 0xc0
 8003bdc:	d016      	beq.n	8003c0c <UART_SetConfig+0x208>
 8003bde:	2bc0      	cmp	r3, #192	; 0xc0
 8003be0:	d818      	bhi.n	8003c14 <UART_SetConfig+0x210>
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d00a      	beq.n	8003bfc <UART_SetConfig+0x1f8>
 8003be6:	2b80      	cmp	r3, #128	; 0x80
 8003be8:	d814      	bhi.n	8003c14 <UART_SetConfig+0x210>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <UART_SetConfig+0x1f0>
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d008      	beq.n	8003c04 <UART_SetConfig+0x200>
 8003bf2:	e00f      	b.n	8003c14 <UART_SetConfig+0x210>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfa:	e082      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c02:	e07e      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c04:	2304      	movs	r3, #4
 8003c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0a:	e07a      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c12:	e076      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c14:	2310      	movs	r3, #16
 8003c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1a:	e072      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a35      	ldr	r2, [pc, #212]	; (8003cf8 <UART_SetConfig+0x2f4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d12a      	bne.n	8003c7c <UART_SetConfig+0x278>
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c34:	d01a      	beq.n	8003c6c <UART_SetConfig+0x268>
 8003c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c3a:	d81b      	bhi.n	8003c74 <UART_SetConfig+0x270>
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c40:	d00c      	beq.n	8003c5c <UART_SetConfig+0x258>
 8003c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c46:	d815      	bhi.n	8003c74 <UART_SetConfig+0x270>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <UART_SetConfig+0x250>
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c50:	d008      	beq.n	8003c64 <UART_SetConfig+0x260>
 8003c52:	e00f      	b.n	8003c74 <UART_SetConfig+0x270>
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5a:	e052      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e04e      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c64:	2304      	movs	r3, #4
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6a:	e04a      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c72:	e046      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c74:	2310      	movs	r3, #16
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7a:	e042      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a17      	ldr	r2, [pc, #92]	; (8003ce0 <UART_SetConfig+0x2dc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d13a      	bne.n	8003cfc <UART_SetConfig+0x2f8>
 8003c86:	4b18      	ldr	r3, [pc, #96]	; (8003ce8 <UART_SetConfig+0x2e4>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c94:	d01a      	beq.n	8003ccc <UART_SetConfig+0x2c8>
 8003c96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c9a:	d81b      	bhi.n	8003cd4 <UART_SetConfig+0x2d0>
 8003c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca0:	d00c      	beq.n	8003cbc <UART_SetConfig+0x2b8>
 8003ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca6:	d815      	bhi.n	8003cd4 <UART_SetConfig+0x2d0>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <UART_SetConfig+0x2b0>
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	d008      	beq.n	8003cc4 <UART_SetConfig+0x2c0>
 8003cb2:	e00f      	b.n	8003cd4 <UART_SetConfig+0x2d0>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e022      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	e01e      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cca:	e01a      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003ccc:	2308      	movs	r3, #8
 8003cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd2:	e016      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cda:	e012      	b.n	8003d02 <UART_SetConfig+0x2fe>
 8003cdc:	cfff69f3 	.word	0xcfff69f3
 8003ce0:	40008000 	.word	0x40008000
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40004400 	.word	0x40004400
 8003cf0:	40004800 	.word	0x40004800
 8003cf4:	40004c00 	.word	0x40004c00
 8003cf8:	40005000 	.word	0x40005000
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4aae      	ldr	r2, [pc, #696]	; (8003fc0 <UART_SetConfig+0x5bc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	f040 8097 	bne.w	8003e3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d823      	bhi.n	8003d5e <UART_SetConfig+0x35a>
 8003d16:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <UART_SetConfig+0x318>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d41 	.word	0x08003d41
 8003d20:	08003d5f 	.word	0x08003d5f
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08003d5f 	.word	0x08003d5f
 8003d2c:	08003d4f 	.word	0x08003d4f
 8003d30:	08003d5f 	.word	0x08003d5f
 8003d34:	08003d5f 	.word	0x08003d5f
 8003d38:	08003d5f 	.word	0x08003d5f
 8003d3c:	08003d57 	.word	0x08003d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d40:	f7fe fa64 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8003d44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d46:	e010      	b.n	8003d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d48:	4b9e      	ldr	r3, [pc, #632]	; (8003fc4 <UART_SetConfig+0x5c0>)
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d4c:	e00d      	b.n	8003d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4e:	f7fe f9ef 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003d52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d54:	e009      	b.n	8003d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d5c:	e005      	b.n	8003d6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 8130 	beq.w	8003fd2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	4a94      	ldr	r2, [pc, #592]	; (8003fc8 <UART_SetConfig+0x5c4>)
 8003d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4413      	add	r3, r2
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d305      	bcc.n	8003da2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d903      	bls.n	8003daa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003da8:	e113      	b.n	8003fd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	2200      	movs	r2, #0
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	60fa      	str	r2, [r7, #12]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	4a84      	ldr	r2, [pc, #528]	; (8003fc8 <UART_SetConfig+0x5c4>)
 8003db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dcc:	f7fc fa24 	bl	8000218 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	020b      	lsls	r3, r1, #8
 8003de2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003de6:	0202      	lsls	r2, r0, #8
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	6849      	ldr	r1, [r1, #4]
 8003dec:	0849      	lsrs	r1, r1, #1
 8003dee:	2000      	movs	r0, #0
 8003df0:	460c      	mov	r4, r1
 8003df2:	4605      	mov	r5, r0
 8003df4:	eb12 0804 	adds.w	r8, r2, r4
 8003df8:	eb43 0905 	adc.w	r9, r3, r5
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	469a      	mov	sl, r3
 8003e04:	4693      	mov	fp, r2
 8003e06:	4652      	mov	r2, sl
 8003e08:	465b      	mov	r3, fp
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	f7fc fa03 	bl	8000218 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4613      	mov	r3, r2
 8003e18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e20:	d308      	bcc.n	8003e34 <UART_SetConfig+0x430>
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e28:	d204      	bcs.n	8003e34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6a3a      	ldr	r2, [r7, #32]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	e0ce      	b.n	8003fd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e3a:	e0ca      	b.n	8003fd2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e44:	d166      	bne.n	8003f14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003e46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d827      	bhi.n	8003e9e <UART_SetConfig+0x49a>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <UART_SetConfig+0x450>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e81 	.word	0x08003e81
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003e9f 	.word	0x08003e9f
 8003e64:	08003e8f 	.word	0x08003e8f
 8003e68:	08003e9f 	.word	0x08003e9f
 8003e6c:	08003e9f 	.word	0x08003e9f
 8003e70:	08003e9f 	.word	0x08003e9f
 8003e74:	08003e97 	.word	0x08003e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7fe f9c8 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8003e7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e7e:	e014      	b.n	8003eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7fe f9da 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8003e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e86:	e010      	b.n	8003eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e88:	4b4e      	ldr	r3, [pc, #312]	; (8003fc4 <UART_SetConfig+0x5c0>)
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e8c:	e00d      	b.n	8003eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e8e:	f7fe f94f 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003e92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e94:	e009      	b.n	8003eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e9c:	e005      	b.n	8003eaa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8090 	beq.w	8003fd2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	4a44      	ldr	r2, [pc, #272]	; (8003fc8 <UART_SetConfig+0x5c4>)
 8003eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec4:	005a      	lsls	r2, r3, #1
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	441a      	add	r2, r3
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	d916      	bls.n	8003f0c <UART_SetConfig+0x508>
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d212      	bcs.n	8003f0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	f023 030f 	bic.w	r3, r3, #15
 8003eee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	8bfb      	ldrh	r3, [r7, #30]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	8bfa      	ldrh	r2, [r7, #30]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	e062      	b.n	8003fd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f12:	e05e      	b.n	8003fd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d828      	bhi.n	8003f6e <UART_SetConfig+0x56a>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x520>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f51 	.word	0x08003f51
 8003f2c:	08003f59 	.word	0x08003f59
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f5f 	.word	0x08003f5f
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f6f 	.word	0x08003f6f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe f960 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 8003f4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f4e:	e014      	b.n	8003f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f50:	f7fe f972 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 8003f54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f56:	e010      	b.n	8003f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <UART_SetConfig+0x5c0>)
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f5c:	e00d      	b.n	8003f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7fe f8e7 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8003f62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f64:	e009      	b.n	8003f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f6c:	e005      	b.n	8003f7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f78:	bf00      	nop
    }

    if (pclk != 0U)
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d028      	beq.n	8003fd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	4a10      	ldr	r2, [pc, #64]	; (8003fc8 <UART_SetConfig+0x5c4>)
 8003f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	441a      	add	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	d910      	bls.n	8003fcc <UART_SetConfig+0x5c8>
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d20c      	bcs.n	8003fcc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60da      	str	r2, [r3, #12]
 8003fbc:	e009      	b.n	8003fd2 <UART_SetConfig+0x5ce>
 8003fbe:	bf00      	nop
 8003fc0:	40008000 	.word	0x40008000
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	080046c8 	.word	0x080046c8
      }
      else
      {
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2200      	movs	r2, #0
 8003fec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003fee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3730      	adds	r7, #48	; 0x30
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01a      	beq.n	8004112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fa:	d10a      	bne.n	8004112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b098      	sub	sp, #96	; 0x60
 8004144:	af02      	add	r7, sp, #8
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004150:	f7fc ff72 	bl	8001038 <HAL_GetTick>
 8004154:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b08      	cmp	r3, #8
 8004162:	d12f      	bne.n	80041c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416c:	2200      	movs	r2, #0
 800416e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f88e 	bl	8004294 <UART_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d022      	beq.n	80041c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800418c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800418e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004192:	653b      	str	r3, [r7, #80]	; 0x50
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419c:	647b      	str	r3, [r7, #68]	; 0x44
 800419e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e6      	bne.n	800417e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e063      	b.n	800428c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d149      	bne.n	8004266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041da:	2200      	movs	r2, #0
 80041dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f857 	bl	8004294 <UART_WaitOnFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d03c      	beq.n	8004266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	e853 3f00 	ldrex	r3, [r3]
 80041f8:	623b      	str	r3, [r7, #32]
   return(result);
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420a:	633b      	str	r3, [r7, #48]	; 0x30
 800420c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004212:	e841 2300 	strex	r3, r2, [r1]
 8004216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1e6      	bne.n	80041ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	e853 3f00 	ldrex	r3, [r3]
 800422c:	60fb      	str	r3, [r7, #12]
   return(result);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	64bb      	str	r3, [r7, #72]	; 0x48
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800423e:	61fa      	str	r2, [r7, #28]
 8004240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	e841 2300 	strex	r3, r2, [r1]
 800424a:	617b      	str	r3, [r7, #20]
   return(result);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e5      	bne.n	800421e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e012      	b.n	800428c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2220      	movs	r2, #32
 8004272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3758      	adds	r7, #88	; 0x58
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a4:	e04f      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d04b      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fc fec3 	bl	8001038 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e04e      	b.n	8004366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d037      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d034      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d031      	beq.n	8004346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d110      	bne.n	8004312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2208      	movs	r2, #8
 80042f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f838 	bl	800436e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2208      	movs	r2, #8
 8004302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e029      	b.n	8004366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	d111      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800432a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f81e 	bl	800436e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e00f      	b.n	8004366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	429a      	cmp	r2, r3
 8004362:	d0a0      	beq.n	80042a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800436e:	b480      	push	{r7}
 8004370:	b095      	sub	sp, #84	; 0x54
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	e853 3f00 	ldrex	r3, [r3]
 8004382:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004386:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800438a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004394:	643b      	str	r3, [r7, #64]	; 0x40
 8004396:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004398:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800439a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800439c:	e841 2300 	strex	r3, r2, [r1]
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1e6      	bne.n	8004376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043be:	f023 0301 	bic.w	r3, r3, #1
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3308      	adds	r3, #8
 80043ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e3      	bne.n	80043a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d118      	bne.n	800441a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f023 0310 	bic.w	r3, r3, #16
 80043fc:	647b      	str	r3, [r7, #68]	; 0x44
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6979      	ldr	r1, [r7, #20]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	613b      	str	r3, [r7, #16]
   return(result);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e6      	bne.n	80043e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800442e:	bf00      	nop
 8004430:	3754      	adds	r7, #84	; 0x54
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_UARTEx_DisableFifoMode+0x16>
 800444c:	2302      	movs	r3, #2
 800444e:	e027      	b.n	80044a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	; 0x24
 800445c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800447e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e02d      	b.n	8004520 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2224      	movs	r2, #36	; 0x24
 80044d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f84f 	bl	80045a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800453c:	2302      	movs	r3, #2
 800453e:	e02d      	b.n	800459c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f811 	bl	80045a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d108      	bne.n	80045c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045c4:	e031      	b.n	800462a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045c6:	2308      	movs	r3, #8
 80045c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045ca:	2308      	movs	r3, #8
 80045cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	0e5b      	lsrs	r3, r3, #25
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	0f5b      	lsrs	r3, r3, #29
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	7b3a      	ldrb	r2, [r7, #12]
 80045f2:	4911      	ldr	r1, [pc, #68]	; (8004638 <UARTEx_SetNbDataToProcess+0x94>)
 80045f4:	5c8a      	ldrb	r2, [r1, r2]
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045fa:	7b3a      	ldrb	r2, [r7, #12]
 80045fc:	490f      	ldr	r1, [pc, #60]	; (800463c <UARTEx_SetNbDataToProcess+0x98>)
 80045fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004600:	fb93 f3f2 	sdiv	r3, r3, r2
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	7b7a      	ldrb	r2, [r7, #13]
 8004610:	4909      	ldr	r1, [pc, #36]	; (8004638 <UARTEx_SetNbDataToProcess+0x94>)
 8004612:	5c8a      	ldrb	r2, [r1, r2]
 8004614:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004618:	7b7a      	ldrb	r2, [r7, #13]
 800461a:	4908      	ldr	r1, [pc, #32]	; (800463c <UARTEx_SetNbDataToProcess+0x98>)
 800461c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800461e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004622:	b29a      	uxth	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	080046e0 	.word	0x080046e0
 800463c:	080046e8 	.word	0x080046e8

08004640 <memset>:
 8004640:	4402      	add	r2, r0
 8004642:	4603      	mov	r3, r0
 8004644:	4293      	cmp	r3, r2
 8004646:	d100      	bne.n	800464a <memset+0xa>
 8004648:	4770      	bx	lr
 800464a:	f803 1b01 	strb.w	r1, [r3], #1
 800464e:	e7f9      	b.n	8004644 <memset+0x4>

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4d0d      	ldr	r5, [pc, #52]	; (8004688 <__libc_init_array+0x38>)
 8004654:	4c0d      	ldr	r4, [pc, #52]	; (800468c <__libc_init_array+0x3c>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	2600      	movs	r6, #0
 800465c:	42a6      	cmp	r6, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	4d0b      	ldr	r5, [pc, #44]	; (8004690 <__libc_init_array+0x40>)
 8004662:	4c0c      	ldr	r4, [pc, #48]	; (8004694 <__libc_init_array+0x44>)
 8004664:	f000 f818 	bl	8004698 <_init>
 8004668:	1b64      	subs	r4, r4, r5
 800466a:	10a4      	asrs	r4, r4, #2
 800466c:	2600      	movs	r6, #0
 800466e:	42a6      	cmp	r6, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f855 3b04 	ldr.w	r3, [r5], #4
 8004678:	4798      	blx	r3
 800467a:	3601      	adds	r6, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004682:	4798      	blx	r3
 8004684:	3601      	adds	r6, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	080046f8 	.word	0x080046f8
 800468c:	080046f8 	.word	0x080046f8
 8004690:	080046f8 	.word	0x080046f8
 8004694:	080046fc 	.word	0x080046fc

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
