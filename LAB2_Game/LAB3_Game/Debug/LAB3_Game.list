
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080046c4  080046c4  000146c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800470c  0800470c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800470c  0800470c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000010  08004724  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004724  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000143ec  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b5  00000000  00000000  0003446f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e5c  00000000  00000000  00037d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025e75  00000000  00000000  00038bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015070  00000000  00000000  0005ea41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa142  00000000  00000000  00073ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e5c  00000000  00000000  0016dbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00172a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080046ac 	.word	0x080046ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080046ac 	.word	0x080046ac

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fd33 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81a 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f93a 	bl	8000798 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f862 	bl	80005ec <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000528:	f000 f8aa 	bl	8000680 <MX_SPI3_Init>
  MX_TIM3_Init();
 800052c:	f000 f8e6 	bl	80006fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <main+0x3c>)
 8000532:	f002 feb5 	bl	80032a0 <HAL_TIM_Base_Start>
  SPITxRx_Setup();
 8000536:	f000 f9bf 	bl	80008b8 <SPITxRx_Setup>
  TikTokGame();
 800053a:	f000 f9fd 	bl	8000938 <TikTokGame>
  LEDdisplay();
 800053e:	f000 fb4f 	bl	8000be0 <LEDdisplay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000542:	f000 f9cf 	bl	80008e4 <SPITxRx_readIO>
	  TikTokGame();
 8000546:	f000 f9f7 	bl	8000938 <TikTokGame>
	  LEDdisplay();
 800054a:	f000 fb49 	bl	8000be0 <LEDdisplay>
  {
 800054e:	e7f8      	b.n	8000542 <main+0x2e>
 8000550:	20000124 	.word	0x20000124

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f004 f876 	bl	8004654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	2000      	movs	r0, #0
 8000578:	f001 f8e2 	bl	8001740 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f97c 	bl	80018a8 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b6:	f000 fb7f 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc7a 	bl	8001ecc <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005de:	f000 fb6b 	bl	8000cb8 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <MX_LPUART1_UART_Init+0x90>)
 80005f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000630:	f003 f9a2 	bl	8003978 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 fb3d 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000642:	f003 ff3d 	bl	80044c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800064c:	f000 fb34 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000654:	f003 ff72 	bl	800453c <HAL_UARTEx_SetRxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065e:	f000 fb2b 	bl	8000cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000664:	f003 fef3 	bl	800444e <HAL_UARTEx_DisableFifoMode>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066e:	f000 fb23 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000002c 	.word	0x2000002c
 800067c:	40008000 	.word	0x40008000

08000680 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_SPI3_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_SPI3_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_SPI3_Init+0x74>)
 800068c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_SPI3_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_SPI3_Init+0x74>)
 800069a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800069e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006b6:	2238      	movs	r2, #56	; 0x38
 80006b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006da:	2208      	movs	r2, #8
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_SPI3_Init+0x74>)
 80006e0:	f002 f85e 	bl	80027a0 <HAL_SPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 fae5 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000c0 	.word	0x200000c0
 80006f8:	40003c00 	.word	0x40003c00

080006fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM3_Init+0x94>)
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_TIM3_Init+0x98>)
 800071e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_TIM3_Init+0x94>)
 8000722:	f244 2267 	movw	r2, #16999	; 0x4267
 8000726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_TIM3_Init+0x94>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800072e:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_TIM3_Init+0x94>)
 8000730:	2263      	movs	r2, #99	; 0x63
 8000732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_TIM3_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_TIM3_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000740:	4813      	ldr	r0, [pc, #76]	; (8000790 <MX_TIM3_Init+0x94>)
 8000742:	f002 fd55 	bl	80031f0 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800074c:	f000 fab4 	bl	8000cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0310 	add.w	r3, r7, #16
 800075a:	4619      	mov	r1, r3
 800075c:	480c      	ldr	r0, [pc, #48]	; (8000790 <MX_TIM3_Init+0x94>)
 800075e:	f002 fe0f 	bl	8003380 <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 faa6 	bl	8000cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4619      	mov	r1, r3
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_TIM3_Init+0x94>)
 800077a:	f003 f867 	bl	800384c <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000784:	f000 fa98 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000124 	.word	0x20000124
 8000794:	40000400 	.word	0x40000400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b3f      	ldr	r3, [pc, #252]	; (80008ac <MX_GPIO_Init+0x114>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a3e      	ldr	r2, [pc, #248]	; (80008ac <MX_GPIO_Init+0x114>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b3c      	ldr	r3, [pc, #240]	; (80008ac <MX_GPIO_Init+0x114>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	4b39      	ldr	r3, [pc, #228]	; (80008ac <MX_GPIO_Init+0x114>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a38      	ldr	r2, [pc, #224]	; (80008ac <MX_GPIO_Init+0x114>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <MX_GPIO_Init+0x114>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0320 	and.w	r3, r3, #32
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b33      	ldr	r3, [pc, #204]	; (80008ac <MX_GPIO_Init+0x114>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a32      	ldr	r2, [pc, #200]	; (80008ac <MX_GPIO_Init+0x114>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <MX_GPIO_Init+0x114>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <MX_GPIO_Init+0x114>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a2c      	ldr	r2, [pc, #176]	; (80008ac <MX_GPIO_Init+0x114>)
 80007fc:	f043 0308 	orr.w	r3, r3, #8
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <MX_GPIO_Init+0x114>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <MX_GPIO_Init+0x114>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a26      	ldr	r2, [pc, #152]	; (80008ac <MX_GPIO_Init+0x114>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <MX_GPIO_Init+0x114>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 ff4b 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2104      	movs	r1, #4
 8000836:	481e      	ldr	r0, [pc, #120]	; (80008b0 <MX_GPIO_Init+0x118>)
 8000838:	f000 ff46 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <MX_GPIO_Init+0x11c>)
 8000854:	f000 fd9e 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	2320      	movs	r3, #32
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 fd8f 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000876:	2304      	movs	r3, #4
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4808      	ldr	r0, [pc, #32]	; (80008b0 <MX_GPIO_Init+0x118>)
 800088e:	f000 fd81 	bl	8001394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2028      	movs	r0, #40	; 0x28
 8000898:	f000 fce1 	bl	800125e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800089c:	2028      	movs	r0, #40	; 0x28
 800089e:	f000 fcf8 	bl	8001292 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	; 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000c00 	.word	0x48000c00
 80008b4:	48000800 	.word	0x48000800

080008b8 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */

void SPITxRx_Setup()
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008bc:	2200      	movs	r2, #0
 80008be:	2104      	movs	r1, #4
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <SPITxRx_Setup+0x28>)
 80008c2:	f000 ff01 	bl	80016c8 <HAL_GPIO_WritePin>
HAL_Delay(5);
 80008c6:	2005      	movs	r0, #5
 80008c8:	f000 fbcc 	bl	8001064 <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 80008cc:	2201      	movs	r2, #1
 80008ce:	2104      	movs	r1, #4
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <SPITxRx_Setup+0x28>)
 80008d2:	f000 fef9 	bl	80016c8 <HAL_GPIO_WritePin>
HAL_Delay(5);
 80008d6:	2005      	movs	r0, #5
 80008d8:	f000 fbc4 	bl	8001064 <HAL_Delay>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	48000c00 	.word	0x48000c00

080008e4 <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80008e8:	2104      	movs	r1, #4
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <SPITxRx_readIO+0x44>)
 80008ec:	f000 fed4 	bl	8001698 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d016      	beq.n	8000924 <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80008f6:	2200      	movs	r2, #0
 80008f8:	2104      	movs	r1, #4
 80008fa:	480b      	ldr	r0, [pc, #44]	; (8000928 <SPITxRx_readIO+0x44>)
 80008fc:	f000 fee4 	bl	80016c8 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <SPITxRx_readIO+0x48>)
 8000902:	2241      	movs	r2, #65	; 0x41
 8000904:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <SPITxRx_readIO+0x48>)
 8000908:	2212      	movs	r2, #18
 800090a:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <SPITxRx_readIO+0x48>)
 800090e:	2200      	movs	r2, #0
 8000910:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <SPITxRx_readIO+0x48>)
 8000914:	2200      	movs	r2, #0
 8000916:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000918:	2304      	movs	r3, #4
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SPITxRx_readIO+0x4c>)
 800091c:	4903      	ldr	r1, [pc, #12]	; (800092c <SPITxRx_readIO+0x48>)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <SPITxRx_readIO+0x50>)
 8000920:	f001 ffea 	bl	80028f8 <HAL_SPI_TransmitReceive_IT>
}
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	48000c00 	.word	0x48000c00
 800092c:	2000017c 	.word	0x2000017c
 8000930:	20000170 	.word	0x20000170
 8000934:	200000c0 	.word	0x200000c0

08000938 <TikTokGame>:

void TikTokGame()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 800093c:	4ba3      	ldr	r3, [pc, #652]	; (8000bcc <TikTokGame+0x294>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	f040 8102 	bne.w	8000b4a <TikTokGame+0x212>
    {
    	switch (game_left) {
 8000946:	4ba2      	ldr	r3, [pc, #648]	; (8000bd0 <TikTokGame+0x298>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	2b04      	cmp	r3, #4
 800094e:	f200 8138 	bhi.w	8000bc2 <TikTokGame+0x28a>
 8000952:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <TikTokGame+0x20>)
 8000954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000958:	08000ad3 	.word	0x08000ad3
 800095c:	08000a5b 	.word	0x08000a5b
 8000960:	080009e3 	.word	0x080009e3
 8000964:	08000bc3 	.word	0x08000bc3
 8000968:	0800096d 	.word	0x0800096d
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 800096c:	4b99      	ldr	r3, [pc, #612]	; (8000bd4 <TikTokGame+0x29c>)
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	3b03      	subs	r3, #3
 8000972:	2b04      	cmp	r3, #4
 8000974:	d833      	bhi.n	80009de <TikTokGame+0xa6>
 8000976:	a201      	add	r2, pc, #4	; (adr r2, 800097c <TikTokGame+0x44>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	080009c5 	.word	0x080009c5
 8000980:	080009df 	.word	0x080009df
 8000984:	080009ab 	.word	0x080009ab
 8000988:	08000991 	.word	0x08000991
 800098c:	080009df 	.word	0x080009df
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000990:	4b91      	ldr	r3, [pc, #580]	; (8000bd8 <TikTokGame+0x2a0>)
 8000992:	2201      	movs	r2, #1
 8000994:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000996:	4b8e      	ldr	r3, [pc, #568]	; (8000bd0 <TikTokGame+0x298>)
 8000998:	2204      	movs	r2, #4
 800099a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 800099c:	4b8f      	ldr	r3, [pc, #572]	; (8000bdc <TikTokGame+0x2a4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 80009a2:	4b8a      	ldr	r3, [pc, #552]	; (8000bcc <TikTokGame+0x294>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	601a      	str	r2, [r3, #0]
    	                break;
 80009a8:	e01a      	b.n	80009e0 <TikTokGame+0xa8>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 80009aa:	4b8b      	ldr	r3, [pc, #556]	; (8000bd8 <TikTokGame+0x2a0>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 80009b0:	4b87      	ldr	r3, [pc, #540]	; (8000bd0 <TikTokGame+0x298>)
 80009b2:	2203      	movs	r2, #3
 80009b4:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80009b6:	4b89      	ldr	r3, [pc, #548]	; (8000bdc <TikTokGame+0x2a4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 80009bc:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <TikTokGame+0x294>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
    	                break;
 80009c2:	e00d      	b.n	80009e0 <TikTokGame+0xa8>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 80009c4:	4b84      	ldr	r3, [pc, #528]	; (8000bd8 <TikTokGame+0x2a0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 80009ca:	4b81      	ldr	r3, [pc, #516]	; (8000bd0 <TikTokGame+0x298>)
 80009cc:	2205      	movs	r2, #5
 80009ce:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80009d0:	4b82      	ldr	r3, [pc, #520]	; (8000bdc <TikTokGame+0x2a4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 80009d6:	4b7d      	ldr	r3, [pc, #500]	; (8000bcc <TikTokGame+0x294>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
    	                break;
 80009dc:	e000      	b.n	80009e0 <TikTokGame+0xa8>
    	            default: // multi press do nothing
    	                break;
 80009de:	bf00      	nop
    	        }
    	        break;
 80009e0:	e0ef      	b.n	8000bc2 <TikTokGame+0x28a>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 80009e2:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <TikTokGame+0x29c>)
 80009e4:	789b      	ldrb	r3, [r3, #2]
 80009e6:	3b03      	subs	r3, #3
 80009e8:	2b04      	cmp	r3, #4
 80009ea:	d834      	bhi.n	8000a56 <TikTokGame+0x11e>
 80009ec:	a201      	add	r2, pc, #4	; (adr r2, 80009f4 <TikTokGame+0xbc>)
 80009ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f2:	bf00      	nop
 80009f4:	08000a3d 	.word	0x08000a3d
 80009f8:	08000a57 	.word	0x08000a57
 80009fc:	08000a23 	.word	0x08000a23
 8000a00:	08000a09 	.word	0x08000a09
 8000a04:	08000a57 	.word	0x08000a57
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a08:	4b73      	ldr	r3, [pc, #460]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000a0e:	4b70      	ldr	r3, [pc, #448]	; (8000bd0 <TikTokGame+0x298>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a14:	4b71      	ldr	r3, [pc, #452]	; (8000bdc <TikTokGame+0x2a4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a1a:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <TikTokGame+0x294>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]
    	                break;
 8000a20:	e01a      	b.n	8000a58 <TikTokGame+0x120>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000a22:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000a28:	4b69      	ldr	r3, [pc, #420]	; (8000bd0 <TikTokGame+0x298>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a2e:	4b6b      	ldr	r3, [pc, #428]	; (8000bdc <TikTokGame+0x2a4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a34:	4b65      	ldr	r3, [pc, #404]	; (8000bcc <TikTokGame+0x294>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	601a      	str	r2, [r3, #0]
    	                break;
 8000a3a:	e00d      	b.n	8000a58 <TikTokGame+0x120>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000a3c:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000a42:	4b63      	ldr	r3, [pc, #396]	; (8000bd0 <TikTokGame+0x298>)
 8000a44:	2205      	movs	r2, #5
 8000a46:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a48:	4b64      	ldr	r3, [pc, #400]	; (8000bdc <TikTokGame+0x2a4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000a4e:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <TikTokGame+0x294>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
    	                break;
 8000a54:	e000      	b.n	8000a58 <TikTokGame+0x120>
    	            default: // multi press do nothing
    	                break;
 8000a56:	bf00      	nop
    	        }
    	        break;
 8000a58:	e0b3      	b.n	8000bc2 <TikTokGame+0x28a>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000a5a:	4b5e      	ldr	r3, [pc, #376]	; (8000bd4 <TikTokGame+0x29c>)
 8000a5c:	789b      	ldrb	r3, [r3, #2]
 8000a5e:	3b03      	subs	r3, #3
 8000a60:	2b04      	cmp	r3, #4
 8000a62:	d834      	bhi.n	8000ace <TikTokGame+0x196>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <TikTokGame+0x134>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000ab5 	.word	0x08000ab5
 8000a70:	08000acf 	.word	0x08000acf
 8000a74:	08000a9b 	.word	0x08000a9b
 8000a78:	08000a81 	.word	0x08000a81
 8000a7c:	08000acf 	.word	0x08000acf
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a80:	4b55      	ldr	r3, [pc, #340]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000a86:	4b52      	ldr	r3, [pc, #328]	; (8000bd0 <TikTokGame+0x298>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a8c:	4b53      	ldr	r3, [pc, #332]	; (8000bdc <TikTokGame+0x2a4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a92:	4b4e      	ldr	r3, [pc, #312]	; (8000bcc <TikTokGame+0x294>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	601a      	str	r2, [r3, #0]
    	                break;
 8000a98:	e01a      	b.n	8000ad0 <TikTokGame+0x198>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000a9a:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <TikTokGame+0x2a0>)
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000aa0:	4b4b      	ldr	r3, [pc, #300]	; (8000bd0 <TikTokGame+0x298>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000aa6:	4b4d      	ldr	r3, [pc, #308]	; (8000bdc <TikTokGame+0x2a4>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000aac:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <TikTokGame+0x294>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
    	                break;
 8000ab2:	e00d      	b.n	8000ad0 <TikTokGame+0x198>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000ab4:	4b48      	ldr	r3, [pc, #288]	; (8000bd8 <TikTokGame+0x2a0>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000aba:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <TikTokGame+0x298>)
 8000abc:	2205      	movs	r2, #5
 8000abe:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000ac0:	4b46      	ldr	r3, [pc, #280]	; (8000bdc <TikTokGame+0x2a4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000ac6:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <TikTokGame+0x294>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
    	                break;
 8000acc:	e000      	b.n	8000ad0 <TikTokGame+0x198>
    	            default: // multi press do nothing
    	                break;
 8000ace:	bf00      	nop
    	        }
    	        break;
 8000ad0:	e077      	b.n	8000bc2 <TikTokGame+0x28a>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000ad2:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <TikTokGame+0x29c>)
 8000ad4:	789b      	ldrb	r3, [r3, #2]
 8000ad6:	3b03      	subs	r3, #3
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	d834      	bhi.n	8000b46 <TikTokGame+0x20e>
 8000adc:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <TikTokGame+0x1ac>)
 8000ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae2:	bf00      	nop
 8000ae4:	08000b2d 	.word	0x08000b2d
 8000ae8:	08000b47 	.word	0x08000b47
 8000aec:	08000b13 	.word	0x08000b13
 8000af0:	08000af9 	.word	0x08000af9
 8000af4:	08000b47 	.word	0x08000b47
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000af8:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <TikTokGame+0x2a0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <TikTokGame+0x298>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <TikTokGame+0x2a4>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <TikTokGame+0x294>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
    	                break;
 8000b10:	e01a      	b.n	8000b48 <TikTokGame+0x210>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000b18:	4b2d      	ldr	r3, [pc, #180]	; (8000bd0 <TikTokGame+0x298>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <TikTokGame+0x2a4>)
 8000b20:	2202      	movs	r2, #2
 8000b22:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <TikTokGame+0x294>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
    	                break;
 8000b2a:	e00d      	b.n	8000b48 <TikTokGame+0x210>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000b32:	4b27      	ldr	r3, [pc, #156]	; (8000bd0 <TikTokGame+0x298>)
 8000b34:	2205      	movs	r2, #5
 8000b36:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <TikTokGame+0x2a4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <TikTokGame+0x294>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
    	                break;
 8000b44:	e000      	b.n	8000b48 <TikTokGame+0x210>
    	            default: // multi press do nothing
    	                break;
 8000b46:	bf00      	nop
    	        }
    	        break;
 8000b48:	e03b      	b.n	8000bc2 <TikTokGame+0x28a>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <TikTokGame+0x298>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d833      	bhi.n	8000bbc <TikTokGame+0x284>
 8000b54:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <TikTokGame+0x224>)
 8000b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5a:	bf00      	nop
 8000b5c:	08000ba9 	.word	0x08000ba9
 8000b60:	08000b95 	.word	0x08000b95
 8000b64:	08000b81 	.word	0x08000b81
 8000b68:	08000b6d 	.word	0x08000b6d
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <TikTokGame+0x298>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <TikTokGame+0x2a4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
                break;
 8000b7e:	e01d      	b.n	8000bbc <TikTokGame+0x284>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000b86:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <TikTokGame+0x298>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <TikTokGame+0x2a4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
                break;
 8000b92:	e013      	b.n	8000bbc <TikTokGame+0x284>
            case 2:
                // statements
                game_pick = 2; // pick2
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <TikTokGame+0x2a0>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <TikTokGame+0x298>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <TikTokGame+0x2a4>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
                break;
 8000ba6:	e009      	b.n	8000bbc <TikTokGame+0x284>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <TikTokGame+0x2a0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <TikTokGame+0x298>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <TikTokGame+0x2a4>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
                break;
 8000bba:	bf00      	nop
        }
        game_turn = 0;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <TikTokGame+0x294>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
    }
    HAL_Delay(200);//delay
 8000bc2:	20c8      	movs	r0, #200	; 0xc8
 8000bc4:	f000 fa4e 	bl	8001064 <HAL_Delay>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000018c 	.word	0x2000018c
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000170 	.word	0x20000170
 8000bd8:	20000190 	.word	0x20000190
 8000bdc:	20000188 	.word	0x20000188

08000be0 <LEDdisplay>:

void LEDdisplay() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	switch (game_winner) {
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <LEDdisplay+0xa8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d036      	beq.n	8000c5c <LEDdisplay+0x7c>
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	dc45      	bgt.n	8000c7e <LEDdisplay+0x9e>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d042      	beq.n	8000c7c <LEDdisplay+0x9c>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d000      	beq.n	8000bfc <LEDdisplay+0x1c>
	            SPITx[1] = 0x15;       // OLATB register address
	            SPITx[2] = 0b11111111; // set all LEDs on
	            HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
	            break;
	    }
}
 8000bfa:	e040      	b.n	8000c7e <LEDdisplay+0x9e>
	            for (int i = 0; i < 10; i++) {
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	e028      	b.n	8000c54 <LEDdisplay+0x74>
	                SPITx[0] = 0b01000000; // write command
 8000c02:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <LEDdisplay+0xac>)
 8000c04:	2240      	movs	r2, #64	; 0x40
 8000c06:	701a      	strb	r2, [r3, #0]
	                SPITx[1] = 0x15;       // OLATB register address
 8000c08:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <LEDdisplay+0xac>)
 8000c0a:	2215      	movs	r2, #21
 8000c0c:	705a      	strb	r2, [r3, #1]
	                SPITx[2] = 0b11111111; // set all LEDs on
 8000c0e:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <LEDdisplay+0xac>)
 8000c10:	22ff      	movs	r2, #255	; 0xff
 8000c12:	709a      	strb	r2, [r3, #2]
	                HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c14:	2303      	movs	r3, #3
 8000c16:	4a1e      	ldr	r2, [pc, #120]	; (8000c90 <LEDdisplay+0xb0>)
 8000c18:	491c      	ldr	r1, [pc, #112]	; (8000c8c <LEDdisplay+0xac>)
 8000c1a:	481e      	ldr	r0, [pc, #120]	; (8000c94 <LEDdisplay+0xb4>)
 8000c1c:	f001 fe6c 	bl	80028f8 <HAL_SPI_TransmitReceive_IT>
	                HAL_Delay(500); // Delay for 500ms
 8000c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c24:	f000 fa1e 	bl	8001064 <HAL_Delay>
	                SPITx[0] = 0b01000000; // write command
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <LEDdisplay+0xac>)
 8000c2a:	2240      	movs	r2, #64	; 0x40
 8000c2c:	701a      	strb	r2, [r3, #0]
	                SPITx[1] = 0x15;       // OLATB register address
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <LEDdisplay+0xac>)
 8000c30:	2215      	movs	r2, #21
 8000c32:	705a      	strb	r2, [r3, #1]
	                SPITx[2] = 0b00000000; // set all LEDs off
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <LEDdisplay+0xac>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	709a      	strb	r2, [r3, #2]
	                HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <LEDdisplay+0xb0>)
 8000c3e:	4913      	ldr	r1, [pc, #76]	; (8000c8c <LEDdisplay+0xac>)
 8000c40:	4814      	ldr	r0, [pc, #80]	; (8000c94 <LEDdisplay+0xb4>)
 8000c42:	f001 fe59 	bl	80028f8 <HAL_SPI_TransmitReceive_IT>
	                HAL_Delay(500); // Delay for 500ms
 8000c46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c4a:	f000 fa0b 	bl	8001064 <HAL_Delay>
	            for (int i = 0; i < 10; i++) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3301      	adds	r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b09      	cmp	r3, #9
 8000c58:	ddd3      	ble.n	8000c02 <LEDdisplay+0x22>
	            break;
 8000c5a:	e010      	b.n	8000c7e <LEDdisplay+0x9e>
	            SPITx[0] = 0b01000000; // write command
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <LEDdisplay+0xac>)
 8000c5e:	2240      	movs	r2, #64	; 0x40
 8000c60:	701a      	strb	r2, [r3, #0]
	            SPITx[1] = 0x15;       // OLATB register address
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <LEDdisplay+0xac>)
 8000c64:	2215      	movs	r2, #21
 8000c66:	705a      	strb	r2, [r3, #1]
	            SPITx[2] = 0b11111111; // set all LEDs on
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <LEDdisplay+0xac>)
 8000c6a:	22ff      	movs	r2, #255	; 0xff
 8000c6c:	709a      	strb	r2, [r3, #2]
	            HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c6e:	2303      	movs	r3, #3
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <LEDdisplay+0xb0>)
 8000c72:	4906      	ldr	r1, [pc, #24]	; (8000c8c <LEDdisplay+0xac>)
 8000c74:	4807      	ldr	r0, [pc, #28]	; (8000c94 <LEDdisplay+0xb4>)
 8000c76:	f001 fe3f 	bl	80028f8 <HAL_SPI_TransmitReceive_IT>
	            break;
 8000c7a:	e000      	b.n	8000c7e <LEDdisplay+0x9e>
	            break;
 8000c7c:	bf00      	nop
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000188 	.word	0x20000188
 8000c8c:	2000017c 	.word	0x2000017c
 8000c90:	20000170 	.word	0x20000170
 8000c94:	200000c0 	.word	0x200000c0

08000c98 <HAL_SPI_TxRxCpltCallback>:
//
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000ca6:	f000 fd0f 	bl	80016c8 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	48000c00 	.word	0x48000c00

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <Error_Handler+0x8>
	...

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x44>)
 8000ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x44>)
 8000cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x44>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6593      	str	r3, [r2, #88]	; 0x58
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x44>)
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cfa:	f000 fdc5 	bl	8001888 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b09e      	sub	sp, #120	; 0x78
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2254      	movs	r2, #84	; 0x54
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f003 fc91 	bl	8004654 <memset>
  if(huart->Instance==LPUART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <HAL_UART_MspInit+0xa8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d136      	bne.n	8000daa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 fadb 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff ffb0 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d5c:	4a16      	ldr	r2, [pc, #88]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_UART_MspInit+0xac>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d88:	230c      	movs	r3, #12
 8000d8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f000 faf5 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3778      	adds	r7, #120	; 0x78
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40008000 	.word	0x40008000
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	; (8000e48 <HAL_SPI_MspInit+0x8c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d130      	bne.n	8000e40 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dde:	4b1b      	ldr	r3, [pc, #108]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de2:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_SPI_MspInit+0x90>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e20:	2306      	movs	r3, #6
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <HAL_SPI_MspInit+0x94>)
 8000e2c:	f000 fab2 	bl	8001394 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	2033      	movs	r0, #51	; 0x33
 8000e36:	f000 fa12 	bl	800125e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000e3a:	2033      	movs	r0, #51	; 0x33
 8000e3c:	f000 fa29 	bl	8001292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40003c00 	.word	0x40003c00
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000800 	.word	0x48000800

08000e54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_TIM_Base_MspInit+0x38>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d10b      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6593      	str	r3, [r2, #88]	; 0x58
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_TIM_Base_MspInit+0x3c>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40021000 	.word	0x40021000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f8a2 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000eec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ef0:	f000 fc02 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <SPI3_IRQHandler+0x10>)
 8000efe:	f001 fda9 	bl	8002a54 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200000c0 	.word	0x200000c0

08000f0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3a:	490d      	ldr	r1, [pc, #52]	; (8000f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	; (8000f74 <LoopForever+0xe>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f50:	4c0a      	ldr	r4, [pc, #40]	; (8000f7c <LoopForever+0x16>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f003 fb81 	bl	8004664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f62:	f7ff fad7 	bl	8000514 <main>

08000f66 <LoopForever>:

LoopForever:
    b LoopForever
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
  ldr   r0, =_estack
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f74:	08004714 	.word	0x08004714
  ldr r2, =_sbss
 8000f78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f7c:	20000198 	.word	0x20000198

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>

08000f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f95b 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 f80e 	bl	8000fb4 <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	71fb      	strb	r3, [r7, #7]
 8000fa2:	e001      	b.n	8000fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa4:	f7ff fe8e 	bl	8000cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]

}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_InitTick+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d022      	beq.n	800100e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_InitTick+0x6c>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_InitTick+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f966 	bl	80012ae <HAL_SYSTICK_Config>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10f      	bne.n	8001008 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d809      	bhi.n	8001002 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff6:	f000 f932 	bl	800125e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_InitTick+0x70>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	e007      	b.n	8001012 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e004      	b.n	8001012 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000000c 	.word	0x2000000c
 8001020:	20000004 	.word	0x20000004
 8001024:	20000008 	.word	0x20000008

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_IncTick+0x1c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_IncTick+0x20>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4413      	add	r3, r2
 8001036:	4a03      	ldr	r2, [pc, #12]	; (8001044 <HAL_IncTick+0x1c>)
 8001038:	6013      	str	r3, [r2, #0]
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000194 	.word	0x20000194
 8001048:	2000000c 	.word	0x2000000c

0800104c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_GetTick+0x14>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000194 	.word	0x20000194

08001064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800106c:	f7ff ffee 	bl	800104c <HAL_GetTick>
 8001070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107c:	d004      	beq.n	8001088 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_Delay+0x40>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001088:	bf00      	nop
 800108a:	f7ff ffdf 	bl	800104c <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	429a      	cmp	r2, r3
 8001098:	d8f7      	bhi.n	800108a <HAL_Delay+0x26>
  {
  }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000000c 	.word	0x2000000c

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4907      	ldr	r1, [pc, #28]	; (8001144 <__NVIC_EnableIRQ+0x38>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff29 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800126c:	f7ff ff40 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 8001270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68b9      	ldr	r1, [r7, #8]
 8001276:	6978      	ldr	r0, [r7, #20]
 8001278:	f7ff ff90 	bl	800119c <NVIC_EncodePriority>
 800127c:	4602      	mov	r2, r0
 800127e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff5f 	bl	8001148 <__NVIC_SetPriority>
}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff33 	bl	800110c <__NVIC_EnableIRQ>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffa4 	bl	8001204 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d00d      	beq.n	80012fa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2204      	movs	r2, #4
 80012e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e047      	b.n	800138a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 020e 	bic.w	r2, r2, #14
 8001308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001328:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f003 021f 	and.w	r2, r3, #31
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001346:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00c      	beq.n	800136a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800135e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001368:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
    }
  }
  return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013a2:	e15a      	b.n	800165a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 814c 	beq.w	8001654 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d005      	beq.n	80013d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f003 0201 	and.w	r2, r3, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b03      	cmp	r3, #3
 8001440:	d017      	beq.n	8001472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	2203      	movs	r2, #3
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d123      	bne.n	80014c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	220f      	movs	r2, #15
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	08da      	lsrs	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3208      	adds	r2, #8
 80014c0:	6939      	ldr	r1, [r7, #16]
 80014c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	2203      	movs	r2, #3
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0203 	and.w	r2, r3, #3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 80a6 	beq.w	8001654 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001508:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_GPIO_Init+0x2e4>)
 800150a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150c:	4a5a      	ldr	r2, [pc, #360]	; (8001678 <HAL_GPIO_Init+0x2e4>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6613      	str	r3, [r2, #96]	; 0x60
 8001514:	4b58      	ldr	r3, [pc, #352]	; (8001678 <HAL_GPIO_Init+0x2e4>)
 8001516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001520:	4a56      	ldr	r2, [pc, #344]	; (800167c <HAL_GPIO_Init+0x2e8>)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	3302      	adds	r3, #2
 8001528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0303 	and.w	r3, r3, #3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	220f      	movs	r2, #15
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800154a:	d01f      	beq.n	800158c <HAL_GPIO_Init+0x1f8>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a4c      	ldr	r2, [pc, #304]	; (8001680 <HAL_GPIO_Init+0x2ec>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d019      	beq.n	8001588 <HAL_GPIO_Init+0x1f4>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a4b      	ldr	r2, [pc, #300]	; (8001684 <HAL_GPIO_Init+0x2f0>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d013      	beq.n	8001584 <HAL_GPIO_Init+0x1f0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a4a      	ldr	r2, [pc, #296]	; (8001688 <HAL_GPIO_Init+0x2f4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d00d      	beq.n	8001580 <HAL_GPIO_Init+0x1ec>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a49      	ldr	r2, [pc, #292]	; (800168c <HAL_GPIO_Init+0x2f8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d007      	beq.n	800157c <HAL_GPIO_Init+0x1e8>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a48      	ldr	r2, [pc, #288]	; (8001690 <HAL_GPIO_Init+0x2fc>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d101      	bne.n	8001578 <HAL_GPIO_Init+0x1e4>
 8001574:	2305      	movs	r3, #5
 8001576:	e00a      	b.n	800158e <HAL_GPIO_Init+0x1fa>
 8001578:	2306      	movs	r3, #6
 800157a:	e008      	b.n	800158e <HAL_GPIO_Init+0x1fa>
 800157c:	2304      	movs	r3, #4
 800157e:	e006      	b.n	800158e <HAL_GPIO_Init+0x1fa>
 8001580:	2303      	movs	r3, #3
 8001582:	e004      	b.n	800158e <HAL_GPIO_Init+0x1fa>
 8001584:	2302      	movs	r3, #2
 8001586:	e002      	b.n	800158e <HAL_GPIO_Init+0x1fa>
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_GPIO_Init+0x1fa>
 800158c:	2300      	movs	r3, #0
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	f002 0203 	and.w	r2, r2, #3
 8001594:	0092      	lsls	r2, r2, #2
 8001596:	4093      	lsls	r3, r2
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800159e:	4937      	ldr	r1, [pc, #220]	; (800167c <HAL_GPIO_Init+0x2e8>)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	3302      	adds	r3, #2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <HAL_GPIO_Init+0x300>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d0:	4a30      	ldr	r2, [pc, #192]	; (8001694 <HAL_GPIO_Init+0x300>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d6:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_GPIO_Init+0x300>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015fa:	4a26      	ldr	r2, [pc, #152]	; (8001694 <HAL_GPIO_Init+0x300>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_GPIO_Init+0x300>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4313      	orrs	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_GPIO_Init+0x300>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_GPIO_Init+0x300>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <HAL_GPIO_Init+0x300>)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3301      	adds	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	f47f ae9d 	bne.w	80013a4 <HAL_GPIO_Init+0x10>
  }
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	48001400 	.word	0x48001400
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691a      	ldr	r2, [r3, #16]
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
 80016b4:	e001      	b.n	80016ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e6:	887a      	ldrh	r2, [r7, #2]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f806 	bl	8001728 <HAL_GPIO_EXTI_Callback>
  }
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d141      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800174e:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175a:	d131      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800175c:	4b47      	ldr	r3, [pc, #284]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001762:	4a46      	ldr	r2, [pc, #280]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001768:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800176c:	4b43      	ldr	r3, [pc, #268]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001774:	4a41      	ldr	r2, [pc, #260]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2232      	movs	r2, #50	; 0x32
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	4a3f      	ldr	r2, [pc, #252]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	0c9b      	lsrs	r3, r3, #18
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001792:	e002      	b.n	800179a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3b01      	subs	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a6:	d102      	bne.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f2      	bne.n	8001794 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ba:	d158      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e057      	b.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017c6:	4a2d      	ldr	r2, [pc, #180]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017d0:	e04d      	b.n	800186e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017d8:	d141      	bne.n	800185e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d131      	bne.n	800184c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ee:	4a23      	ldr	r2, [pc, #140]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001800:	4a1e      	ldr	r2, [pc, #120]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2232      	movs	r2, #50	; 0x32
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	0c9b      	lsrs	r3, r3, #18
 800181a:	3301      	adds	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800181e:	e002      	b.n	8001826 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001832:	d102      	bne.n	800183a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f2      	bne.n	8001820 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001846:	d112      	bne.n	800186e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e011      	b.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800185c:	e007      	b.n	800186e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40007000 	.word	0x40007000
 8001880:	20000004 	.word	0x20000004
 8001884:	431bde83 	.word	0x431bde83

08001888 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001892:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001896:	6093      	str	r3, [r2, #8]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000

080018a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e2fe      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d075      	beq.n	80019b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c6:	4b97      	ldr	r3, [pc, #604]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d0:	4b94      	ldr	r3, [pc, #592]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	2b0c      	cmp	r3, #12
 80018de:	d102      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3e>
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d002      	beq.n	80018ec <HAL_RCC_OscConfig+0x44>
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d10b      	bne.n	8001904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ec:	4b8d      	ldr	r3, [pc, #564]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d05b      	beq.n	80019b0 <HAL_RCC_OscConfig+0x108>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d157      	bne.n	80019b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e2d9      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190c:	d106      	bne.n	800191c <HAL_RCC_OscConfig+0x74>
 800190e:	4b85      	ldr	r3, [pc, #532]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a84      	ldr	r2, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xb0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x98>
 8001926:	4b7f      	ldr	r3, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7e      	ldr	r2, [pc, #504]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b7c      	ldr	r3, [pc, #496]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7b      	ldr	r2, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xb0>
 8001940:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a77      	ldr	r2, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b75      	ldr	r3, [pc, #468]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a74      	ldr	r2, [pc, #464]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fb74 	bl	800104c <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff fb70 	bl	800104c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	; 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e29e      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197a:	4b6a      	ldr	r3, [pc, #424]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xc0>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fb60 	bl	800104c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff fb5c 	bl	800104c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e28a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019a2:	4b60      	ldr	r3, [pc, #384]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0xe8>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d075      	beq.n	8001aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	d102      	bne.n	80019de <HAL_RCC_OscConfig+0x136>
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_OscConfig+0x13c>
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	d11f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x154>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e25d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	4946      	ldr	r1, [pc, #280]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a10:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <HAL_RCC_OscConfig+0x280>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff facd 	bl	8000fb4 <HAL_InitTick>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d043      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e249      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d023      	beq.n	8001a74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a3c      	ldr	r2, [pc, #240]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb08 	bl	800104c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a40:	f7ff fb04 	bl	800104c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e232      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	061b      	lsls	r3, r3, #24
 8001a6c:	492d      	ldr	r1, [pc, #180]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
 8001a72:	e01a      	b.n	8001aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a80:	f7ff fae4 	bl	800104c <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a88:	f7ff fae0 	bl	800104c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e20e      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f0      	bne.n	8001a88 <HAL_RCC_OscConfig+0x1e0>
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d041      	beq.n	8001b3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac4:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ace:	f7ff fabd 	bl	800104c <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fab9 	bl	800104c <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e1e7      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0ef      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x22e>
 8001af6:	e020      	b.n	8001b3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff faa0 	bl	800104c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b0e:	e00d      	b.n	8001b2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff fa9c 	bl	800104c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d906      	bls.n	8001b2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1ca      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b2c:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ea      	bne.n	8001b10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80a6 	beq.w	8001c94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b4c:	4b84      	ldr	r3, [pc, #528]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2b4>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x2b6>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00d      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	4a7e      	ldr	r2, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7e:	4b79      	ldr	r3, [pc, #484]	; (8001d64 <HAL_RCC_OscConfig+0x4bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b8a:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x4bc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x4bc>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa59 	bl	800104c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7ff fa55 	bl	800104c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e183      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb0:	4b6c      	ldr	r3, [pc, #432]	; (8001d64 <HAL_RCC_OscConfig+0x4bc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d108      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x32e>
 8001bc4:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a65      	ldr	r2, [pc, #404]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd4:	e024      	b.n	8001c20 <HAL_RCC_OscConfig+0x378>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	d110      	bne.n	8001c00 <HAL_RCC_OscConfig+0x358>
 8001bde:	4b60      	ldr	r3, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be4:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bee:	4b5c      	ldr	r3, [pc, #368]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfe:	e00f      	b.n	8001c20 <HAL_RCC_OscConfig+0x378>
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a56      	ldr	r2, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c10:	4b53      	ldr	r3, [pc, #332]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d016      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff fa10 	bl	800104c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7ff fa0c 	bl	800104c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e138      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ed      	beq.n	8001c30 <HAL_RCC_OscConfig+0x388>
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff f9f9 	bl	800104c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f9f5 	bl	800104c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e121      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ed      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03c      	beq.n	8001d1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cae:	4a2c      	ldr	r2, [pc, #176]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f9c8 	bl	800104c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc0:	f7ff f9c4 	bl	800104c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0f2      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0ef      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x418>
 8001ce0:	e01b      	b.n	8001d1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ce8:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff f9ab 	bl	800104c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cfa:	f7ff f9a7 	bl	800104c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0d5      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ef      	bne.n	8001cfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80c9 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	f000 8083 	beq.w	8001e38 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d15e      	bne.n	8001df8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <HAL_RCC_OscConfig+0x4b8>)
 8001d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f981 	bl	800104c <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4c:	e00c      	b.n	8001d68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff f97d 	bl	800104c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d905      	bls.n	8001d68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0ab      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	4b55      	ldr	r3, [pc, #340]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ec      	bne.n	8001d4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d74:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <HAL_RCC_OscConfig+0x61c>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6a11      	ldr	r1, [r2, #32]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d8e:	0212      	lsls	r2, r2, #8
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d96:	0852      	lsrs	r2, r2, #1
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	0552      	lsls	r2, r2, #21
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001da2:	0852      	lsrs	r2, r2, #1
 8001da4:	3a01      	subs	r2, #1
 8001da6:	0652      	lsls	r2, r2, #25
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dae:	06d2      	lsls	r2, r2, #27
 8001db0:	430a      	orrs	r2, r1
 8001db2:	4943      	ldr	r1, [pc, #268]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc4:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a3d      	ldr	r2, [pc, #244]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f93c 	bl	800104c <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f938 	bl	800104c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e066      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x530>
 8001df6:	e05e      	b.n	8001eb6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df8:	4b31      	ldr	r3, [pc, #196]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a30      	ldr	r2, [pc, #192]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff f922 	bl	800104c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0c:	f7ff f91e 	bl	800104c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e04c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e2a:	4b25      	ldr	r3, [pc, #148]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	4924      	ldr	r1, [pc, #144]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_RCC_OscConfig+0x620>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	60cb      	str	r3, [r1, #12]
 8001e36:	e03e      	b.n	8001eb6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e039      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e44:	4b1e      	ldr	r3, [pc, #120]	; (8001ec0 <HAL_RCC_OscConfig+0x618>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d12c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	3b01      	subs	r3, #1
 8001e64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d123      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d11b      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d113      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	085b      	lsrs	r3, r3, #1
 8001e96:	3b01      	subs	r3, #1
 8001e98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3720      	adds	r7, #32
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	019f800c 	.word	0x019f800c
 8001ec8:	feeefffc 	.word	0xfeeefffc

08001ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e11e      	b.n	8002122 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b91      	ldr	r3, [pc, #580]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d910      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b8e      	ldr	r3, [pc, #568]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 020f 	bic.w	r2, r3, #15
 8001efa:	498c      	ldr	r1, [pc, #560]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b8a      	ldr	r3, [pc, #552]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e106      	b.n	8002122 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d073      	beq.n	8002008 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d129      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f28:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0f4      	b.n	8002122 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f38:	f000 f99e 	bl	8002278 <RCC_GetSysClockFreqFromPLLSource>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4a7c      	ldr	r2, [pc, #496]	; (8002134 <HAL_RCC_ClockConfig+0x268>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d93f      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f46:	4b7a      	ldr	r3, [pc, #488]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d033      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d12f      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f66:	4b72      	ldr	r3, [pc, #456]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f6e:	4a70      	ldr	r2, [pc, #448]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e024      	b.n	8001fc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f84:	4b6a      	ldr	r3, [pc, #424]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0c6      	b.n	8002122 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b66      	ldr	r3, [pc, #408]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0be      	b.n	8002122 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fa4:	f000 f8ce 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4a61      	ldr	r2, [pc, #388]	; (8002134 <HAL_RCC_ClockConfig+0x268>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d909      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fba:	4a5d      	ldr	r2, [pc, #372]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b5a      	ldr	r3, [pc, #360]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4957      	ldr	r1, [pc, #348]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fd8:	f7ff f838 	bl	800104c <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7ff f834 	bl	800104c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e095      	b.n	8002122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b4e      	ldr	r3, [pc, #312]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d023      	beq.n	800205c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a42      	ldr	r2, [pc, #264]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8002026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800202a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002038:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002040:	4a3b      	ldr	r2, [pc, #236]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8002042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4936      	ldr	r1, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
 800205a:	e008      	b.n	800206e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d105      	bne.n	800206e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4a32      	ldr	r2, [pc, #200]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 8002068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800206e:	4b2f      	ldr	r3, [pc, #188]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d21d      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 020f 	bic.w	r2, r3, #15
 8002084:	4929      	ldr	r1, [pc, #164]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	4313      	orrs	r3, r2
 800208a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800208c:	f7fe ffde 	bl	800104c <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	e00a      	b.n	80020aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002094:	f7fe ffda 	bl	800104c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e03b      	b.n	8002122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x260>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1ed      	bne.n	8002094 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4917      	ldr	r1, [pc, #92]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490f      	ldr	r1, [pc, #60]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020f6:	f000 f825 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490c      	ldr	r1, [pc, #48]	; (8002138 <HAL_RCC_ClockConfig+0x26c>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	f003 031f 	and.w	r3, r3, #31
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x270>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_RCC_ClockConfig+0x274>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe ff4a 	bl	8000fb4 <HAL_InitTick>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	04c4b400 	.word	0x04c4b400
 8002138:	080046c4 	.word	0x080046c4
 800213c:	20000004 	.word	0x20000004
 8002140:	20000008 	.word	0x20000008

08002144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800214a:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d102      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	e047      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 030c 	and.w	r3, r3, #12
 8002164:	2b08      	cmp	r3, #8
 8002166:	d102      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e03e      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800216e:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b0c      	cmp	r3, #12
 8002178:	d136      	bne.n	80021e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800217a:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3301      	adds	r3, #1
 8002190:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002198:	4a1a      	ldr	r2, [pc, #104]	; (8002204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a2:	68d2      	ldr	r2, [r2, #12]
 80021a4:	0a12      	lsrs	r2, r2, #8
 80021a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
      break;
 80021b0:	e00c      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021b2:	4a13      	ldr	r2, [pc, #76]	; (8002200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021bc:	68d2      	ldr	r2, [r2, #12]
 80021be:	0a12      	lsrs	r2, r2, #8
 80021c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]
      break;
 80021ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0e5b      	lsrs	r3, r3, #25
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e001      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021ec:	693b      	ldr	r3, [r7, #16]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	371c      	adds	r7, #28
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	00f42400 	.word	0x00f42400
 8002204:	016e3600 	.word	0x016e3600

08002208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <HAL_RCC_GetHCLKFreq+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000004 	.word	0x20000004

08002220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002224:	f7ff fff0 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	4904      	ldr	r1, [pc, #16]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	080046d4 	.word	0x080046d4

0800224c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002250:	f7ff ffda 	bl	8002208 <HAL_RCC_GetHCLKFreq>
 8002254:	4602      	mov	r2, r0
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	0adb      	lsrs	r3, r3, #11
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	4904      	ldr	r1, [pc, #16]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002262:	5ccb      	ldrb	r3, [r1, r3]
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40021000 	.word	0x40021000
 8002274:	080046d4 	.word	0x080046d4

08002278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d10c      	bne.n	80022b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800229c:	4a17      	ldr	r2, [pc, #92]	; (80022fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022a6:	68d2      	ldr	r2, [r2, #12]
 80022a8:	0a12      	lsrs	r2, r2, #8
 80022aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
    break;
 80022b4:	e00c      	b.n	80022d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c0:	68d2      	ldr	r2, [r2, #12]
 80022c2:	0a12      	lsrs	r2, r2, #8
 80022c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022c8:	fb02 f303 	mul.w	r3, r2, r3
 80022cc:	617b      	str	r3, [r7, #20]
    break;
 80022ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0e5b      	lsrs	r3, r3, #25
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022ea:	687b      	ldr	r3, [r7, #4]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	40021000 	.word	0x40021000
 80022fc:	016e3600 	.word	0x016e3600
 8002300:	00f42400 	.word	0x00f42400

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800230c:	2300      	movs	r3, #0
 800230e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002310:	2300      	movs	r3, #0
 8002312:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8098 	beq.w	8002452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b40      	ldr	r3, [pc, #256]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	4a3f      	ldr	r2, [pc, #252]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234a:	2301      	movs	r3, #1
 800234c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800234e:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a39      	ldr	r2, [pc, #228]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800235a:	f7fe fe77 	bl	800104c <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002360:	e009      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002362:	f7fe fe73 	bl	800104c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d902      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	74fb      	strb	r3, [r7, #19]
        break;
 8002374:	e005      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002376:	4b30      	ldr	r3, [pc, #192]	; (8002438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ef      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d159      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002392:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01e      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d019      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023b0:	4b20      	ldr	r3, [pc, #128]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fe33 	bl	800104c <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e8:	e00b      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fe2f 	bl	800104c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d902      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002400:	e006      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0ec      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10b      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002424:	4903      	ldr	r1, [pc, #12]	; (8002434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800242c:	e008      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	74bb      	strb	r3, [r7, #18]
 8002432:	e005      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002440:	7c7b      	ldrb	r3, [r7, #17]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d105      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002446:	4ba7      	ldr	r3, [pc, #668]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	4aa6      	ldr	r2, [pc, #664]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800245e:	4ba1      	ldr	r3, [pc, #644]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f023 0203 	bic.w	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	499d      	ldr	r1, [pc, #628]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002480:	4b98      	ldr	r3, [pc, #608]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 020c 	bic.w	r2, r3, #12
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4995      	ldr	r1, [pc, #596]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024a2:	4b90      	ldr	r3, [pc, #576]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	498c      	ldr	r1, [pc, #560]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024c4:	4b87      	ldr	r3, [pc, #540]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	4984      	ldr	r1, [pc, #528]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024e6:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	497b      	ldr	r1, [pc, #492]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002508:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	4973      	ldr	r1, [pc, #460]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252a:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	496a      	ldr	r1, [pc, #424]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800254c:	4b65      	ldr	r3, [pc, #404]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4962      	ldr	r1, [pc, #392]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256e:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	4959      	ldr	r1, [pc, #356]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002590:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	4951      	ldr	r1, [pc, #324]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025b2:	4b4c      	ldr	r3, [pc, #304]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	4948      	ldr	r1, [pc, #288]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d015      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025d4:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4940      	ldr	r1, [pc, #256]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	4932      	ldr	r1, [pc, #200]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a2c      	ldr	r2, [pc, #176]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002636:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002644:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	4924      	ldr	r1, [pc, #144]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	4916      	ldr	r1, [pc, #88]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800269a:	d105      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a10      	ldr	r2, [pc, #64]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d019      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d2:	d109      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a02      	ldr	r2, [pc, #8]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026de:	60d3      	str	r3, [r2, #12]
 80026e0:	e002      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026f4:	4b29      	ldr	r3, [pc, #164]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	4926      	ldr	r1, [pc, #152]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002714:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800271a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800271e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273a:	4918      	ldr	r1, [pc, #96]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a12      	ldr	r2, [pc, #72]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002766:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800276a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002772:	490a      	ldr	r1, [pc, #40]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002790:	7cbb      	ldrb	r3, [r7, #18]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000

080027a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e09d      	b.n	80028ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d108      	bne.n	80027cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c2:	d009      	beq.n	80027d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
 80027ca:	e005      	b.n	80027d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fae2 	bl	8000dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002818:	d902      	bls.n	8002820 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	e002      	b.n	8002826 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002824:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800282e:	d007      	beq.n	8002840 <HAL_SPI_Init+0xa0>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002838:	d002      	beq.n	8002840 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002878:	431a      	orrs	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	ea42 0103 	orr.w	r1, r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	f003 0204 	and.w	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	431a      	orrs	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028bc:	ea42 0103 	orr.w	r1, r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	69da      	ldr	r2, [r3, #28]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002910:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002918:	7dbb      	ldrb	r3, [r7, #22]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d00d      	beq.n	800293a <HAL_SPI_TransmitReceive_IT+0x42>
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002924:	d106      	bne.n	8002934 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d102      	bne.n	8002934 <HAL_SPI_TransmitReceive_IT+0x3c>
 800292e:	7dbb      	ldrb	r3, [r7, #22]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d002      	beq.n	800293a <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002934:	2302      	movs	r3, #2
 8002936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002938:	e07d      	b.n	8002a36 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_SPI_TransmitReceive_IT+0x54>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_SPI_TransmitReceive_IT+0x54>
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002950:	e071      	b.n	8002a36 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_SPI_TransmitReceive_IT+0x68>
 800295c:	2302      	movs	r3, #2
 800295e:	e06b      	b.n	8002a38 <HAL_SPI_TransmitReceive_IT+0x140>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b04      	cmp	r3, #4
 8002972:	d003      	beq.n	800297c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2205      	movs	r2, #5
 8002978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	887a      	ldrh	r2, [r7, #2]
 800299e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	887a      	ldrh	r2, [r7, #2]
 80029a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029b2:	d906      	bls.n	80029c2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a23      	ldr	r2, [pc, #140]	; (8002a44 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80029b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a22      	ldr	r2, [pc, #136]	; (8002a48 <HAL_SPI_TransmitReceive_IT+0x150>)
 80029be:	651a      	str	r2, [r3, #80]	; 0x50
 80029c0:	e005      	b.n	80029ce <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <HAL_SPI_TransmitReceive_IT+0x154>)
 80029c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <HAL_SPI_TransmitReceive_IT+0x158>)
 80029cc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029d6:	d802      	bhi.n	80029de <HAL_SPI_TransmitReceive_IT+0xe6>
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d908      	bls.n	80029f0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e007      	b.n	8002a00 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029fe:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0a:	2b40      	cmp	r3, #64	; 0x40
 8002a0c:	d007      	beq.n	8002a1e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002a34:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	371c      	adds	r7, #28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	08002ddf 	.word	0x08002ddf
 8002a48:	08002e45 	.word	0x08002e45
 8002a4c:	08002c8f 	.word	0x08002c8f
 8002a50:	08002d4d 	.word	0x08002d4d

08002a54 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d009      	beq.n	8002a94 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
    return;
 8002a92:	e0ce      	b.n	8002c32 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_SPI_IRQHandler+0x5e>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	4798      	blx	r3
    return;
 8002ab0:	e0bf      	b.n	8002c32 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_SPI_IRQHandler+0x7e>
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b0 	beq.w	8002c32 <HAL_SPI_IRQHandler+0x1de>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 80aa 	beq.w	8002c32 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d011      	beq.n	8002b18 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af8:	f043 0204 	orr.w	r2, r3, #4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	e00b      	b.n	8002b30 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
        return;
 8002b2e:	e080      	b.n	8002c32 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f003 0320 	and.w	r3, r3, #32
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d014      	beq.n	8002b64 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	f043 0208 	orr.w	r2, r3, #8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d04f      	beq.n	8002c30 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b9e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d104      	bne.n	8002bbc <HAL_SPI_IRQHandler+0x168>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d034      	beq.n	8002c26 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0203 	bic.w	r2, r2, #3
 8002bca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d011      	beq.n	8002bf8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_SPI_IRQHandler+0x1e4>)
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fb70 	bl	80012c6 <HAL_DMA_Abort_IT>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d016      	beq.n	8002c2e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c04:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <HAL_SPI_IRQHandler+0x1e4>)
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fb5a 	bl	80012c6 <HAL_DMA_Abort_IT>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002c24:	e003      	b.n	8002c2e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f812 	bl	8002c50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002c2c:	e000      	b.n	8002c30 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002c2e:	bf00      	nop
    return;
 8002c30:	bf00      	nop
  }
}
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	08002c65 	.word	0x08002c65

08002c3c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f7ff ffe5 	bl	8002c50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d923      	bls.n	8002cea <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cac:	b292      	uxth	r2, r2
 8002cae:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	1c9a      	adds	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b02      	subs	r3, #2
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d11f      	bne.n	8002d18 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	e016      	b.n	8002d18 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f103 020c 	add.w	r2, r3, #12
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	7812      	ldrb	r2, [r2, #0]
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10f      	bne.n	8002d44 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d32:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa14 	bl	800316c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d912      	bls.n	8002d84 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	881a      	ldrh	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	1c9a      	adds	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b02      	subs	r3, #2
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d82:	e012      	b.n	8002daa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d110      	bne.n	8002dd6 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dc2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f9cb 	bl	800316c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	b292      	uxth	r2, r2
 8002df2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10f      	bne.n	8002e3c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f998 	bl	800316c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d110      	bne.n	8002e9c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e88:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f968 	bl	800316c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002eb4:	f7fe f8ca 	bl	800104c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ec4:	f7fe f8c2 	bl	800104c <HAL_GetTick>
 8002ec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002eca:	4b39      	ldr	r3, [pc, #228]	; (8002fb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	015b      	lsls	r3, r3, #5
 8002ed0:	0d1b      	lsrs	r3, r3, #20
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	fb02 f303 	mul.w	r3, r2, r3
 8002ed8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eda:	e054      	b.n	8002f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d050      	beq.n	8002f86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ee4:	f7fe f8b2 	bl	800104c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d902      	bls.n	8002efa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d13d      	bne.n	8002f76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f12:	d111      	bne.n	8002f38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1c:	d004      	beq.n	8002f28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d107      	bne.n	8002f38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f40:	d10f      	bne.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e017      	b.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	bf0c      	ite	eq
 8002f96:	2301      	moveq	r3, #1
 8002f98:	2300      	movne	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d19b      	bne.n	8002edc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3720      	adds	r7, #32
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000004 	.word	0x20000004

08002fb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fc6:	f7fe f841 	bl	800104c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002fd6:	f7fe f839 	bl	800104c <HAL_GetTick>
 8002fda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00da      	lsls	r2, r3, #3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	0d1b      	lsrs	r3, r3, #20
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ffc:	e060      	b.n	80030c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003004:	d107      	bne.n	8003016 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003014:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d050      	beq.n	80030c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800301e:	f7fe f815 	bl	800104c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	429a      	cmp	r2, r3
 800302c:	d902      	bls.n	8003034 <SPI_WaitFifoStateUntilTimeout+0x80>
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d13d      	bne.n	80030b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003042:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800304c:	d111      	bne.n	8003072 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003056:	d004      	beq.n	8003062 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d107      	bne.n	8003072 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003070:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d10f      	bne.n	800309c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800309a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e010      	b.n	80030d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	3b01      	subs	r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d196      	bne.n	8002ffe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3728      	adds	r7, #40	; 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000004 	.word	0x20000004

080030e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff ff5b 	bl	8002fb4 <SPI_WaitFifoStateUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e027      	b.n	8003164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2200      	movs	r2, #0
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff fec0 	bl	8002ea4 <SPI_WaitFlagStateUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e014      	b.n	8003164 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2200      	movs	r2, #0
 8003142:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff ff34 	bl	8002fb4 <SPI_WaitFifoStateUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003156:	f043 0220 	orr.w	r2, r3, #32
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e000      	b.n	8003164 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003174:	f7fd ff6a 	bl	800104c <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0220 	bic.w	r2, r2, #32
 8003188:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	2164      	movs	r1, #100	; 0x64
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffa6 	bl	80030e0 <SPI_EndRxTxTransaction>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d107      	bne.n	80031ca <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fd3a 	bl	8002c3c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80031c8:	e00e      	b.n	80031e8 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7fd fd60 	bl	8000c98 <HAL_SPI_TxRxCpltCallback>
}
 80031d8:	e006      	b.n	80031e8 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fd34 	bl	8002c50 <HAL_SPI_ErrorCallback>
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e049      	b.n	8003296 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fe1c 	bl	8000e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f000 f9bc 	bl	80035ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e04c      	b.n	8003352 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <HAL_TIM_Base_Start+0xc0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d022      	beq.n	8003310 <HAL_TIM_Base_Start+0x70>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d01d      	beq.n	8003310 <HAL_TIM_Base_Start+0x70>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a22      	ldr	r2, [pc, #136]	; (8003364 <HAL_TIM_Base_Start+0xc4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d018      	beq.n	8003310 <HAL_TIM_Base_Start+0x70>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a21      	ldr	r2, [pc, #132]	; (8003368 <HAL_TIM_Base_Start+0xc8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_TIM_Base_Start+0x70>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1f      	ldr	r2, [pc, #124]	; (800336c <HAL_TIM_Base_Start+0xcc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00e      	beq.n	8003310 <HAL_TIM_Base_Start+0x70>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <HAL_TIM_Base_Start+0xd0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_TIM_Base_Start+0x70>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1c      	ldr	r2, [pc, #112]	; (8003374 <HAL_TIM_Base_Start+0xd4>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_TIM_Base_Start+0x70>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <HAL_TIM_Base_Start+0xd8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d115      	bne.n	800333c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_TIM_Base_Start+0xdc>)
 8003318:	4013      	ands	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b06      	cmp	r3, #6
 8003320:	d015      	beq.n	800334e <HAL_TIM_Base_Start+0xae>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003328:	d011      	beq.n	800334e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333a:	e008      	b.n	800334e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e000      	b.n	8003350 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40013400 	.word	0x40013400
 8003374:	40014000 	.word	0x40014000
 8003378:	40015000 	.word	0x40015000
 800337c:	00010007 	.word	0x00010007

08003380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_TIM_ConfigClockSource+0x1c>
 8003398:	2302      	movs	r3, #2
 800339a:	e0f6      	b.n	800358a <HAL_TIM_ConfigClockSource+0x20a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2202      	movs	r2, #2
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80033ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a6f      	ldr	r2, [pc, #444]	; (8003594 <HAL_TIM_ConfigClockSource+0x214>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	f000 80c1 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 80033dc:	4a6d      	ldr	r2, [pc, #436]	; (8003594 <HAL_TIM_ConfigClockSource+0x214>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	f200 80c6 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 80033e4:	4a6c      	ldr	r2, [pc, #432]	; (8003598 <HAL_TIM_ConfigClockSource+0x218>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	f000 80b9 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 80033ec:	4a6a      	ldr	r2, [pc, #424]	; (8003598 <HAL_TIM_ConfigClockSource+0x218>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	f200 80be 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 80033f4:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_TIM_ConfigClockSource+0x21c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	f000 80b1 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 80033fc:	4a67      	ldr	r2, [pc, #412]	; (800359c <HAL_TIM_ConfigClockSource+0x21c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f200 80b6 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003404:	4a66      	ldr	r2, [pc, #408]	; (80035a0 <HAL_TIM_ConfigClockSource+0x220>)
 8003406:	4293      	cmp	r3, r2
 8003408:	f000 80a9 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 800340c:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <HAL_TIM_ConfigClockSource+0x220>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f200 80ae 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003414:	4a63      	ldr	r2, [pc, #396]	; (80035a4 <HAL_TIM_ConfigClockSource+0x224>)
 8003416:	4293      	cmp	r3, r2
 8003418:	f000 80a1 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 800341c:	4a61      	ldr	r2, [pc, #388]	; (80035a4 <HAL_TIM_ConfigClockSource+0x224>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f200 80a6 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003424:	4a60      	ldr	r2, [pc, #384]	; (80035a8 <HAL_TIM_ConfigClockSource+0x228>)
 8003426:	4293      	cmp	r3, r2
 8003428:	f000 8099 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 800342c:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <HAL_TIM_ConfigClockSource+0x228>)
 800342e:	4293      	cmp	r3, r2
 8003430:	f200 809e 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003434:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003438:	f000 8091 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 800343c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003440:	f200 8096 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003448:	f000 8089 	beq.w	800355e <HAL_TIM_ConfigClockSource+0x1de>
 800344c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003450:	f200 808e 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003458:	d03e      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x158>
 800345a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345e:	f200 8087 	bhi.w	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	f000 8086 	beq.w	8003576 <HAL_TIM_ConfigClockSource+0x1f6>
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	d87f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003470:	2b70      	cmp	r3, #112	; 0x70
 8003472:	d01a      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x12a>
 8003474:	2b70      	cmp	r3, #112	; 0x70
 8003476:	d87b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003478:	2b60      	cmp	r3, #96	; 0x60
 800347a:	d050      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x19e>
 800347c:	2b60      	cmp	r3, #96	; 0x60
 800347e:	d877      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003480:	2b50      	cmp	r3, #80	; 0x50
 8003482:	d03c      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x17e>
 8003484:	2b50      	cmp	r3, #80	; 0x50
 8003486:	d873      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d058      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x1be>
 800348c:	2b40      	cmp	r3, #64	; 0x40
 800348e:	d86f      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d064      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x1de>
 8003494:	2b30      	cmp	r3, #48	; 0x30
 8003496:	d86b      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 8003498:	2b20      	cmp	r3, #32
 800349a:	d060      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x1de>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d867      	bhi.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d05c      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x1de>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d05a      	beq.n	800355e <HAL_TIM_ConfigClockSource+0x1de>
 80034a8:	e062      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	f000 f9a7 	bl	800380c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	609a      	str	r2, [r3, #8]
      break;
 80034d6:	e04f      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	f000 f990 	bl	800380c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034fa:	609a      	str	r2, [r3, #8]
      break;
 80034fc:	e03c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	461a      	mov	r2, r3
 800350c:	f000 f902 	bl	8003714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2150      	movs	r1, #80	; 0x50
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f95b 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 800351c:	e02c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800352a:	461a      	mov	r2, r3
 800352c:	f000 f921 	bl	8003772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2160      	movs	r1, #96	; 0x60
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f94b 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 800353c:	e01c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800354a:	461a      	mov	r2, r3
 800354c:	f000 f8e2 	bl	8003714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2140      	movs	r1, #64	; 0x40
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f93b 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 800355c:	e00c      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4619      	mov	r1, r3
 8003568:	4610      	mov	r0, r2
 800356a:	f000 f932 	bl	80037d2 <TIM_ITRx_SetConfig>
      break;
 800356e:	e003      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e000      	b.n	8003578 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	00100070 	.word	0x00100070
 8003598:	00100060 	.word	0x00100060
 800359c:	00100050 	.word	0x00100050
 80035a0:	00100040 	.word	0x00100040
 80035a4:	00100030 	.word	0x00100030
 80035a8:	00100020 	.word	0x00100020

080035ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a4c      	ldr	r2, [pc, #304]	; (80036f0 <TIM_Base_SetConfig+0x144>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d017      	beq.n	80035f4 <TIM_Base_SetConfig+0x48>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ca:	d013      	beq.n	80035f4 <TIM_Base_SetConfig+0x48>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a49      	ldr	r2, [pc, #292]	; (80036f4 <TIM_Base_SetConfig+0x148>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00f      	beq.n	80035f4 <TIM_Base_SetConfig+0x48>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a48      	ldr	r2, [pc, #288]	; (80036f8 <TIM_Base_SetConfig+0x14c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_Base_SetConfig+0x48>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a47      	ldr	r2, [pc, #284]	; (80036fc <TIM_Base_SetConfig+0x150>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_Base_SetConfig+0x48>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a46      	ldr	r2, [pc, #280]	; (8003700 <TIM_Base_SetConfig+0x154>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_Base_SetConfig+0x48>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a45      	ldr	r2, [pc, #276]	; (8003704 <TIM_Base_SetConfig+0x158>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <TIM_Base_SetConfig+0x144>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d023      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d01f      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a36      	ldr	r2, [pc, #216]	; (80036f4 <TIM_Base_SetConfig+0x148>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01b      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a35      	ldr	r2, [pc, #212]	; (80036f8 <TIM_Base_SetConfig+0x14c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d017      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a34      	ldr	r2, [pc, #208]	; (80036fc <TIM_Base_SetConfig+0x150>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a33      	ldr	r2, [pc, #204]	; (8003700 <TIM_Base_SetConfig+0x154>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a33      	ldr	r2, [pc, #204]	; (8003708 <TIM_Base_SetConfig+0x15c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a32      	ldr	r2, [pc, #200]	; (800370c <TIM_Base_SetConfig+0x160>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a31      	ldr	r2, [pc, #196]	; (8003710 <TIM_Base_SetConfig+0x164>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0xaa>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <TIM_Base_SetConfig+0x158>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <TIM_Base_SetConfig+0x144>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <TIM_Base_SetConfig+0x110>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <TIM_Base_SetConfig+0x154>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00f      	beq.n	80036bc <TIM_Base_SetConfig+0x110>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <TIM_Base_SetConfig+0x15c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00b      	beq.n	80036bc <TIM_Base_SetConfig+0x110>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a19      	ldr	r2, [pc, #100]	; (800370c <TIM_Base_SetConfig+0x160>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d007      	beq.n	80036bc <TIM_Base_SetConfig+0x110>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <TIM_Base_SetConfig+0x164>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0x110>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a13      	ldr	r2, [pc, #76]	; (8003704 <TIM_Base_SetConfig+0x158>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d103      	bne.n	80036c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	611a      	str	r2, [r3, #16]
  }
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40013400 	.word	0x40013400
 8003704:	40015000 	.word	0x40015000
 8003708:	40014000 	.word	0x40014000
 800370c:	40014400 	.word	0x40014400
 8003710:	40014800 	.word	0x40014800

08003714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	f023 0201 	bic.w	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800373e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 030a 	bic.w	r3, r3, #10
 8003750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f023 0210 	bic.w	r2, r3, #16
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800379c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	031b      	lsls	r3, r3, #12
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f043 0307 	orr.w	r3, r3, #7
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	431a      	orrs	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003860:	2302      	movs	r3, #2
 8003862:	e074      	b.n	800394e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a34      	ldr	r2, [pc, #208]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a33      	ldr	r2, [pc, #204]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a31      	ldr	r2, [pc, #196]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d108      	bne.n	80038b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a21      	ldr	r2, [pc, #132]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d01d      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1f      	ldr	r2, [pc, #124]	; (8003968 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a15      	ldr	r2, [pc, #84]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a11      	ldr	r2, [pc, #68]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10c      	bne.n	800393c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40013400 	.word	0x40013400
 8003964:	40015000 	.word	0x40015000
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800
 8003970:	40000c00 	.word	0x40000c00
 8003974:	40014000 	.word	0x40014000

08003978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fd f9b5 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fb24 	bl	8004010 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f825 	bl	8003a18 <UART_SetConfig>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e01b      	b.n	8003a10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fba3 	bl	8004154 <UART_CheckIdleState>
 8003a0e:	4603      	mov	r3, r0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a1c:	b08c      	sub	sp, #48	; 0x30
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4baa      	ldr	r3, [pc, #680]	; (8003cf0 <UART_SetConfig+0x2d8>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a9f      	ldr	r2, [pc, #636]	; (8003cf4 <UART_SetConfig+0x2dc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a80:	4313      	orrs	r3, r2
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003a8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f023 010f 	bic.w	r1, r3, #15
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a90      	ldr	r2, [pc, #576]	; (8003cf8 <UART_SetConfig+0x2e0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d125      	bne.n	8003b08 <UART_SetConfig+0xf0>
 8003abc:	4b8f      	ldr	r3, [pc, #572]	; (8003cfc <UART_SetConfig+0x2e4>)
 8003abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d81a      	bhi.n	8003b00 <UART_SetConfig+0xe8>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <UART_SetConfig+0xb8>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003af1 	.word	0x08003af1
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003af9 	.word	0x08003af9
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae6:	e116      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aee:	e112      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003af0:	2304      	movs	r3, #4
 8003af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af6:	e10e      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003af8:	2308      	movs	r3, #8
 8003afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003afe:	e10a      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b06:	e106      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a7c      	ldr	r2, [pc, #496]	; (8003d00 <UART_SetConfig+0x2e8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d138      	bne.n	8003b84 <UART_SetConfig+0x16c>
 8003b12:	4b7a      	ldr	r3, [pc, #488]	; (8003cfc <UART_SetConfig+0x2e4>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	d82d      	bhi.n	8003b7c <UART_SetConfig+0x164>
 8003b20:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <UART_SetConfig+0x110>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b5d 	.word	0x08003b5d
 8003b2c:	08003b7d 	.word	0x08003b7d
 8003b30:	08003b7d 	.word	0x08003b7d
 8003b34:	08003b7d 	.word	0x08003b7d
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003b7d 	.word	0x08003b7d
 8003b40:	08003b7d 	.word	0x08003b7d
 8003b44:	08003b7d 	.word	0x08003b7d
 8003b48:	08003b65 	.word	0x08003b65
 8003b4c:	08003b7d 	.word	0x08003b7d
 8003b50:	08003b7d 	.word	0x08003b7d
 8003b54:	08003b7d 	.word	0x08003b7d
 8003b58:	08003b75 	.word	0x08003b75
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b62:	e0d8      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003b64:	2302      	movs	r3, #2
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b6a:	e0d4      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b72:	e0d0      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003b74:	2308      	movs	r3, #8
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7a:	e0cc      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b82:	e0c8      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a5e      	ldr	r2, [pc, #376]	; (8003d04 <UART_SetConfig+0x2ec>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d125      	bne.n	8003bda <UART_SetConfig+0x1c2>
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <UART_SetConfig+0x2e4>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b98:	2b30      	cmp	r3, #48	; 0x30
 8003b9a:	d016      	beq.n	8003bca <UART_SetConfig+0x1b2>
 8003b9c:	2b30      	cmp	r3, #48	; 0x30
 8003b9e:	d818      	bhi.n	8003bd2 <UART_SetConfig+0x1ba>
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d00a      	beq.n	8003bba <UART_SetConfig+0x1a2>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d814      	bhi.n	8003bd2 <UART_SetConfig+0x1ba>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <UART_SetConfig+0x19a>
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d008      	beq.n	8003bc2 <UART_SetConfig+0x1aa>
 8003bb0:	e00f      	b.n	8003bd2 <UART_SetConfig+0x1ba>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb8:	e0ad      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc0:	e0a9      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003bc2:	2304      	movs	r3, #4
 8003bc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc8:	e0a5      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003bca:	2308      	movs	r3, #8
 8003bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd0:	e0a1      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003bd2:	2310      	movs	r3, #16
 8003bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bd8:	e09d      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a4a      	ldr	r2, [pc, #296]	; (8003d08 <UART_SetConfig+0x2f0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d125      	bne.n	8003c30 <UART_SetConfig+0x218>
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <UART_SetConfig+0x2e4>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003bee:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf0:	d016      	beq.n	8003c20 <UART_SetConfig+0x208>
 8003bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf4:	d818      	bhi.n	8003c28 <UART_SetConfig+0x210>
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d00a      	beq.n	8003c10 <UART_SetConfig+0x1f8>
 8003bfa:	2b80      	cmp	r3, #128	; 0x80
 8003bfc:	d814      	bhi.n	8003c28 <UART_SetConfig+0x210>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <UART_SetConfig+0x1f0>
 8003c02:	2b40      	cmp	r3, #64	; 0x40
 8003c04:	d008      	beq.n	8003c18 <UART_SetConfig+0x200>
 8003c06:	e00f      	b.n	8003c28 <UART_SetConfig+0x210>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0e:	e082      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c10:	2302      	movs	r3, #2
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e07e      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c18:	2304      	movs	r3, #4
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e07a      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c20:	2308      	movs	r3, #8
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e076      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c28:	2310      	movs	r3, #16
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e072      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a35      	ldr	r2, [pc, #212]	; (8003d0c <UART_SetConfig+0x2f4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d12a      	bne.n	8003c90 <UART_SetConfig+0x278>
 8003c3a:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <UART_SetConfig+0x2e4>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c48:	d01a      	beq.n	8003c80 <UART_SetConfig+0x268>
 8003c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c4e:	d81b      	bhi.n	8003c88 <UART_SetConfig+0x270>
 8003c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c54:	d00c      	beq.n	8003c70 <UART_SetConfig+0x258>
 8003c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c5a:	d815      	bhi.n	8003c88 <UART_SetConfig+0x270>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <UART_SetConfig+0x250>
 8003c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c64:	d008      	beq.n	8003c78 <UART_SetConfig+0x260>
 8003c66:	e00f      	b.n	8003c88 <UART_SetConfig+0x270>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e052      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c70:	2302      	movs	r3, #2
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e04e      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e04a      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c80:	2308      	movs	r3, #8
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e046      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c88:	2310      	movs	r3, #16
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e042      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a17      	ldr	r2, [pc, #92]	; (8003cf4 <UART_SetConfig+0x2dc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d13a      	bne.n	8003d10 <UART_SetConfig+0x2f8>
 8003c9a:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <UART_SetConfig+0x2e4>)
 8003c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ca8:	d01a      	beq.n	8003ce0 <UART_SetConfig+0x2c8>
 8003caa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cae:	d81b      	bhi.n	8003ce8 <UART_SetConfig+0x2d0>
 8003cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb4:	d00c      	beq.n	8003cd0 <UART_SetConfig+0x2b8>
 8003cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cba:	d815      	bhi.n	8003ce8 <UART_SetConfig+0x2d0>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <UART_SetConfig+0x2b0>
 8003cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc4:	d008      	beq.n	8003cd8 <UART_SetConfig+0x2c0>
 8003cc6:	e00f      	b.n	8003ce8 <UART_SetConfig+0x2d0>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cce:	e022      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd6:	e01e      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cde:	e01a      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003ce0:	2308      	movs	r3, #8
 8003ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce6:	e016      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cee:	e012      	b.n	8003d16 <UART_SetConfig+0x2fe>
 8003cf0:	cfff69f3 	.word	0xcfff69f3
 8003cf4:	40008000 	.word	0x40008000
 8003cf8:	40013800 	.word	0x40013800
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40004400 	.word	0x40004400
 8003d04:	40004800 	.word	0x40004800
 8003d08:	40004c00 	.word	0x40004c00
 8003d0c:	40005000 	.word	0x40005000
 8003d10:	2310      	movs	r3, #16
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4aae      	ldr	r2, [pc, #696]	; (8003fd4 <UART_SetConfig+0x5bc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	f040 8097 	bne.w	8003e50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d823      	bhi.n	8003d72 <UART_SetConfig+0x35a>
 8003d2a:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0x318>)
 8003d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d30:	08003d55 	.word	0x08003d55
 8003d34:	08003d73 	.word	0x08003d73
 8003d38:	08003d5d 	.word	0x08003d5d
 8003d3c:	08003d73 	.word	0x08003d73
 8003d40:	08003d63 	.word	0x08003d63
 8003d44:	08003d73 	.word	0x08003d73
 8003d48:	08003d73 	.word	0x08003d73
 8003d4c:	08003d73 	.word	0x08003d73
 8003d50:	08003d6b 	.word	0x08003d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d54:	f7fe fa64 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003d58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d5a:	e010      	b.n	8003d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d5c:	4b9e      	ldr	r3, [pc, #632]	; (8003fd8 <UART_SetConfig+0x5c0>)
 8003d5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d60:	e00d      	b.n	8003d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d62:	f7fe f9ef 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8003d66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d68:	e009      	b.n	8003d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d70:	e005      	b.n	8003d7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8130 	beq.w	8003fe6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	4a94      	ldr	r2, [pc, #592]	; (8003fdc <UART_SetConfig+0x5c4>)
 8003d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d305      	bcc.n	8003db6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d903      	bls.n	8003dbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003dbc:	e113      	b.n	8003fe6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	60fa      	str	r2, [r7, #12]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	4a84      	ldr	r2, [pc, #528]	; (8003fdc <UART_SetConfig+0x5c4>)
 8003dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ddc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003de0:	f7fc fa1a 	bl	8000218 <__aeabi_uldivmod>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4610      	mov	r0, r2
 8003dea:	4619      	mov	r1, r3
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	020b      	lsls	r3, r1, #8
 8003df6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dfa:	0202      	lsls	r2, r0, #8
 8003dfc:	6979      	ldr	r1, [r7, #20]
 8003dfe:	6849      	ldr	r1, [r1, #4]
 8003e00:	0849      	lsrs	r1, r1, #1
 8003e02:	2000      	movs	r0, #0
 8003e04:	460c      	mov	r4, r1
 8003e06:	4605      	mov	r5, r0
 8003e08:	eb12 0804 	adds.w	r8, r2, r4
 8003e0c:	eb43 0905 	adc.w	r9, r3, r5
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	469a      	mov	sl, r3
 8003e18:	4693      	mov	fp, r2
 8003e1a:	4652      	mov	r2, sl
 8003e1c:	465b      	mov	r3, fp
 8003e1e:	4640      	mov	r0, r8
 8003e20:	4649      	mov	r1, r9
 8003e22:	f7fc f9f9 	bl	8000218 <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e34:	d308      	bcc.n	8003e48 <UART_SetConfig+0x430>
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e3c:	d204      	bcs.n	8003e48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6a3a      	ldr	r2, [r7, #32]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e0ce      	b.n	8003fe6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e4e:	e0ca      	b.n	8003fe6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e58:	d166      	bne.n	8003f28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	2b08      	cmp	r3, #8
 8003e60:	d827      	bhi.n	8003eb2 <UART_SetConfig+0x49a>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0x450>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003e95 	.word	0x08003e95
 8003e70:	08003e9d 	.word	0x08003e9d
 8003e74:	08003eb3 	.word	0x08003eb3
 8003e78:	08003ea3 	.word	0x08003ea3
 8003e7c:	08003eb3 	.word	0x08003eb3
 8003e80:	08003eb3 	.word	0x08003eb3
 8003e84:	08003eb3 	.word	0x08003eb3
 8003e88:	08003eab 	.word	0x08003eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f7fe f9c8 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003e90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e92:	e014      	b.n	8003ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e94:	f7fe f9da 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8003e98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e9a:	e010      	b.n	8003ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e9c:	4b4e      	ldr	r3, [pc, #312]	; (8003fd8 <UART_SetConfig+0x5c0>)
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ea0:	e00d      	b.n	8003ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea2:	f7fe f94f 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8003ea6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ea8:	e009      	b.n	8003ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003eb0:	e005      	b.n	8003ebe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8090 	beq.w	8003fe6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	4a44      	ldr	r2, [pc, #272]	; (8003fdc <UART_SetConfig+0x5c4>)
 8003ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed8:	005a      	lsls	r2, r3, #1
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	085b      	lsrs	r3, r3, #1
 8003ee0:	441a      	add	r2, r3
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b0f      	cmp	r3, #15
 8003ef0:	d916      	bls.n	8003f20 <UART_SetConfig+0x508>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef8:	d212      	bcs.n	8003f20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f023 030f 	bic.w	r3, r3, #15
 8003f02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	8bfb      	ldrh	r3, [r7, #30]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	8bfa      	ldrh	r2, [r7, #30]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e062      	b.n	8003fe6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f26:	e05e      	b.n	8003fe6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f2c:	2b08      	cmp	r3, #8
 8003f2e:	d828      	bhi.n	8003f82 <UART_SetConfig+0x56a>
 8003f30:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <UART_SetConfig+0x520>)
 8003f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f36:	bf00      	nop
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f83 	.word	0x08003f83
 8003f48:	08003f73 	.word	0x08003f73
 8003f4c:	08003f83 	.word	0x08003f83
 8003f50:	08003f83 	.word	0x08003f83
 8003f54:	08003f83 	.word	0x08003f83
 8003f58:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f5c:	f7fe f960 	bl	8002220 <HAL_RCC_GetPCLK1Freq>
 8003f60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f62:	e014      	b.n	8003f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe f972 	bl	800224c <HAL_RCC_GetPCLK2Freq>
 8003f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f6a:	e010      	b.n	8003f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <UART_SetConfig+0x5c0>)
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f70:	e00d      	b.n	8003f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe f8e7 	bl	8002144 <HAL_RCC_GetSysClockFreq>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f78:	e009      	b.n	8003f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f80:	e005      	b.n	8003f8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d028      	beq.n	8003fe6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <UART_SetConfig+0x5c4>)
 8003f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	085b      	lsrs	r3, r3, #1
 8003fac:	441a      	add	r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	d910      	bls.n	8003fe0 <UART_SetConfig+0x5c8>
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc4:	d20c      	bcs.n	8003fe0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60da      	str	r2, [r3, #12]
 8003fd0:	e009      	b.n	8003fe6 <UART_SetConfig+0x5ce>
 8003fd2:	bf00      	nop
 8003fd4:	40008000 	.word	0x40008000
 8003fd8:	00f42400 	.word	0x00f42400
 8003fdc:	080046dc 	.word	0x080046dc
      }
      else
      {
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	2200      	movs	r2, #0
 8004000:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004002:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004006:	4618      	mov	r0, r3
 8004008:	3730      	adds	r7, #48	; 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01a      	beq.n	8004126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800410e:	d10a      	bne.n	8004126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
  }
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b098      	sub	sp, #96	; 0x60
 8004158:	af02      	add	r7, sp, #8
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004164:	f7fc ff72 	bl	800104c <HAL_GetTick>
 8004168:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b08      	cmp	r3, #8
 8004176:	d12f      	bne.n	80041d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004180:	2200      	movs	r2, #0
 8004182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f88e 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d022      	beq.n	80041d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041a6:	653b      	str	r3, [r7, #80]	; 0x50
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b0:	647b      	str	r3, [r7, #68]	; 0x44
 80041b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e6      	bne.n	8004192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e063      	b.n	80042a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d149      	bne.n	800427a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ee:	2200      	movs	r2, #0
 80041f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f857 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d03c      	beq.n	800427a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	623b      	str	r3, [r7, #32]
   return(result);
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421e:	633b      	str	r3, [r7, #48]	; 0x30
 8004220:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e6      	bne.n	8004200 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3308      	adds	r3, #8
 8004238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	60fb      	str	r3, [r7, #12]
   return(result);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	64bb      	str	r3, [r7, #72]	; 0x48
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3308      	adds	r3, #8
 8004250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004252:	61fa      	str	r2, [r7, #28]
 8004254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	617b      	str	r3, [r7, #20]
   return(result);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e012      	b.n	80042a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3758      	adds	r7, #88	; 0x58
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b8:	e04f      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d04b      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fc fec3 	bl	800104c <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e04e      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d037      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b80      	cmp	r3, #128	; 0x80
 80042ee:	d034      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b40      	cmp	r3, #64	; 0x40
 80042f4:	d031      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d110      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 f838 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2208      	movs	r2, #8
 8004316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e029      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004334:	d111      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800433e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f81e 	bl	8004382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e00f      	b.n	800437a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	bf0c      	ite	eq
 800436a:	2301      	moveq	r3, #1
 800436c:	2300      	movne	r3, #0
 800436e:	b2db      	uxtb	r3, r3
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	429a      	cmp	r2, r3
 8004376:	d0a0      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b095      	sub	sp, #84	; 0x54
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a8:	643b      	str	r3, [r7, #64]	; 0x40
 80043aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e3      	bne.n	80043bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d118      	bne.n	800442e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	60bb      	str	r3, [r7, #8]
   return(result);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f023 0310 	bic.w	r3, r3, #16
 8004410:	647b      	str	r3, [r7, #68]	; 0x44
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	613b      	str	r3, [r7, #16]
   return(result);
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e6      	bne.n	80043fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004442:	bf00      	nop
 8004444:	3754      	adds	r7, #84	; 0x54
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UARTEx_DisableFifoMode+0x16>
 8004460:	2302      	movs	r3, #2
 8004462:	e027      	b.n	80044b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004492:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e02d      	b.n	8004534 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f84f 	bl	80045b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004550:	2302      	movs	r3, #2
 8004552:	e02d      	b.n	80045b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	; 0x24
 8004560:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f811 	bl	80045b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d108      	bne.n	80045da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045d8:	e031      	b.n	800463e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045da:	2308      	movs	r3, #8
 80045dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045de:	2308      	movs	r3, #8
 80045e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	0e5b      	lsrs	r3, r3, #25
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	0f5b      	lsrs	r3, r3, #29
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004602:	7bbb      	ldrb	r3, [r7, #14]
 8004604:	7b3a      	ldrb	r2, [r7, #12]
 8004606:	4911      	ldr	r1, [pc, #68]	; (800464c <UARTEx_SetNbDataToProcess+0x94>)
 8004608:	5c8a      	ldrb	r2, [r1, r2]
 800460a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800460e:	7b3a      	ldrb	r2, [r7, #12]
 8004610:	490f      	ldr	r1, [pc, #60]	; (8004650 <UARTEx_SetNbDataToProcess+0x98>)
 8004612:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004614:	fb93 f3f2 	sdiv	r3, r3, r2
 8004618:	b29a      	uxth	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	7b7a      	ldrb	r2, [r7, #13]
 8004624:	4909      	ldr	r1, [pc, #36]	; (800464c <UARTEx_SetNbDataToProcess+0x94>)
 8004626:	5c8a      	ldrb	r2, [r1, r2]
 8004628:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800462c:	7b7a      	ldrb	r2, [r7, #13]
 800462e:	4908      	ldr	r1, [pc, #32]	; (8004650 <UARTEx_SetNbDataToProcess+0x98>)
 8004630:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004632:	fb93 f3f2 	sdiv	r3, r3, r2
 8004636:	b29a      	uxth	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	080046f4 	.word	0x080046f4
 8004650:	080046fc 	.word	0x080046fc

08004654 <memset>:
 8004654:	4402      	add	r2, r0
 8004656:	4603      	mov	r3, r0
 8004658:	4293      	cmp	r3, r2
 800465a:	d100      	bne.n	800465e <memset+0xa>
 800465c:	4770      	bx	lr
 800465e:	f803 1b01 	strb.w	r1, [r3], #1
 8004662:	e7f9      	b.n	8004658 <memset+0x4>

08004664 <__libc_init_array>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4d0d      	ldr	r5, [pc, #52]	; (800469c <__libc_init_array+0x38>)
 8004668:	4c0d      	ldr	r4, [pc, #52]	; (80046a0 <__libc_init_array+0x3c>)
 800466a:	1b64      	subs	r4, r4, r5
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	2600      	movs	r6, #0
 8004670:	42a6      	cmp	r6, r4
 8004672:	d109      	bne.n	8004688 <__libc_init_array+0x24>
 8004674:	4d0b      	ldr	r5, [pc, #44]	; (80046a4 <__libc_init_array+0x40>)
 8004676:	4c0c      	ldr	r4, [pc, #48]	; (80046a8 <__libc_init_array+0x44>)
 8004678:	f000 f818 	bl	80046ac <_init>
 800467c:	1b64      	subs	r4, r4, r5
 800467e:	10a4      	asrs	r4, r4, #2
 8004680:	2600      	movs	r6, #0
 8004682:	42a6      	cmp	r6, r4
 8004684:	d105      	bne.n	8004692 <__libc_init_array+0x2e>
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	f855 3b04 	ldr.w	r3, [r5], #4
 800468c:	4798      	blx	r3
 800468e:	3601      	adds	r6, #1
 8004690:	e7ee      	b.n	8004670 <__libc_init_array+0xc>
 8004692:	f855 3b04 	ldr.w	r3, [r5], #4
 8004696:	4798      	blx	r3
 8004698:	3601      	adds	r6, #1
 800469a:	e7f2      	b.n	8004682 <__libc_init_array+0x1e>
 800469c:	0800470c 	.word	0x0800470c
 80046a0:	0800470c 	.word	0x0800470c
 80046a4:	0800470c 	.word	0x0800470c
 80046a8:	08004710 	.word	0x08004710

080046ac <_init>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr

080046b8 <_fini>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr
