
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bbc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003d94  08003d94  00013d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd4  08003dd4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ddc  08003ddc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ddc  08003ddc  00013ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003de0  08003de0  00013de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000010  08003df4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003df4  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f035  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000205c  00000000  00000000  0002f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  00031118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000948  00000000  00000000  00031d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024660  00000000  00000000  00032660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eae1  00000000  00000000  00056cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7dec  00000000  00000000  000657a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003114  00000000  00000000  0014d590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001506a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003d7c 	.word	0x08003d7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08003d7c 	.word	0x08003d7c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fc5f 	bl	8000dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f80f 	bl	800053e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8e0 	bl	80006e4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f856 	bl	80005d4 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000528:	f000 f89e 	bl	8000668 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SPITxRx_Setup();
 800052c:	f000 f96a 	bl	8000804 <SPITxRx_Setup>
  TikTokGame();
 8000530:	f000 f9a8 	bl	8000884 <TikTokGame>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 8000534:	f000 f97c 	bl	8000830 <SPITxRx_readIO>
	  TikTokGame();
 8000538:	f000 f9a4 	bl	8000884 <TikTokGame>
  {
 800053c:	e7fa      	b.n	8000534 <main+0x20>

0800053e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b094      	sub	sp, #80	; 0x50
 8000542:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000544:	f107 0318 	add.w	r3, r7, #24
 8000548:	2238      	movs	r2, #56	; 0x38
 800054a:	2100      	movs	r1, #0
 800054c:	4618      	mov	r0, r3
 800054e:	f003 fbe9 	bl	8003d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000560:	2000      	movs	r0, #0
 8000562:	f001 f819 	bl	8001598 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2340      	movs	r3, #64	; 0x40
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800057c:	2304      	movs	r3, #4
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000580:	2355      	movs	r3, #85	; 0x55
 8000582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0318 	add.w	r3, r7, #24
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f8b3 	bl	8001700 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a0:	f000 fad6 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2104      	movs	r1, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fbb1 	bl	8001d24 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005c8:	f000 fac2 	bl	8000b50 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005d8:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_LPUART1_UART_Init+0x90>)
 80005dc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 8000612:	2200      	movs	r2, #0
 8000614:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000616:	4812      	ldr	r0, [pc, #72]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 8000618:	f002 fd16 	bl	8003048 <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 fa95 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000626:	2100      	movs	r1, #0
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	f003 fab1 	bl	8003b90 <HAL_UARTEx_SetTxFifoThreshold>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000634:	f000 fa8c 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000638:	2100      	movs	r1, #0
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 800063c:	f003 fae6 	bl	8003c0c <HAL_UARTEx_SetRxFifoThreshold>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000646:	f000 fa83 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_LPUART1_UART_Init+0x8c>)
 800064c:	f003 fa67 	bl	8003b1e <HAL_UARTEx_DisableFifoMode>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000656:	f000 fa7b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000002c 	.word	0x2000002c
 8000664:	40008000 	.word	0x40008000

08000668 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <MX_SPI3_Init+0x74>)
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_SPI3_Init+0x78>)
 8000670:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_SPI3_Init+0x74>)
 8000674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000678:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_SPI3_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI3_Init+0x74>)
 8000682:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000686:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI3_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_SPI3_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI3_Init+0x74>)
 8000696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI3_Init+0x74>)
 800069e:	2238      	movs	r2, #56	; 0x38
 80006a0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI3_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI3_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_SPI3_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI3_Init+0x74>)
 80006b6:	2207      	movs	r2, #7
 80006b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_SPI3_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI3_Init+0x74>)
 80006c2:	2208      	movs	r2, #8
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_SPI3_Init+0x74>)
 80006c8:	f001 ff96 	bl	80025f8 <HAL_SPI_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80006d2:	f000 fa3d 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000c0 	.word	0x200000c0
 80006e0:	40003c00 	.word	0x40003c00

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <MX_GPIO_Init+0x114>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a3e      	ldr	r2, [pc, #248]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b3c      	ldr	r3, [pc, #240]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000712:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a38      	ldr	r2, [pc, #224]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000718:	f043 0320 	orr.w	r3, r3, #32
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0320 	and.w	r3, r3, #32
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <MX_GPIO_Init+0x114>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a32      	ldr	r2, [pc, #200]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b30      	ldr	r3, [pc, #192]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0308 	and.w	r3, r3, #8
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <MX_GPIO_Init+0x114>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <MX_GPIO_Init+0x114>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2120      	movs	r1, #32
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f000 fed1 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2104      	movs	r1, #4
 8000782:	481e      	ldr	r0, [pc, #120]	; (80007fc <MX_GPIO_Init+0x118>)
 8000784:	f000 fecc 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000788:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4818      	ldr	r0, [pc, #96]	; (8000800 <MX_GPIO_Init+0x11c>)
 80007a0:	f000 fd24 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a4:	2320      	movs	r3, #32
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	4619      	mov	r1, r3
 80007ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007be:	f000 fd15 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007c2:	2304      	movs	r3, #4
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <MX_GPIO_Init+0x118>)
 80007da:	f000 fd07 	bl	80011ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2028      	movs	r0, #40	; 0x28
 80007e4:	f000 fc67 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f000 fc7e 	bl	80010ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000c00 	.word	0x48000c00
 8000800:	48000800 	.word	0x48000800

08000804 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */
void SPITxRx_Setup()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000808:	2200      	movs	r2, #0
 800080a:	2104      	movs	r1, #4
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <SPITxRx_Setup+0x28>)
 800080e:	f000 fe87 	bl	8001520 <HAL_GPIO_WritePin>
HAL_Delay(1);
 8000812:	2001      	movs	r0, #1
 8000814:	f000 fb52 	bl	8000ebc <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000818:	2201      	movs	r2, #1
 800081a:	2104      	movs	r1, #4
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <SPITxRx_Setup+0x28>)
 800081e:	f000 fe7f 	bl	8001520 <HAL_GPIO_WritePin>
HAL_Delay(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f000 fb4a 	bl	8000ebc <HAL_Delay>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48000c00 	.word	0x48000c00

08000830 <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000834:	2104      	movs	r1, #4
 8000836:	480f      	ldr	r0, [pc, #60]	; (8000874 <SPITxRx_readIO+0x44>)
 8000838:	f000 fe5a 	bl	80014f0 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d016      	beq.n	8000870 <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000842:	2200      	movs	r2, #0
 8000844:	2104      	movs	r1, #4
 8000846:	480b      	ldr	r0, [pc, #44]	; (8000874 <SPITxRx_readIO+0x44>)
 8000848:	f000 fe6a 	bl	8001520 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <SPITxRx_readIO+0x48>)
 800084e:	2241      	movs	r2, #65	; 0x41
 8000850:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <SPITxRx_readIO+0x48>)
 8000854:	2212      	movs	r2, #18
 8000856:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <SPITxRx_readIO+0x48>)
 800085a:	2200      	movs	r2, #0
 800085c:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <SPITxRx_readIO+0x48>)
 8000860:	2200      	movs	r2, #0
 8000862:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000864:	2304      	movs	r3, #4
 8000866:	4a05      	ldr	r2, [pc, #20]	; (800087c <SPITxRx_readIO+0x4c>)
 8000868:	4903      	ldr	r1, [pc, #12]	; (8000878 <SPITxRx_readIO+0x48>)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <SPITxRx_readIO+0x50>)
 800086c:	f001 ff70 	bl	8002750 <HAL_SPI_TransmitReceive_IT>
}
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	48000c00 	.word	0x48000c00
 8000878:	20000130 	.word	0x20000130
 800087c:	20000124 	.word	0x20000124
 8000880:	200000c0 	.word	0x200000c0

08000884 <TikTokGame>:

void TikTokGame()
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 8000888:	4ba4      	ldr	r3, [pc, #656]	; (8000b1c <TikTokGame+0x298>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	f040 8102 	bne.w	8000a96 <TikTokGame+0x212>
    {
    	switch (game_left) {
 8000892:	4ba3      	ldr	r3, [pc, #652]	; (8000b20 <TikTokGame+0x29c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3b01      	subs	r3, #1
 8000898:	2b04      	cmp	r3, #4
 800089a:	f200 8139 	bhi.w	8000b10 <TikTokGame+0x28c>
 800089e:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <TikTokGame+0x20>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	08000a1f 	.word	0x08000a1f
 80008a8:	080009a7 	.word	0x080009a7
 80008ac:	0800092f 	.word	0x0800092f
 80008b0:	08000b11 	.word	0x08000b11
 80008b4:	080008b9 	.word	0x080008b9
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 80008b8:	4b9a      	ldr	r3, [pc, #616]	; (8000b24 <TikTokGame+0x2a0>)
 80008ba:	789b      	ldrb	r3, [r3, #2]
 80008bc:	3b03      	subs	r3, #3
 80008be:	2b04      	cmp	r3, #4
 80008c0:	d833      	bhi.n	800092a <TikTokGame+0xa6>
 80008c2:	a201      	add	r2, pc, #4	; (adr r2, 80008c8 <TikTokGame+0x44>)
 80008c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008c8:	08000911 	.word	0x08000911
 80008cc:	0800092b 	.word	0x0800092b
 80008d0:	080008f7 	.word	0x080008f7
 80008d4:	080008dd 	.word	0x080008dd
 80008d8:	0800092b 	.word	0x0800092b
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 80008dc:	4b92      	ldr	r3, [pc, #584]	; (8000b28 <TikTokGame+0x2a4>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 80008e2:	4b8f      	ldr	r3, [pc, #572]	; (8000b20 <TikTokGame+0x29c>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80008e8:	4b90      	ldr	r3, [pc, #576]	; (8000b2c <TikTokGame+0x2a8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 80008ee:	4b8b      	ldr	r3, [pc, #556]	; (8000b1c <TikTokGame+0x298>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	601a      	str	r2, [r3, #0]
    	                break;
 80008f4:	e01a      	b.n	800092c <TikTokGame+0xa8>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 80008f6:	4b8c      	ldr	r3, [pc, #560]	; (8000b28 <TikTokGame+0x2a4>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 80008fc:	4b88      	ldr	r3, [pc, #544]	; (8000b20 <TikTokGame+0x29c>)
 80008fe:	2203      	movs	r2, #3
 8000900:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000902:	4b8a      	ldr	r3, [pc, #552]	; (8000b2c <TikTokGame+0x2a8>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000908:	4b84      	ldr	r3, [pc, #528]	; (8000b1c <TikTokGame+0x298>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
    	                break;
 800090e:	e00d      	b.n	800092c <TikTokGame+0xa8>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000910:	4b85      	ldr	r3, [pc, #532]	; (8000b28 <TikTokGame+0x2a4>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000916:	4b82      	ldr	r3, [pc, #520]	; (8000b20 <TikTokGame+0x29c>)
 8000918:	2205      	movs	r2, #5
 800091a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 800091c:	4b83      	ldr	r3, [pc, #524]	; (8000b2c <TikTokGame+0x2a8>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000922:	4b7e      	ldr	r3, [pc, #504]	; (8000b1c <TikTokGame+0x298>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
    	                break;
 8000928:	e000      	b.n	800092c <TikTokGame+0xa8>
    	            default: // multi press do nothing
    	                break;
 800092a:	bf00      	nop
    	        }
    	        break;
 800092c:	e0f0      	b.n	8000b10 <TikTokGame+0x28c>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 800092e:	4b7d      	ldr	r3, [pc, #500]	; (8000b24 <TikTokGame+0x2a0>)
 8000930:	789b      	ldrb	r3, [r3, #2]
 8000932:	3b03      	subs	r3, #3
 8000934:	2b04      	cmp	r3, #4
 8000936:	d834      	bhi.n	80009a2 <TikTokGame+0x11e>
 8000938:	a201      	add	r2, pc, #4	; (adr r2, 8000940 <TikTokGame+0xbc>)
 800093a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093e:	bf00      	nop
 8000940:	08000989 	.word	0x08000989
 8000944:	080009a3 	.word	0x080009a3
 8000948:	0800096f 	.word	0x0800096f
 800094c:	08000955 	.word	0x08000955
 8000950:	080009a3 	.word	0x080009a3
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000954:	4b74      	ldr	r3, [pc, #464]	; (8000b28 <TikTokGame+0x2a4>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 800095a:	4b71      	ldr	r3, [pc, #452]	; (8000b20 <TikTokGame+0x29c>)
 800095c:	2202      	movs	r2, #2
 800095e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000960:	4b72      	ldr	r3, [pc, #456]	; (8000b2c <TikTokGame+0x2a8>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000966:	4b6d      	ldr	r3, [pc, #436]	; (8000b1c <TikTokGame+0x298>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]
    	                break;
 800096c:	e01a      	b.n	80009a4 <TikTokGame+0x120>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 800096e:	4b6e      	ldr	r3, [pc, #440]	; (8000b28 <TikTokGame+0x2a4>)
 8000970:	2202      	movs	r2, #2
 8000972:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000974:	4b6a      	ldr	r3, [pc, #424]	; (8000b20 <TikTokGame+0x29c>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 800097a:	4b6c      	ldr	r3, [pc, #432]	; (8000b2c <TikTokGame+0x2a8>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000980:	4b66      	ldr	r3, [pc, #408]	; (8000b1c <TikTokGame+0x298>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
    	                break;
 8000986:	e00d      	b.n	80009a4 <TikTokGame+0x120>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000988:	4b67      	ldr	r3, [pc, #412]	; (8000b28 <TikTokGame+0x2a4>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 800098e:	4b64      	ldr	r3, [pc, #400]	; (8000b20 <TikTokGame+0x29c>)
 8000990:	2205      	movs	r2, #5
 8000992:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000994:	4b65      	ldr	r3, [pc, #404]	; (8000b2c <TikTokGame+0x2a8>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 800099a:	4b60      	ldr	r3, [pc, #384]	; (8000b1c <TikTokGame+0x298>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
    	                break;
 80009a0:	e000      	b.n	80009a4 <TikTokGame+0x120>
    	            default: // multi press do nothing
    	                break;
 80009a2:	bf00      	nop
    	        }
    	        break;
 80009a4:	e0b4      	b.n	8000b10 <TikTokGame+0x28c>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 80009a6:	4b5f      	ldr	r3, [pc, #380]	; (8000b24 <TikTokGame+0x2a0>)
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	3b03      	subs	r3, #3
 80009ac:	2b04      	cmp	r3, #4
 80009ae:	d834      	bhi.n	8000a1a <TikTokGame+0x196>
 80009b0:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <TikTokGame+0x134>)
 80009b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b6:	bf00      	nop
 80009b8:	08000a01 	.word	0x08000a01
 80009bc:	08000a1b 	.word	0x08000a1b
 80009c0:	080009e7 	.word	0x080009e7
 80009c4:	080009cd 	.word	0x080009cd
 80009c8:	08000a1b 	.word	0x08000a1b
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 80009cc:	4b56      	ldr	r3, [pc, #344]	; (8000b28 <TikTokGame+0x2a4>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 80009d2:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <TikTokGame+0x29c>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 80009d8:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <TikTokGame+0x2a8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 80009de:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <TikTokGame+0x298>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
    	                break;
 80009e4:	e01a      	b.n	8000a1c <TikTokGame+0x198>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 80009e6:	4b50      	ldr	r3, [pc, #320]	; (8000b28 <TikTokGame+0x2a4>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 80009ec:	4b4c      	ldr	r3, [pc, #304]	; (8000b20 <TikTokGame+0x29c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 80009f2:	4b4e      	ldr	r3, [pc, #312]	; (8000b2c <TikTokGame+0x2a8>)
 80009f4:	2202      	movs	r2, #2
 80009f6:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 80009f8:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <TikTokGame+0x298>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
    	                break;
 80009fe:	e00d      	b.n	8000a1c <TikTokGame+0x198>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000a00:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <TikTokGame+0x2a4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000a06:	4b46      	ldr	r3, [pc, #280]	; (8000b20 <TikTokGame+0x29c>)
 8000a08:	2205      	movs	r2, #5
 8000a0a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a0c:	4b47      	ldr	r3, [pc, #284]	; (8000b2c <TikTokGame+0x2a8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000a12:	4b42      	ldr	r3, [pc, #264]	; (8000b1c <TikTokGame+0x298>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
    	                break;
 8000a18:	e000      	b.n	8000a1c <TikTokGame+0x198>
    	            default: // multi press do nothing
    	                break;
 8000a1a:	bf00      	nop
    	        }
    	        break;
 8000a1c:	e078      	b.n	8000b10 <TikTokGame+0x28c>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <TikTokGame+0x2a0>)
 8000a20:	789b      	ldrb	r3, [r3, #2]
 8000a22:	3b03      	subs	r3, #3
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	d834      	bhi.n	8000a92 <TikTokGame+0x20e>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <TikTokGame+0x1ac>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000a93 	.word	0x08000a93
 8000a38:	08000a5f 	.word	0x08000a5f
 8000a3c:	08000a45 	.word	0x08000a45
 8000a40:	08000a93 	.word	0x08000a93
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a44:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <TikTokGame+0x2a4>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000a4a:	4b35      	ldr	r3, [pc, #212]	; (8000b20 <TikTokGame+0x29c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000a50:	4b36      	ldr	r3, [pc, #216]	; (8000b2c <TikTokGame+0x2a8>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000a56:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <TikTokGame+0x298>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
    	                break;
 8000a5c:	e01a      	b.n	8000a94 <TikTokGame+0x210>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <TikTokGame+0x2a4>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000a64:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <TikTokGame+0x29c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <TikTokGame+0x2a8>)
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <TikTokGame+0x298>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
    	                break;
 8000a76:	e00d      	b.n	8000a94 <TikTokGame+0x210>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000a78:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <TikTokGame+0x2a4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <TikTokGame+0x29c>)
 8000a80:	2205      	movs	r2, #5
 8000a82:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a84:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <TikTokGame+0x2a8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <TikTokGame+0x298>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
    	                break;
 8000a90:	e000      	b.n	8000a94 <TikTokGame+0x210>
    	            default: // multi press do nothing
    	                break;
 8000a92:	bf00      	nop
    	        }
    	        break;
 8000a94:	e03c      	b.n	8000b10 <TikTokGame+0x28c>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <TikTokGame+0x29c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d833      	bhi.n	8000b08 <TikTokGame+0x284>
 8000aa0:	a201      	add	r2, pc, #4	; (adr r2, 8000aa8 <TikTokGame+0x224>)
 8000aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa6:	bf00      	nop
 8000aa8:	08000af5 	.word	0x08000af5
 8000aac:	08000ae1 	.word	0x08000ae1
 8000ab0:	08000acd 	.word	0x08000acd
 8000ab4:	08000ab9 	.word	0x08000ab9
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <TikTokGame+0x2a4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <TikTokGame+0x29c>)
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <TikTokGame+0x2a8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
                break;
 8000aca:	e01d      	b.n	8000b08 <TikTokGame+0x284>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <TikTokGame+0x2a4>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <TikTokGame+0x29c>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <TikTokGame+0x2a8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
                break;
 8000ade:	e013      	b.n	8000b08 <TikTokGame+0x284>
            case 2:
                // statements
                game_pick = 2; // pick2
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <TikTokGame+0x2a4>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <TikTokGame+0x29c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <TikTokGame+0x2a8>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
                break;
 8000af2:	e009      	b.n	8000b08 <TikTokGame+0x284>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <TikTokGame+0x2a4>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <TikTokGame+0x29c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <TikTokGame+0x2a8>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	601a      	str	r2, [r3, #0]
                break;
 8000b06:	bf00      	nop
        }
        game_turn = 0;
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <TikTokGame+0x298>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
    }
}
 8000b0e:	e7ff      	b.n	8000b10 <TikTokGame+0x28c>
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000140 	.word	0x20000140
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000124 	.word	0x20000124
 8000b28:	20000144 	.word	0x20000144
 8000b2c:	2000013c 	.word	0x2000013c

08000b30 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000b38:	2201      	movs	r2, #1
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000b3e:	f000 fcef 	bl	8001520 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	48000c00 	.word	0x48000c00

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6593      	str	r3, [r2, #88]	; 0x58
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b92:	f000 fda5 	bl	80016e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b09e      	sub	sp, #120	; 0x78
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	2254      	movs	r2, #84	; 0x54
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 f8ad 	bl	8003d24 <memset>
  if(huart->Instance==LPUART1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_UART_MspInit+0xa8>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d136      	bne.n	8000c42 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0310 	add.w	r3, r7, #16
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fabb 	bl	800215c <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bec:	f7ff ffb0 	bl	8000b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_MspInit+0xac>)
 8000bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <HAL_UART_MspInit+0xac>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0xac>)
 8000bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0xac>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <HAL_UART_MspInit+0xac>)
 8000c0e:	f043 0301 	orr.w	r3, r3, #1
 8000c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_UART_MspInit+0xac>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000c20:	230c      	movs	r3, #12
 8000c22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c30:	230c      	movs	r3, #12
 8000c32:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3e:	f000 fad5 	bl	80011ec <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3778      	adds	r7, #120	; 0x78
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40008000 	.word	0x40008000
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_SPI_MspInit+0x8c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d130      	bne.n	8000cd8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c76:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_SPI_MspInit+0x90>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ce4 <HAL_SPI_MspInit+0x90>)
 8000c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c80:	6593      	str	r3, [r2, #88]	; 0x58
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_SPI_MspInit+0x90>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_SPI_MspInit+0x90>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_SPI_MspInit+0x90>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_SPI_MspInit+0x90>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000ca6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb8:	2306      	movs	r3, #6
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_SPI_MspInit+0x94>)
 8000cc4:	f000 fa92 	bl	80011ec <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2033      	movs	r0, #51	; 0x33
 8000cce:	f000 f9f2 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000cd2:	2033      	movs	r0, #51	; 0x33
 8000cd4:	f000 fa09 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40003c00 	.word	0x40003c00
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000800 	.word	0x48000800

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f000 f8a2 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d48:	f000 fc02 	bl	8001550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <SPI3_IRQHandler+0x10>)
 8000d56:	f001 fda9 	bl	80028ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200000c0 	.word	0x200000c0

08000d64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <LoopForever+0xe>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	; (8000dd4 <LoopForever+0x16>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f002 ffbd 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dba:	f7ff fbab 	bl	8000514 <main>

08000dbe <LoopForever>:

LoopForever:
    b LoopForever
 8000dbe:	e7fe      	b.n	8000dbe <LoopForever>
  ldr   r0, =_estack
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000dcc:	08003de4 	.word	0x08003de4
  ldr r2, =_sbss
 8000dd0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dd4:	2000014c 	.word	0x2000014c

08000dd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC1_2_IRQHandler>

08000dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de0:	2300      	movs	r3, #0
 8000de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de4:	2003      	movs	r0, #3
 8000de6:	f000 f95b 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dea:	2000      	movs	r0, #0
 8000dec:	f000 f80e 	bl	8000e0c <HAL_InitTick>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	e001      	b.n	8000e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfc:	f7ff feae 	bl	8000b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e00:	79fb      	ldrb	r3, [r7, #7]

}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_InitTick+0x68>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d022      	beq.n	8000e66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_InitTick+0x68>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f966 	bl	8001106 <HAL_SYSTICK_Config>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10f      	bne.n	8000e60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b0f      	cmp	r3, #15
 8000e44:	d809      	bhi.n	8000e5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e46:	2200      	movs	r2, #0
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4e:	f000 f932 	bl	80010b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_InitTick+0x70>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6013      	str	r3, [r2, #0]
 8000e58:	e007      	b.n	8000e6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	73fb      	strb	r3, [r7, #15]
 8000e5e:	e004      	b.n	8000e6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e001      	b.n	8000e6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	2000000c 	.word	0x2000000c
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	20000008 	.word	0x20000008

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a03      	ldr	r2, [pc, #12]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e90:	6013      	str	r3, [r2, #0]
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	20000148 	.word	0x20000148
 8000ea0:	2000000c 	.word	0x2000000c

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000148 	.word	0x20000148

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed4:	d004      	beq.n	8000ee0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_Delay+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee0:	bf00      	nop
 8000ee2:	f7ff ffdf 	bl	8000ea4 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d8f7      	bhi.n	8000ee2 <HAL_Delay+0x26>
  {
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000000c 	.word	0x2000000c

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff40 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff90 	bl	8000ff4 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5f 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff33 	bl	8000f64 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa4 	bl	800105c <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d00d      	beq.n	8001152 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2204      	movs	r2, #4
 800113a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e047      	b.n	80011e2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 020e 	bic.w	r2, r2, #14
 8001160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800117c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001180:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f003 021f 	and.w	r2, r3, #31
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2101      	movs	r1, #1
 8001190:	fa01 f202 	lsl.w	r2, r1, r2
 8001194:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800119e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00c      	beq.n	80011c2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011c0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	4798      	blx	r3
    }
  }
  return status;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011fa:	e15a      	b.n	80014b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2101      	movs	r1, #1
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	4013      	ands	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	f000 814c 	beq.w	80014ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d005      	beq.n	800122c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001228:	2b02      	cmp	r3, #2
 800122a:	d130      	bne.n	800128e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001262:	2201      	movs	r2, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	f003 0201 	and.w	r2, r3, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
 8001296:	2b03      	cmp	r3, #3
 8001298:	d017      	beq.n	80012ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d123      	bne.n	800131e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3208      	adds	r2, #8
 80012de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	691a      	ldr	r2, [r3, #16]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0307 	and.w	r3, r3, #7
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	6939      	ldr	r1, [r7, #16]
 800131a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 0203 	and.w	r2, r3, #3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80a6 	beq.w	80014ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001360:	4b5b      	ldr	r3, [pc, #364]	; (80014d0 <HAL_GPIO_Init+0x2e4>)
 8001362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001364:	4a5a      	ldr	r2, [pc, #360]	; (80014d0 <HAL_GPIO_Init+0x2e4>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6613      	str	r3, [r2, #96]	; 0x60
 800136c:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <HAL_GPIO_Init+0x2e4>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001378:	4a56      	ldr	r2, [pc, #344]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a2:	d01f      	beq.n	80013e4 <HAL_GPIO_Init+0x1f8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a4c      	ldr	r2, [pc, #304]	; (80014d8 <HAL_GPIO_Init+0x2ec>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d019      	beq.n	80013e0 <HAL_GPIO_Init+0x1f4>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a4b      	ldr	r2, [pc, #300]	; (80014dc <HAL_GPIO_Init+0x2f0>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d013      	beq.n	80013dc <HAL_GPIO_Init+0x1f0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a4a      	ldr	r2, [pc, #296]	; (80014e0 <HAL_GPIO_Init+0x2f4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d00d      	beq.n	80013d8 <HAL_GPIO_Init+0x1ec>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a49      	ldr	r2, [pc, #292]	; (80014e4 <HAL_GPIO_Init+0x2f8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d007      	beq.n	80013d4 <HAL_GPIO_Init+0x1e8>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_GPIO_Init+0x2fc>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d101      	bne.n	80013d0 <HAL_GPIO_Init+0x1e4>
 80013cc:	2305      	movs	r3, #5
 80013ce:	e00a      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013d0:	2306      	movs	r3, #6
 80013d2:	e008      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013d4:	2304      	movs	r3, #4
 80013d6:	e006      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013d8:	2303      	movs	r3, #3
 80013da:	e004      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013dc:	2302      	movs	r3, #2
 80013de:	e002      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <HAL_GPIO_Init+0x1fa>
 80013e4:	2300      	movs	r3, #0
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f6:	4937      	ldr	r1, [pc, #220]	; (80014d4 <HAL_GPIO_Init+0x2e8>)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001428:	4a30      	ldr	r2, [pc, #192]	; (80014ec <HAL_GPIO_Init+0x300>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001452:	4a26      	ldr	r2, [pc, #152]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_GPIO_Init+0x300>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_GPIO_Init+0x300>)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_GPIO_Init+0x300>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a6:	4a11      	ldr	r2, [pc, #68]	; (80014ec <HAL_GPIO_Init+0x300>)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f ae9d 	bne.w	80011fc <HAL_GPIO_Init+0x10>
  }
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010000 	.word	0x40010000
 80014d8:	48000400 	.word	0x48000400
 80014dc:	48000800 	.word	0x48000800
 80014e0:	48000c00 	.word	0x48000c00
 80014e4:	48001000 	.word	0x48001000
 80014e8:	48001400 	.word	0x48001400
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691a      	ldr	r2, [r3, #16]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001508:	2301      	movs	r3, #1
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800150e:	2300      	movs	r3, #0
 8001510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800153c:	e002      	b.n	8001544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f806 	bl	8001580 <HAL_GPIO_EXTI_Callback>
  }
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d141      	bne.n	800162a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015b2:	d131      	bne.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ba:	4a46      	ldr	r2, [pc, #280]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015cc:	4a41      	ldr	r2, [pc, #260]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2232      	movs	r2, #50	; 0x32
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	4a3f      	ldr	r2, [pc, #252]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	0c9b      	lsrs	r3, r3, #18
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015ea:	e002      	b.n	80015f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015fe:	d102      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f2      	bne.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001606:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001612:	d158      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e057      	b.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001618:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800161a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800161e:	4a2d      	ldr	r2, [pc, #180]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001624:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001628:	e04d      	b.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001630:	d141      	bne.n	80016b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163e:	d131      	bne.n	80016a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001640:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001658:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2232      	movs	r2, #50	; 0x32
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	0c9b      	lsrs	r3, r3, #18
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001676:	e002      	b.n	800167e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3b01      	subs	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800168a:	d102      	bne.n	8001692 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f2      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169e:	d112      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e011      	b.n	80016c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016b4:	e007      	b.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40007000 	.word	0x40007000
 80016d8:	20000004 	.word	0x20000004
 80016dc:	431bde83 	.word	0x431bde83

080016e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ee:	6093      	str	r3, [r2, #8]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40007000 	.word	0x40007000

08001700 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e2fe      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d075      	beq.n	800180a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171e:	4b97      	ldr	r3, [pc, #604]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 030c 	and.w	r3, r3, #12
 8001726:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001728:	4b94      	ldr	r3, [pc, #592]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	2b0c      	cmp	r3, #12
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x3e>
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d002      	beq.n	8001744 <HAL_RCC_OscConfig+0x44>
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b08      	cmp	r3, #8
 8001742:	d10b      	bne.n	800175c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	4b8d      	ldr	r3, [pc, #564]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d05b      	beq.n	8001808 <HAL_RCC_OscConfig+0x108>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d157      	bne.n	8001808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e2d9      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001764:	d106      	bne.n	8001774 <HAL_RCC_OscConfig+0x74>
 8001766:	4b85      	ldr	r3, [pc, #532]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a84      	ldr	r2, [pc, #528]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e01d      	b.n	80017b0 <HAL_RCC_OscConfig+0xb0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800177c:	d10c      	bne.n	8001798 <HAL_RCC_OscConfig+0x98>
 800177e:	4b7f      	ldr	r3, [pc, #508]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7e      	ldr	r2, [pc, #504]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	4b7c      	ldr	r3, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a7b      	ldr	r2, [pc, #492]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	e00b      	b.n	80017b0 <HAL_RCC_OscConfig+0xb0>
 8001798:	4b78      	ldr	r3, [pc, #480]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a77      	ldr	r2, [pc, #476]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800179e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b75      	ldr	r3, [pc, #468]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a74      	ldr	r2, [pc, #464]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80017aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb74 	bl	8000ea4 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb70 	bl	8000ea4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e29e      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	4b6a      	ldr	r3, [pc, #424]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0xc0>
 80017de:	e014      	b.n	800180a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb60 	bl	8000ea4 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fb5c 	bl	8000ea4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e28a      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	4b60      	ldr	r3, [pc, #384]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0xe8>
 8001806:	e000      	b.n	800180a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d075      	beq.n	8001902 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001816:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
 800181e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001820:	4b56      	ldr	r3, [pc, #344]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b0c      	cmp	r3, #12
 800182e:	d102      	bne.n	8001836 <HAL_RCC_OscConfig+0x136>
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d002      	beq.n	800183c <HAL_RCC_OscConfig+0x13c>
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d11f      	bne.n	800187c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_OscConfig+0x154>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e25d      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	061b      	lsls	r3, r3, #24
 8001862:	4946      	ldr	r1, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001868:	4b45      	ldr	r3, [pc, #276]	; (8001980 <HAL_RCC_OscConfig+0x280>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff facd 	bl	8000e0c <HAL_InitTick>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d043      	beq.n	8001900 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e249      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a3c      	ldr	r2, [pc, #240]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800188a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff fb08 	bl	8000ea4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fb04 	bl	8000ea4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e232      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018aa:	4b34      	ldr	r3, [pc, #208]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	4b31      	ldr	r3, [pc, #196]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	061b      	lsls	r3, r3, #24
 80018c4:	492d      	ldr	r1, [pc, #180]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
 80018ca:	e01a      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2a      	ldr	r2, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80018d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fae4 	bl	8000ea4 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fae0 	bl	8000ea4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e20e      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1e0>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d041      	beq.n	8001992 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01c      	beq.n	8001950 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff fabd 	bl	8000ea4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fab9 	bl	8000ea4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1e7      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ef      	beq.n	800192e <HAL_RCC_OscConfig+0x22e>
 800194e:	e020      	b.n	8001992 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <HAL_RCC_OscConfig+0x27c>)
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff faa0 	bl	8000ea4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001966:	e00d      	b.n	8001984 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fa9c 	bl	8000ea4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d906      	bls.n	8001984 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1ca      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001984:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ea      	bne.n	8001968 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80a6 	beq.w	8001aec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019a4:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2b4>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x2b6>
 80019b4:	2300      	movs	r3, #0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00d      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a7e      	ldr	r2, [pc, #504]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
 80019c6:	4b7c      	ldr	r3, [pc, #496]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019d2:	2301      	movs	r3, #1
 80019d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d6:	4b79      	ldr	r3, [pc, #484]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d118      	bne.n	8001a14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019e2:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a75      	ldr	r2, [pc, #468]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 80019e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fa59 	bl	8000ea4 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f6:	f7ff fa55 	bl	8000ea4 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e183      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a08:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <HAL_RCC_OscConfig+0x4bc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d108      	bne.n	8001a2e <HAL_RCC_OscConfig+0x32e>
 8001a1c:	4b66      	ldr	r3, [pc, #408]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a22:	4a65      	ldr	r2, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a2c:	e024      	b.n	8001a78 <HAL_RCC_OscConfig+0x378>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b05      	cmp	r3, #5
 8001a34:	d110      	bne.n	8001a58 <HAL_RCC_OscConfig+0x358>
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	4a5e      	ldr	r2, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4c:	4a5a      	ldr	r2, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a56:	e00f      	b.n	8001a78 <HAL_RCC_OscConfig+0x378>
 8001a58:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a5e:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a68:	4b53      	ldr	r3, [pc, #332]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6e:	4a52      	ldr	r2, [pc, #328]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d016      	beq.n	8001aae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fa10 	bl	8000ea4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff fa0c 	bl	8000ea4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e138      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9e:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0ed      	beq.n	8001a88 <HAL_RCC_OscConfig+0x388>
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aae:	f7ff f9f9 	bl	8000ea4 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab4:	e00a      	b.n	8001acc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff f9f5 	bl	8000ea4 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e121      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001acc:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ed      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ada:	7ffb      	ldrb	r3, [r7, #31]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	4a34      	ldr	r2, [pc, #208]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d03c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b06:	4a2c      	ldr	r2, [pc, #176]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f9c8 	bl	8000ea4 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b18:	f7ff f9c4 	bl	8000ea4 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e0f2      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ef      	beq.n	8001b18 <HAL_RCC_OscConfig+0x418>
 8001b38:	e01b      	b.n	8001b72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b40:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7ff f9ab 	bl	8000ea4 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b52:	f7ff f9a7 	bl	8000ea4 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0d5      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80c9 	beq.w	8001d0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	f000 8083 	beq.w	8001c90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d15e      	bne.n	8001c50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_RCC_OscConfig+0x4b8>)
 8001b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f981 	bl	8000ea4 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	e00c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff f97d 	bl	8000ea4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d905      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0ab      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc0:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1ec      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bcc:	4b52      	ldr	r3, [pc, #328]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <HAL_RCC_OscConfig+0x61c>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6a11      	ldr	r1, [r2, #32]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001be6:	0212      	lsls	r2, r2, #8
 8001be8:	4311      	orrs	r1, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bee:	0852      	lsrs	r2, r2, #1
 8001bf0:	3a01      	subs	r2, #1
 8001bf2:	0552      	lsls	r2, r2, #21
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bfa:	0852      	lsrs	r2, r2, #1
 8001bfc:	3a01      	subs	r2, #1
 8001bfe:	0652      	lsls	r2, r2, #25
 8001c00:	4311      	orrs	r1, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c06:	06d2      	lsls	r2, r2, #27
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	4943      	ldr	r1, [pc, #268]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c10:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c1c:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a3d      	ldr	r2, [pc, #244]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff f93c 	bl	8000ea4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f938 	bl	8000ea4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e066      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x530>
 8001c4e:	e05e      	b.n	8001d0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f922 	bl	8000ea4 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f91e 	bl	8000ea4 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e04c      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4924      	ldr	r1, [pc, #144]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c88:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_RCC_OscConfig+0x620>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60cb      	str	r3, [r1, #12]
 8001c8e:	e03e      	b.n	8001d0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e039      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_OscConfig+0x618>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d12c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d123      	bne.n	8001d0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d11b      	bne.n	8001d0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d113      	bne.n	8001d0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d109      	bne.n	8001d0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	3b01      	subs	r3, #1
 8001d04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	019f800c 	.word	0x019f800c
 8001d20:	feeefffc 	.word	0xfeeefffc

08001d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e11e      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b91      	ldr	r3, [pc, #580]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d910      	bls.n	8001d6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b8e      	ldr	r3, [pc, #568]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 020f 	bic.w	r2, r3, #15
 8001d52:	498c      	ldr	r1, [pc, #560]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b8a      	ldr	r3, [pc, #552]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e106      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d073      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d129      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d80:	4b81      	ldr	r3, [pc, #516]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0f4      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001d90:	f000 f99e 	bl	80020d0 <RCC_GetSysClockFreqFromPLLSource>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4a7c      	ldr	r2, [pc, #496]	; (8001f8c <HAL_RCC_ClockConfig+0x268>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d93f      	bls.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001d9e:	4b7a      	ldr	r3, [pc, #488]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d033      	beq.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d12f      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc6:	4a70      	ldr	r2, [pc, #448]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dcc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e024      	b.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ddc:	4b6a      	ldr	r3, [pc, #424]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d109      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0c6      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dec:	4b66      	ldr	r3, [pc, #408]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0be      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001dfc:	f000 f8ce 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <HAL_RCC_ClockConfig+0x268>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d909      	bls.n	8001e1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e12:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b5a      	ldr	r3, [pc, #360]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4957      	ldr	r1, [pc, #348]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e30:	f7ff f838 	bl	8000ea4 <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff f834 	bl	8000ea4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e095      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b4e      	ldr	r3, [pc, #312]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d023      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a42      	ldr	r2, [pc, #264]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001e90:	4b3d      	ldr	r3, [pc, #244]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001e98:	4a3b      	ldr	r2, [pc, #236]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea0:	4b39      	ldr	r3, [pc, #228]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4936      	ldr	r1, [pc, #216]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001eba:	4b33      	ldr	r3, [pc, #204]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ec4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec6:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d21d      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 020f 	bic.w	r2, r3, #15
 8001edc:	4929      	ldr	r1, [pc, #164]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ee4:	f7fe ffde 	bl	8000ea4 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7fe ffda 	bl	8000ea4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e03b      	b.n	8001f7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ed      	bne.n	8001eec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d008      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	4917      	ldr	r1, [pc, #92]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	490f      	ldr	r1, [pc, #60]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f4e:	f000 f825 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f52:	4602      	mov	r2, r0
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <HAL_RCC_ClockConfig+0x264>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	091b      	lsrs	r3, r3, #4
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	490c      	ldr	r1, [pc, #48]	; (8001f90 <HAL_RCC_ClockConfig+0x26c>)
 8001f60:	5ccb      	ldrb	r3, [r1, r3]
 8001f62:	f003 031f 	and.w	r3, r3, #31
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x270>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_RCC_ClockConfig+0x274>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ff4a 	bl	8000e0c <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	04c4b400 	.word	0x04c4b400
 8001f90:	08003d94 	.word	0x08003d94
 8001f94:	20000004 	.word	0x20000004
 8001f98:	20000008 	.word	0x20000008

08001f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d102      	bne.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fae:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e047      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc0:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e03e      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fc6:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d136      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fdc:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d10c      	bne.n	800200a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	68d2      	ldr	r2, [r2, #12]
 8001ffc:	0a12      	lsrs	r2, r2, #8
 8001ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002002:	fb02 f303 	mul.w	r3, r2, r3
 8002006:	617b      	str	r3, [r7, #20]
      break;
 8002008:	e00c      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	4a10      	ldr	r2, [pc, #64]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	0a12      	lsrs	r2, r2, #8
 8002018:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
      break;
 8002022:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	0e5b      	lsrs	r3, r3, #25
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	e001      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002044:	693b      	ldr	r3, [r7, #16]
}
 8002046:	4618      	mov	r0, r3
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	00f42400 	.word	0x00f42400
 800205c:	016e3600 	.word	0x016e3600

08002060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCC_GetHCLKFreq+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800207c:	f7ff fff0 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003da4 	.word	0x08003da4

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a8:	f7ff ffda 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0adb      	lsrs	r3, r3, #11
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4904      	ldr	r1, [pc, #16]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08003da4 	.word	0x08003da4

080020d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e0:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	3301      	adds	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d10c      	bne.n	800210e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020f4:	4a17      	ldr	r2, [pc, #92]	; (8002154 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80020fe:	68d2      	ldr	r2, [r2, #12]
 8002100:	0a12      	lsrs	r2, r2, #8
 8002102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
    break;
 800210c:	e00c      	b.n	8002128 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002118:	68d2      	ldr	r2, [r2, #12]
 800211a:	0a12      	lsrs	r2, r2, #8
 800211c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
    break;
 8002126:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0e5b      	lsrs	r3, r3, #25
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002140:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	371c      	adds	r7, #28
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000
 8002154:	016e3600 	.word	0x016e3600
 8002158:	00f42400 	.word	0x00f42400

0800215c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002164:	2300      	movs	r3, #0
 8002166:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002168:	2300      	movs	r3, #0
 800216a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8098 	beq.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10d      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	4b40      	ldr	r3, [pc, #256]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	4a3f      	ldr	r2, [pc, #252]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002194:	6593      	str	r3, [r2, #88]	; 0x58
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a2:	2301      	movs	r3, #1
 80021a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a39      	ldr	r2, [pc, #228]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b2:	f7fe fe77 	bl	8000ea4 <HAL_GetTick>
 80021b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b8:	e009      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ba:	f7fe fe73 	bl	8000ea4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d902      	bls.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	74fb      	strb	r3, [r7, #19]
        break;
 80021cc:	e005      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ef      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80021da:	7cfb      	ldrb	r3, [r7, #19]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d159      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01e      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d019      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002206:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221e:	4a1b      	ldr	r2, [pc, #108]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002228:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d016      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7fe fe33 	bl	8000ea4 <HAL_GetTick>
 800223e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002240:	e00b      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fe2f 	bl	8000ea4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d902      	bls.n	800225a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	74fb      	strb	r3, [r7, #19]
            break;
 8002258:	e006      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0ec      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10b      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227c:	4903      	ldr	r1, [pc, #12]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800227e:	4313      	orrs	r3, r2
 8002280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002284:	e008      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	74bb      	strb	r3, [r7, #18]
 800228a:	e005      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002298:	7c7b      	ldrb	r3, [r7, #17]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d105      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800229e:	4ba7      	ldr	r3, [pc, #668]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	4aa6      	ldr	r2, [pc, #664]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022b6:	4ba1      	ldr	r3, [pc, #644]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022bc:	f023 0203 	bic.w	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	499d      	ldr	r1, [pc, #628]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022d8:	4b98      	ldr	r3, [pc, #608]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 020c 	bic.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4995      	ldr	r1, [pc, #596]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022fa:	4b90      	ldr	r3, [pc, #576]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	498c      	ldr	r1, [pc, #560]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800231c:	4b87      	ldr	r3, [pc, #540]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	4984      	ldr	r1, [pc, #528]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800233e:	4b7f      	ldr	r3, [pc, #508]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	497b      	ldr	r1, [pc, #492]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002360:	4b76      	ldr	r3, [pc, #472]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	4973      	ldr	r1, [pc, #460]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002382:	4b6e      	ldr	r3, [pc, #440]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	496a      	ldr	r1, [pc, #424]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a4:	4b65      	ldr	r3, [pc, #404]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	4962      	ldr	r1, [pc, #392]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023c6:	4b5d      	ldr	r3, [pc, #372]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	4959      	ldr	r1, [pc, #356]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023e8:	4b54      	ldr	r3, [pc, #336]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f6:	4951      	ldr	r1, [pc, #324]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800240a:	4b4c      	ldr	r3, [pc, #304]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	4948      	ldr	r1, [pc, #288]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800242c:	4b43      	ldr	r3, [pc, #268]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4940      	ldr	r1, [pc, #256]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800244a:	d105      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a3a      	ldr	r2, [pc, #232]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002460:	2b00      	cmp	r3, #0
 8002462:	d015      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002464:	4b35      	ldr	r3, [pc, #212]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002472:	4932      	ldr	r1, [pc, #200]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002482:	d105      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002484:	4b2d      	ldr	r3, [pc, #180]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a2c      	ldr	r2, [pc, #176]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800248e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d015      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4924      	ldr	r1, [pc, #144]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ba:	d105      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a1e      	ldr	r2, [pc, #120]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d015      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	4916      	ldr	r1, [pc, #88]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024f2:	d105      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d019      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800252a:	d109      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a02      	ldr	r2, [pc, #8]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002536:	60d3      	str	r3, [r2, #12]
 8002538:	e002      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800254c:	4b29      	ldr	r3, [pc, #164]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	4926      	ldr	r1, [pc, #152]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800256a:	d105      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800256c:	4b21      	ldr	r3, [pc, #132]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a20      	ldr	r2, [pc, #128]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002576:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002592:	4918      	ldr	r1, [pc, #96]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a2:	d105      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d015      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	490a      	ldr	r1, [pc, #40]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025da:	d105      	bne.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80025e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e09d      	b.n	8002746 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	2b00      	cmp	r3, #0
 8002610:	d108      	bne.n	8002624 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261a:	d009      	beq.n	8002630 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
 8002622:	e005      	b.n	8002630 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fb02 	bl	8000c54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002666:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002670:	d902      	bls.n	8002678 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e002      	b.n	800267e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002686:	d007      	beq.n	8002698 <HAL_SPI_Init+0xa0>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002690:	d002      	beq.n	8002698 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	ea42 0103 	orr.w	r1, r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	0c1b      	lsrs	r3, r3, #16
 80026f4:	f003 0204 	and.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002714:	ea42 0103 	orr.w	r1, r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002734:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002768:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002770:	7dbb      	ldrb	r3, [r7, #22]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d00d      	beq.n	8002792 <HAL_SPI_TransmitReceive_IT+0x42>
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800277c:	d106      	bne.n	800278c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_SPI_TransmitReceive_IT+0x3c>
 8002786:	7dbb      	ldrb	r3, [r7, #22]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d002      	beq.n	8002792 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800278c:	2302      	movs	r3, #2
 800278e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002790:	e07d      	b.n	800288e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d005      	beq.n	80027a4 <HAL_SPI_TransmitReceive_IT+0x54>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <HAL_SPI_TransmitReceive_IT+0x54>
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027a8:	e071      	b.n	800288e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_SPI_TransmitReceive_IT+0x68>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e06b      	b.n	8002890 <HAL_SPI_TransmitReceive_IT+0x140>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d003      	beq.n	80027d4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2205      	movs	r2, #5
 80027d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	887a      	ldrh	r2, [r7, #2]
 80027e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	887a      	ldrh	r2, [r7, #2]
 80027ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	887a      	ldrh	r2, [r7, #2]
 80027f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	887a      	ldrh	r2, [r7, #2]
 80027fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800280a:	d906      	bls.n	800281a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4a23      	ldr	r2, [pc, #140]	; (800289c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002810:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002816:	651a      	str	r2, [r3, #80]	; 0x50
 8002818:	e005      	b.n	8002826 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_SPI_TransmitReceive_IT+0x154>)
 800281e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002824:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800282e:	d802      	bhi.n	8002836 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d908      	bls.n	8002848 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	e007      	b.n	8002858 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002856:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d007      	beq.n	8002876 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800288c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800288e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002890:	4618      	mov	r0, r3
 8002892:	371c      	adds	r7, #28
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	08002c37 	.word	0x08002c37
 80028a0:	08002c9d 	.word	0x08002c9d
 80028a4:	08002ae7 	.word	0x08002ae7
 80028a8:	08002ba5 	.word	0x08002ba5

080028ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10e      	bne.n	80028ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
    return;
 80028ea:	e0ce      	b.n	8002a8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_SPI_IRQHandler+0x5e>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
    return;
 8002908:	e0bf      	b.n	8002a8a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <HAL_SPI_IRQHandler+0x7e>
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80b0 	beq.w	8002a8a <HAL_SPI_IRQHandler+0x1de>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80aa 	beq.w	8002a8a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d023      	beq.n	8002988 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d011      	beq.n	8002970 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	e00b      	b.n	8002988 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
        return;
 8002986:	e080      	b.n	8002a8a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d014      	beq.n	80029bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002996:	f043 0201 	orr.w	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00c      	beq.n	80029e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	f043 0208 	orr.w	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d04f      	beq.n	8002a88 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d104      	bne.n	8002a14 <HAL_SPI_IRQHandler+0x168>
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d034      	beq.n	8002a7e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0203 	bic.w	r2, r2, #3
 8002a22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a30:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <HAL_SPI_IRQHandler+0x1e4>)
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe fb70 	bl	800111e <HAL_DMA_Abort_IT>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d016      	beq.n	8002a86 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <HAL_SPI_IRQHandler+0x1e4>)
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fe fb5a 	bl	800111e <HAL_DMA_Abort_IT>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002a7c:	e003      	b.n	8002a86 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f812 	bl	8002aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002a84:	e000      	b.n	8002a88 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002a86:	bf00      	nop
    return;
 8002a88:	bf00      	nop
  }
}
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	08002abd 	.word	0x08002abd

08002a94 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff ffe5 	bl	8002aa8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d923      	bls.n	8002b42 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	b292      	uxth	r2, r2
 8002b06:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	1c9a      	adds	r2, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b02      	subs	r3, #2
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d11f      	bne.n	8002b70 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	e016      	b.n	8002b70 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f103 020c 	add.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b8a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d102      	bne.n	8002b9c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa14 	bl	8002fc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d912      	bls.n	8002bdc <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	881a      	ldrh	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	1c9a      	adds	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b02      	subs	r3, #2
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bda:	e012      	b.n	8002c02 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	7812      	ldrb	r2, [r2, #0]
 8002be8:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f9cb 	bl	8002fc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	b292      	uxth	r2, r2
 8002c4a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10f      	bne.n	8002c94 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d102      	bne.n	8002c94 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f998 	bl	8002fc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	881a      	ldrh	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	1c9a      	adds	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d110      	bne.n	8002cf4 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ce0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f968 	bl	8002fc4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d0c:	f7fe f8ca 	bl	8000ea4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	4413      	add	r3, r2
 8002d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d1c:	f7fe f8c2 	bl	8000ea4 <HAL_GetTick>
 8002d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	015b      	lsls	r3, r3, #5
 8002d28:	0d1b      	lsrs	r3, r3, #20
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d32:	e054      	b.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d050      	beq.n	8002dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d3c:	f7fe f8b2 	bl	8000ea4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d902      	bls.n	8002d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d13d      	bne.n	8002dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6a:	d111      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d74:	d004      	beq.n	8002d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7e:	d107      	bne.n	8002d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d98:	d10f      	bne.n	8002dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e017      	b.n	8002dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d19b      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000004 	.word	0x20000004

08002e0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e1e:	f7fe f841 	bl	8000ea4 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002e2e:	f7fe f839 	bl	8000ea4 <HAL_GetTick>
 8002e32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e3c:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00da      	lsls	r2, r3, #3
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	0d1b      	lsrs	r3, r3, #20
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002e54:	e060      	b.n	8002f18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e5c:	d107      	bne.n	8002e6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d050      	beq.n	8002f18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e76:	f7fe f815 	bl	8000ea4 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d902      	bls.n	8002e8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d13d      	bne.n	8002f08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea4:	d111      	bne.n	8002eca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eae:	d004      	beq.n	8002eba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb8:	d107      	bne.n	8002eca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	d10f      	bne.n	8002ef4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e010      	b.n	8002f2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4013      	ands	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d196      	bne.n	8002e56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3728      	adds	r7, #40	; 0x28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000004 	.word	0x20000004

08002f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff ff5b 	bl	8002e0c <SPI_WaitFifoStateUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e027      	b.n	8002fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f7ff fec0 	bl	8002cfc <SPI_WaitFlagStateUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f86:	f043 0220 	orr.w	r2, r3, #32
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e014      	b.n	8002fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff ff34 	bl	8002e0c <SPI_WaitFifoStateUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fae:	f043 0220 	orr.w	r2, r3, #32
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e000      	b.n	8002fbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fcc:	f7fd ff6a 	bl	8000ea4 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0220 	bic.w	r2, r2, #32
 8002fe0:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	2164      	movs	r1, #100	; 0x64
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff ffa6 	bl	8002f38 <SPI_EndRxTxTransaction>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	f043 0220 	orr.w	r2, r3, #32
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b04      	cmp	r3, #4
 8003010:	d107      	bne.n	8003022 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff fd3a 	bl	8002a94 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003020:	e00e      	b.n	8003040 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fd80 	bl	8000b30 <HAL_SPI_TxRxCpltCallback>
}
 8003030:	e006      	b.n	8003040 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fd34 	bl	8002aa8 <HAL_SPI_ErrorCallback>
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e042      	b.n	80030e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003060:	2b00      	cmp	r3, #0
 8003062:	d106      	bne.n	8003072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd fd99 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2224      	movs	r2, #36	; 0x24
 8003076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d002      	beq.n	8003098 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 fb24 	bl	80036e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f825 	bl	80030e8 <UART_SetConfig>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e01b      	b.n	80030e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fba3 	bl	8003824 <UART_CheckIdleState>
 80030de:	4603      	mov	r3, r0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b08c      	sub	sp, #48	; 0x30
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	431a      	orrs	r2, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	431a      	orrs	r2, r3
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	4313      	orrs	r3, r2
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4baa      	ldr	r3, [pc, #680]	; (80033c0 <UART_SetConfig+0x2d8>)
 8003118:	4013      	ands	r3, r2
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003120:	430b      	orrs	r3, r1
 8003122:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a9f      	ldr	r2, [pc, #636]	; (80033c4 <UART_SetConfig+0x2dc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	4313      	orrs	r3, r2
 8003152:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800315e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003168:	430b      	orrs	r3, r1
 800316a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f023 010f 	bic.w	r1, r3, #15
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a90      	ldr	r2, [pc, #576]	; (80033c8 <UART_SetConfig+0x2e0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d125      	bne.n	80031d8 <UART_SetConfig+0xf0>
 800318c:	4b8f      	ldr	r3, [pc, #572]	; (80033cc <UART_SetConfig+0x2e4>)
 800318e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b03      	cmp	r3, #3
 8003198:	d81a      	bhi.n	80031d0 <UART_SetConfig+0xe8>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <UART_SetConfig+0xb8>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	080031c1 	.word	0x080031c1
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031c9 	.word	0x080031c9
 80031b0:	2301      	movs	r3, #1
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031b6:	e116      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80031b8:	2302      	movs	r3, #2
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031be:	e112      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80031c0:	2304      	movs	r3, #4
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031c6:	e10e      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80031c8:	2308      	movs	r3, #8
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ce:	e10a      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80031d0:	2310      	movs	r3, #16
 80031d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031d6:	e106      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a7c      	ldr	r2, [pc, #496]	; (80033d0 <UART_SetConfig+0x2e8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d138      	bne.n	8003254 <UART_SetConfig+0x16c>
 80031e2:	4b7a      	ldr	r3, [pc, #488]	; (80033cc <UART_SetConfig+0x2e4>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	d82d      	bhi.n	800324c <UART_SetConfig+0x164>
 80031f0:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <UART_SetConfig+0x110>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	0800322d 	.word	0x0800322d
 80031fc:	0800324d 	.word	0x0800324d
 8003200:	0800324d 	.word	0x0800324d
 8003204:	0800324d 	.word	0x0800324d
 8003208:	0800323d 	.word	0x0800323d
 800320c:	0800324d 	.word	0x0800324d
 8003210:	0800324d 	.word	0x0800324d
 8003214:	0800324d 	.word	0x0800324d
 8003218:	08003235 	.word	0x08003235
 800321c:	0800324d 	.word	0x0800324d
 8003220:	0800324d 	.word	0x0800324d
 8003224:	0800324d 	.word	0x0800324d
 8003228:	08003245 	.word	0x08003245
 800322c:	2300      	movs	r3, #0
 800322e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003232:	e0d8      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003234:	2302      	movs	r3, #2
 8003236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800323a:	e0d4      	b.n	80033e6 <UART_SetConfig+0x2fe>
 800323c:	2304      	movs	r3, #4
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003242:	e0d0      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003244:	2308      	movs	r3, #8
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324a:	e0cc      	b.n	80033e6 <UART_SetConfig+0x2fe>
 800324c:	2310      	movs	r3, #16
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003252:	e0c8      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a5e      	ldr	r2, [pc, #376]	; (80033d4 <UART_SetConfig+0x2ec>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d125      	bne.n	80032aa <UART_SetConfig+0x1c2>
 800325e:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <UART_SetConfig+0x2e4>)
 8003260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003264:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003268:	2b30      	cmp	r3, #48	; 0x30
 800326a:	d016      	beq.n	800329a <UART_SetConfig+0x1b2>
 800326c:	2b30      	cmp	r3, #48	; 0x30
 800326e:	d818      	bhi.n	80032a2 <UART_SetConfig+0x1ba>
 8003270:	2b20      	cmp	r3, #32
 8003272:	d00a      	beq.n	800328a <UART_SetConfig+0x1a2>
 8003274:	2b20      	cmp	r3, #32
 8003276:	d814      	bhi.n	80032a2 <UART_SetConfig+0x1ba>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <UART_SetConfig+0x19a>
 800327c:	2b10      	cmp	r3, #16
 800327e:	d008      	beq.n	8003292 <UART_SetConfig+0x1aa>
 8003280:	e00f      	b.n	80032a2 <UART_SetConfig+0x1ba>
 8003282:	2300      	movs	r3, #0
 8003284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003288:	e0ad      	b.n	80033e6 <UART_SetConfig+0x2fe>
 800328a:	2302      	movs	r3, #2
 800328c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003290:	e0a9      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003292:	2304      	movs	r3, #4
 8003294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003298:	e0a5      	b.n	80033e6 <UART_SetConfig+0x2fe>
 800329a:	2308      	movs	r3, #8
 800329c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a0:	e0a1      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80032a2:	2310      	movs	r3, #16
 80032a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a8:	e09d      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <UART_SetConfig+0x2f0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d125      	bne.n	8003300 <UART_SetConfig+0x218>
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <UART_SetConfig+0x2e4>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032be:	2bc0      	cmp	r3, #192	; 0xc0
 80032c0:	d016      	beq.n	80032f0 <UART_SetConfig+0x208>
 80032c2:	2bc0      	cmp	r3, #192	; 0xc0
 80032c4:	d818      	bhi.n	80032f8 <UART_SetConfig+0x210>
 80032c6:	2b80      	cmp	r3, #128	; 0x80
 80032c8:	d00a      	beq.n	80032e0 <UART_SetConfig+0x1f8>
 80032ca:	2b80      	cmp	r3, #128	; 0x80
 80032cc:	d814      	bhi.n	80032f8 <UART_SetConfig+0x210>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <UART_SetConfig+0x1f0>
 80032d2:	2b40      	cmp	r3, #64	; 0x40
 80032d4:	d008      	beq.n	80032e8 <UART_SetConfig+0x200>
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x210>
 80032d8:	2300      	movs	r3, #0
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032de:	e082      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80032e0:	2302      	movs	r3, #2
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032e6:	e07e      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80032e8:	2304      	movs	r3, #4
 80032ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ee:	e07a      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80032f0:	2308      	movs	r3, #8
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f6:	e076      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80032f8:	2310      	movs	r3, #16
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032fe:	e072      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a35      	ldr	r2, [pc, #212]	; (80033dc <UART_SetConfig+0x2f4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d12a      	bne.n	8003360 <UART_SetConfig+0x278>
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <UART_SetConfig+0x2e4>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003318:	d01a      	beq.n	8003350 <UART_SetConfig+0x268>
 800331a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800331e:	d81b      	bhi.n	8003358 <UART_SetConfig+0x270>
 8003320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003324:	d00c      	beq.n	8003340 <UART_SetConfig+0x258>
 8003326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800332a:	d815      	bhi.n	8003358 <UART_SetConfig+0x270>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <UART_SetConfig+0x250>
 8003330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003334:	d008      	beq.n	8003348 <UART_SetConfig+0x260>
 8003336:	e00f      	b.n	8003358 <UART_SetConfig+0x270>
 8003338:	2300      	movs	r3, #0
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800333e:	e052      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003340:	2302      	movs	r3, #2
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003346:	e04e      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800334e:	e04a      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003356:	e046      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800335e:	e042      	b.n	80033e6 <UART_SetConfig+0x2fe>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <UART_SetConfig+0x2dc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d13a      	bne.n	80033e0 <UART_SetConfig+0x2f8>
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <UART_SetConfig+0x2e4>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003374:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003378:	d01a      	beq.n	80033b0 <UART_SetConfig+0x2c8>
 800337a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800337e:	d81b      	bhi.n	80033b8 <UART_SetConfig+0x2d0>
 8003380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003384:	d00c      	beq.n	80033a0 <UART_SetConfig+0x2b8>
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338a:	d815      	bhi.n	80033b8 <UART_SetConfig+0x2d0>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <UART_SetConfig+0x2b0>
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003394:	d008      	beq.n	80033a8 <UART_SetConfig+0x2c0>
 8003396:	e00f      	b.n	80033b8 <UART_SetConfig+0x2d0>
 8003398:	2300      	movs	r3, #0
 800339a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800339e:	e022      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80033a0:	2302      	movs	r3, #2
 80033a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033a6:	e01e      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80033a8:	2304      	movs	r3, #4
 80033aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ae:	e01a      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80033b0:	2308      	movs	r3, #8
 80033b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033b6:	e016      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80033b8:	2310      	movs	r3, #16
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033be:	e012      	b.n	80033e6 <UART_SetConfig+0x2fe>
 80033c0:	cfff69f3 	.word	0xcfff69f3
 80033c4:	40008000 	.word	0x40008000
 80033c8:	40013800 	.word	0x40013800
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40004400 	.word	0x40004400
 80033d4:	40004800 	.word	0x40004800
 80033d8:	40004c00 	.word	0x40004c00
 80033dc:	40005000 	.word	0x40005000
 80033e0:	2310      	movs	r3, #16
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4aae      	ldr	r2, [pc, #696]	; (80036a4 <UART_SetConfig+0x5bc>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	f040 8097 	bne.w	8003520 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d823      	bhi.n	8003442 <UART_SetConfig+0x35a>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <UART_SetConfig+0x318>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003425 	.word	0x08003425
 8003404:	08003443 	.word	0x08003443
 8003408:	0800342d 	.word	0x0800342d
 800340c:	08003443 	.word	0x08003443
 8003410:	08003433 	.word	0x08003433
 8003414:	08003443 	.word	0x08003443
 8003418:	08003443 	.word	0x08003443
 800341c:	08003443 	.word	0x08003443
 8003420:	0800343b 	.word	0x0800343b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7fe fe28 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003428:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800342a:	e010      	b.n	800344e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800342c:	4b9e      	ldr	r3, [pc, #632]	; (80036a8 <UART_SetConfig+0x5c0>)
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003430:	e00d      	b.n	800344e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003432:	f7fe fdb3 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8003436:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003438:	e009      	b.n	800344e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003440:	e005      	b.n	800344e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800344c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8130 	beq.w	80036b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	4a94      	ldr	r2, [pc, #592]	; (80036ac <UART_SetConfig+0x5c4>)
 800345c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003460:	461a      	mov	r2, r3
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	fbb3 f3f2 	udiv	r3, r3, r2
 8003468:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	429a      	cmp	r2, r3
 8003478:	d305      	bcc.n	8003486 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	429a      	cmp	r2, r3
 8003484:	d903      	bls.n	800348e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800348c:	e113      	b.n	80036b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	2200      	movs	r2, #0
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	60fa      	str	r2, [r7, #12]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	4a84      	ldr	r2, [pc, #528]	; (80036ac <UART_SetConfig+0x5c4>)
 800349c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2200      	movs	r2, #0
 80034a4:	603b      	str	r3, [r7, #0]
 80034a6:	607a      	str	r2, [r7, #4]
 80034a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034b0:	f7fc feb2 	bl	8000218 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4610      	mov	r0, r2
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	020b      	lsls	r3, r1, #8
 80034c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034ca:	0202      	lsls	r2, r0, #8
 80034cc:	6979      	ldr	r1, [r7, #20]
 80034ce:	6849      	ldr	r1, [r1, #4]
 80034d0:	0849      	lsrs	r1, r1, #1
 80034d2:	2000      	movs	r0, #0
 80034d4:	460c      	mov	r4, r1
 80034d6:	4605      	mov	r5, r0
 80034d8:	eb12 0804 	adds.w	r8, r2, r4
 80034dc:	eb43 0905 	adc.w	r9, r3, r5
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	469a      	mov	sl, r3
 80034e8:	4693      	mov	fp, r2
 80034ea:	4652      	mov	r2, sl
 80034ec:	465b      	mov	r3, fp
 80034ee:	4640      	mov	r0, r8
 80034f0:	4649      	mov	r1, r9
 80034f2:	f7fc fe91 	bl	8000218 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4613      	mov	r3, r2
 80034fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003504:	d308      	bcc.n	8003518 <UART_SetConfig+0x430>
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800350c:	d204      	bcs.n	8003518 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	e0ce      	b.n	80036b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800351e:	e0ca      	b.n	80036b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003528:	d166      	bne.n	80035f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800352a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800352e:	2b08      	cmp	r3, #8
 8003530:	d827      	bhi.n	8003582 <UART_SetConfig+0x49a>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0x450>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800355d 	.word	0x0800355d
 800353c:	08003565 	.word	0x08003565
 8003540:	0800356d 	.word	0x0800356d
 8003544:	08003583 	.word	0x08003583
 8003548:	08003573 	.word	0x08003573
 800354c:	08003583 	.word	0x08003583
 8003550:	08003583 	.word	0x08003583
 8003554:	08003583 	.word	0x08003583
 8003558:	0800357b 	.word	0x0800357b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800355c:	f7fe fd8c 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003560:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003562:	e014      	b.n	800358e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003564:	f7fe fd9e 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003568:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800356a:	e010      	b.n	800358e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800356c:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <UART_SetConfig+0x5c0>)
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003570:	e00d      	b.n	800358e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003572:	f7fe fd13 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8003576:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003578:	e009      	b.n	800358e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003580:	e005      	b.n	800358e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800358c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8090 	beq.w	80036b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	4a44      	ldr	r2, [pc, #272]	; (80036ac <UART_SetConfig+0x5c4>)
 800359c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035a0:	461a      	mov	r2, r3
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035a8:	005a      	lsls	r2, r3, #1
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	085b      	lsrs	r3, r3, #1
 80035b0:	441a      	add	r2, r3
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d916      	bls.n	80035f0 <UART_SetConfig+0x508>
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c8:	d212      	bcs.n	80035f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f023 030f 	bic.w	r3, r3, #15
 80035d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	b29a      	uxth	r2, r3
 80035e0:	8bfb      	ldrh	r3, [r7, #30]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	8bfa      	ldrh	r2, [r7, #30]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	e062      	b.n	80036b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80035f6:	e05e      	b.n	80036b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d828      	bhi.n	8003652 <UART_SetConfig+0x56a>
 8003600:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <UART_SetConfig+0x520>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003635 	.word	0x08003635
 8003610:	0800363d 	.word	0x0800363d
 8003614:	08003653 	.word	0x08003653
 8003618:	08003643 	.word	0x08003643
 800361c:	08003653 	.word	0x08003653
 8003620:	08003653 	.word	0x08003653
 8003624:	08003653 	.word	0x08003653
 8003628:	0800364b 	.word	0x0800364b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800362c:	f7fe fd24 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003632:	e014      	b.n	800365e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003634:	f7fe fd36 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800363a:	e010      	b.n	800365e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800363c:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <UART_SetConfig+0x5c0>)
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003640:	e00d      	b.n	800365e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003642:	f7fe fcab 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003648:	e009      	b.n	800365e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800364a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003650:	e005      	b.n	800365e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800365c:	bf00      	nop
    }

    if (pclk != 0U)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d028      	beq.n	80036b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	4a10      	ldr	r2, [pc, #64]	; (80036ac <UART_SetConfig+0x5c4>)
 800366a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800366e:	461a      	mov	r2, r3
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	fbb3 f2f2 	udiv	r2, r3, r2
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	441a      	add	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	d910      	bls.n	80036b0 <UART_SetConfig+0x5c8>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003694:	d20c      	bcs.n	80036b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	b29a      	uxth	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	e009      	b.n	80036b6 <UART_SetConfig+0x5ce>
 80036a2:	bf00      	nop
 80036a4:	40008000 	.word	0x40008000
 80036a8:	00f42400 	.word	0x00f42400
 80036ac:	08003dac 	.word	0x08003dac
      }
      else
      {
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2200      	movs	r2, #0
 80036ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2200      	movs	r2, #0
 80036d0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80036d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3730      	adds	r7, #48	; 0x30
 80036da:	46bd      	mov	sp, r7
 80036dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01a      	beq.n	80037f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037de:	d10a      	bne.n	80037f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	605a      	str	r2, [r3, #4]
  }
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b098      	sub	sp, #96	; 0x60
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003834:	f7fd fb36 	bl	8000ea4 <HAL_GetTick>
 8003838:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d12f      	bne.n	80038a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003850:	2200      	movs	r2, #0
 8003852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f88e 	bl	8003978 <UART_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d022      	beq.n	80038a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003876:	653b      	str	r3, [r7, #80]	; 0x50
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003880:	647b      	str	r3, [r7, #68]	; 0x44
 8003882:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800388e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e6      	bne.n	8003862 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e063      	b.n	8003970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d149      	bne.n	800394a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	2200      	movs	r2, #0
 80038c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f857 	bl	8003978 <UART_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d03c      	beq.n	800394a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	623b      	str	r3, [r7, #32]
   return(result);
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ee:	633b      	str	r3, [r7, #48]	; 0x30
 80038f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f6:	e841 2300 	strex	r3, r2, [r1]
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e6      	bne.n	80038d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3308      	adds	r3, #8
 8003908:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	60fb      	str	r3, [r7, #12]
   return(result);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	64bb      	str	r3, [r7, #72]	; 0x48
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3308      	adds	r3, #8
 8003920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003922:	61fa      	str	r2, [r7, #28]
 8003924:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	69b9      	ldr	r1, [r7, #24]
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	e841 2300 	strex	r3, r2, [r1]
 800392e:	617b      	str	r3, [r7, #20]
   return(result);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1e5      	bne.n	8003902 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e012      	b.n	8003970 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3758      	adds	r7, #88	; 0x58
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003988:	e04f      	b.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d04b      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7fd fa87 	bl	8000ea4 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e04e      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d037      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d034      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	d031      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d110      	bne.n	80039f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2208      	movs	r2, #8
 80039da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f838 	bl	8003a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2208      	movs	r2, #8
 80039e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e029      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a04:	d111      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f81e 	bl	8003a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e00f      	b.n	8003a4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69da      	ldr	r2, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	4013      	ands	r3, r2
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	bf0c      	ite	eq
 8003a3a:	2301      	moveq	r3, #1
 8003a3c:	2300      	movne	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	461a      	mov	r2, r3
 8003a42:	79fb      	ldrb	r3, [r7, #7]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d0a0      	beq.n	800398a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b095      	sub	sp, #84	; 0x54
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a78:	643b      	str	r3, [r7, #64]	; 0x40
 8003a7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e6      	bne.n	8003a5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3308      	adds	r3, #8
 8003a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	e853 3f00 	ldrex	r3, [r3]
 8003a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e3      	bne.n	8003a8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d118      	bne.n	8003afe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0310 	bic.w	r3, r3, #16
 8003ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	613b      	str	r3, [r7, #16]
   return(result);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003b12:	bf00      	nop
 8003b14:	3754      	adds	r7, #84	; 0x54
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_UARTEx_DisableFifoMode+0x16>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e027      	b.n	8003b84 <HAL_UARTEx_DisableFifoMode+0x66>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003b62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e02d      	b.n	8003c04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	; 0x24
 8003bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f84f 	bl	8003c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e02d      	b.n	8003c80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f811 	bl	8003c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d108      	bne.n	8003caa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ca8:	e031      	b.n	8003d0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003caa:	2308      	movs	r3, #8
 8003cac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003cae:	2308      	movs	r3, #8
 8003cb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	0e5b      	lsrs	r3, r3, #25
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	0f5b      	lsrs	r3, r3, #29
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003cd2:	7bbb      	ldrb	r3, [r7, #14]
 8003cd4:	7b3a      	ldrb	r2, [r7, #12]
 8003cd6:	4911      	ldr	r1, [pc, #68]	; (8003d1c <UARTEx_SetNbDataToProcess+0x94>)
 8003cd8:	5c8a      	ldrb	r2, [r1, r2]
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003cde:	7b3a      	ldrb	r2, [r7, #12]
 8003ce0:	490f      	ldr	r1, [pc, #60]	; (8003d20 <UARTEx_SetNbDataToProcess+0x98>)
 8003ce2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ce4:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	7b7a      	ldrb	r2, [r7, #13]
 8003cf4:	4909      	ldr	r1, [pc, #36]	; (8003d1c <UARTEx_SetNbDataToProcess+0x94>)
 8003cf6:	5c8a      	ldrb	r2, [r1, r2]
 8003cf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003cfc:	7b7a      	ldrb	r2, [r7, #13]
 8003cfe:	4908      	ldr	r1, [pc, #32]	; (8003d20 <UARTEx_SetNbDataToProcess+0x98>)
 8003d00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d02:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	08003dc4 	.word	0x08003dc4
 8003d20:	08003dcc 	.word	0x08003dcc

08003d24 <memset>:
 8003d24:	4402      	add	r2, r0
 8003d26:	4603      	mov	r3, r0
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <memset+0xa>
 8003d2c:	4770      	bx	lr
 8003d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d32:	e7f9      	b.n	8003d28 <memset+0x4>

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	; (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	; (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	; (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	; (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 f818 	bl	8003d7c <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08003ddc 	.word	0x08003ddc
 8003d70:	08003ddc 	.word	0x08003ddc
 8003d74:	08003ddc 	.word	0x08003ddc
 8003d78:	08003de0 	.word	0x08003de0

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
