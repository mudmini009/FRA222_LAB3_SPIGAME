
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006948  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08006b28  08006b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e00  08006e00  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e08  08006e08  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e08  08006e08  00016e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000060  08006e70  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08006e70  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017eab  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c05  00000000  00000000  00037f7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  0003ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001118  00000000  00000000  0003c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275c9  00000000  00000000  0003d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fe1  00000000  00000000  00064809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100da1  00000000  00000000  0007e7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000625c  00000000  00000000  0017f58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001857e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006b10 	.word	0x08006b10

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08006b10 	.word	0x08006b10

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f001 f835 	bl	800165e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f84c 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9de 	bl	80009b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f9aa 	bl	8000954 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000600:	f000 f8d2 	bl	80007a8 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000604:	f000 f91a 	bl	800083c <MX_SPI3_Init>
  MX_TIM3_Init();
 8000608:	f000 f956 	bl	80008b8 <MX_TIM3_Init>
  MX_I2C1_Init();
 800060c:	f000 f88c 	bl	8000728 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 8000610:	4818      	ldr	r0, [pc, #96]	; (8000674 <main+0x88>)
 8000612:	f004 faa9 	bl	8004b68 <HAL_TIM_Base_Start>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\nYou need to PICK 1 or 2 coins VS AI\r\n", strlen("\r\nYou need to PICK 1 or 2 coins VS AI\r\n"), HAL_MAX_DELAY);
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2227      	movs	r2, #39	; 0x27
 800061c:	4916      	ldr	r1, [pc, #88]	; (8000678 <main+0x8c>)
 800061e:	4817      	ldr	r0, [pc, #92]	; (800067c <main+0x90>)
 8000620:	f004 fe5e 	bl	80052e0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Who pick the last coin Win!!\r\n", strlen("Who pick the last coin Win!!\r\n"), HAL_MAX_DELAY);
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	221e      	movs	r2, #30
 800062a:	4915      	ldr	r1, [pc, #84]	; (8000680 <main+0x94>)
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <main+0x90>)
 800062e:	f004 fe57 	bl	80052e0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"If you're ready please type\r\n", strlen("If you're ready please type\r\n"), HAL_MAX_DELAY);
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	221d      	movs	r2, #29
 8000638:	4912      	ldr	r1, [pc, #72]	; (8000684 <main+0x98>)
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <main+0x90>)
 800063c:	f004 fe50 	bl	80052e0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"wanna play this game so bad\r\n", strlen("wanna play this game so bad\r\n"), HAL_MAX_DELAY);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	221d      	movs	r2, #29
 8000646:	4910      	ldr	r1, [pc, #64]	; (8000688 <main+0x9c>)
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <main+0x90>)
 800064a:	f004 fe49 	bl	80052e0 <HAL_UART_Transmit>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)"and now you can join\r\n", strlen("and now you can join\r\n"), HAL_MAX_DELAY);
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
 8000652:	2216      	movs	r2, #22
 8000654:	490d      	ldr	r1, [pc, #52]	; (800068c <main+0xa0>)
 8000656:	4809      	ldr	r0, [pc, #36]	; (800067c <main+0x90>)
 8000658:	f004 fe42 	bl	80052e0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  AreYouReadyToPlay();
 800065c:	f000 fa3c 	bl	8000ad8 <AreYouReadyToPlay>
	      SPITxRx_readIO();
 8000660:	f000 fa8a 	bl	8000b78 <SPITxRx_readIO>
	      TikTokGame();
 8000664:	f000 fab2 	bl	8000bcc <TikTokGame>
	      CoinLeftUART();
 8000668:	f000 fd24 	bl	80010b4 <CoinLeftUART>
	      LEDdisplay();
 800066c:	f000 fcba 	bl	8000fe4 <LEDdisplay>
  {
 8000670:	e7f4      	b.n	800065c <main+0x70>
 8000672:	bf00      	nop
 8000674:	20000288 	.word	0x20000288
 8000678:	08006b28 	.word	0x08006b28
 800067c:	20000190 	.word	0x20000190
 8000680:	08006b50 	.word	0x08006b50
 8000684:	08006b70 	.word	0x08006b70
 8000688:	08006b90 	.word	0x08006b90
 800068c:	08006bb0 	.word	0x08006bb0

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	; 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 0318 	add.w	r3, r7, #24
 800069a:	2238      	movs	r2, #56	; 0x38
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fdb2 	bl	8006208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f002 fca8 	bl	8003008 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c6:	2302      	movs	r3, #2
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006d2:	2355      	movs	r3, #85	; 0x55
 80006d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f107 0318 	add.w	r3, r7, #24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fd42 	bl	8003170 <HAL_RCC_OscConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006f2:	f000 fd0f 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2303      	movs	r3, #3
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2104      	movs	r1, #4
 800070e:	4618      	mov	r0, r3
 8000710:	f003 f840 	bl	8003794 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800071a:	f000 fcfb 	bl	8001114 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C1_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C1_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C1_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_I2C1_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_I2C1_Init+0x74>)
 8000740:	2201      	movs	r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_I2C1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C1_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_I2C1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000762:	480e      	ldr	r0, [pc, #56]	; (800079c <MX_I2C1_Init+0x74>)
 8000764:	f001 fd21 	bl	80021aa <HAL_I2C_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076e:	f000 fcd1 	bl	8001114 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000772:	2100      	movs	r1, #0
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C1_Init+0x74>)
 8000776:	f002 fbb0 	bl	8002eda <HAL_I2CEx_ConfigAnalogFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 fcc8 	bl	8001114 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000784:	2100      	movs	r1, #0
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_I2C1_Init+0x74>)
 8000788:	f002 fbf2 	bl	8002f70 <HAL_I2CEx_ConfigDigitalFilter>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 fcbf 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	40005400 	.word	0x40005400
 80007a4:	30a0a7fb 	.word	0x30a0a7fb

080007a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007ac:	4b21      	ldr	r3, [pc, #132]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <MX_LPUART1_UART_Init+0x90>)
 80007b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80007b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007ea:	4812      	ldr	r0, [pc, #72]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007ec:	f004 fd28 	bl	8005240 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 fc8d 	bl	8001114 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fa:	2100      	movs	r1, #0
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 80007fe:	f005 fc19 	bl	8006034 <HAL_UARTEx_SetTxFifoThreshold>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000808:	f000 fc84 	bl	8001114 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080c:	2100      	movs	r1, #0
 800080e:	4809      	ldr	r0, [pc, #36]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 8000810:	f005 fc4e 	bl	80060b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800081a:	f000 fc7b 	bl	8001114 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	f005 fbcf 	bl	8005fc2 <HAL_UARTEx_DisableFifoMode>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800082a:	f000 fc73 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000190 	.word	0x20000190
 8000838:	40008000 	.word	0x40008000

0800083c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000840:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_SPI3_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000856:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800085a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI3_Init+0x74>)
 800086a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000872:	2238      	movs	r2, #56	; 0x38
 8000874:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI3_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI3_Init+0x74>)
 800088a:	2207      	movs	r2, #7
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI3_Init+0x74>)
 8000896:	2208      	movs	r2, #8
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_SPI3_Init+0x74>)
 800089c:	f003 fbe4 	bl	8004068 <HAL_SPI_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 fc35 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000224 	.word	0x20000224
 80008b4:	40003c00 	.word	0x40003c00

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d6:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM3_Init+0x94>)
 80008d8:	4a1d      	ldr	r2, [pc, #116]	; (8000950 <MX_TIM3_Init+0x98>)
 80008da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 80008dc:	4b1b      	ldr	r3, [pc, #108]	; (800094c <MX_TIM3_Init+0x94>)
 80008de:	f244 2267 	movw	r2, #16999	; 0x4267
 80008e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM3_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <MX_TIM3_Init+0x94>)
 80008ec:	2263      	movs	r2, #99	; 0x63
 80008ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_TIM3_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM3_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fc:	4813      	ldr	r0, [pc, #76]	; (800094c <MX_TIM3_Init+0x94>)
 80008fe:	f004 f8db 	bl	8004ab8 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000908:	f000 fc04 	bl	8001114 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_TIM3_Init+0x94>)
 800091a:	f004 f995 	bl	8004c48 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 fbf6 	bl	8001114 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_TIM3_Init+0x94>)
 8000936:	f004 fbed 	bl	8005114 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 fbe8 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000288 	.word	0x20000288
 8000950:	40000400 	.word	0x40000400

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_DMA_Init+0x60>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <MX_DMA_Init+0x60>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6493      	str	r3, [r2, #72]	; 0x48
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_DMA_Init+0x60>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_DMA_Init+0x60>)
 8000974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_DMA_Init+0x60>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6493      	str	r3, [r2, #72]	; 0x48
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_DMA_Init+0x60>)
 8000980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	200b      	movs	r0, #11
 8000990:	f000 ffd3 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000994:	200b      	movs	r0, #11
 8000996:	f000 ffea 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	200c      	movs	r0, #12
 80009a0:	f000 ffcb 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009a4:	200c      	movs	r0, #12
 80009a6:	f000 ffe2 	bl	800196e <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <MX_GPIO_Init+0x114>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a3e      	ldr	r2, [pc, #248]	; (8000acc <MX_GPIO_Init+0x114>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <MX_GPIO_Init+0x114>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <MX_GPIO_Init+0x114>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a38      	ldr	r2, [pc, #224]	; (8000acc <MX_GPIO_Init+0x114>)
 80009ec:	f043 0320 	orr.w	r3, r3, #32
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <MX_GPIO_Init+0x114>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0320 	and.w	r3, r3, #32
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a32      	ldr	r2, [pc, #200]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a1c:	f043 0308 	orr.w	r3, r3, #8
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_GPIO_Init+0x114>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0302 	and.w	r3, r3, #2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2120      	movs	r1, #32
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f001 fb71 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2104      	movs	r1, #4
 8000a56:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000a58:	f001 fb6c 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4818      	ldr	r0, [pc, #96]	; (8000ad4 <MX_GPIO_Init+0x11c>)
 8000a74:	f001 f9c4 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f001 f9b5 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a96:	2304      	movs	r3, #4
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_GPIO_Init+0x118>)
 8000aae:	f001 f9a7 	bl	8001e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2028      	movs	r0, #40	; 0x28
 8000ab8:	f000 ff3f 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000abc:	2028      	movs	r0, #40	; 0x28
 8000abe:	f000 ff56 	bl	800196e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000c00 	.word	0x48000c00
 8000ad4:	48000800 	.word	0x48000800

08000ad8 <AreYouReadyToPlay>:

/* USER CODE BEGIN 4 */
void AreYouReadyToPlay() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
    while (1) {
        if (ReadyToPlay == 1) // If already ready to play, break the loop
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <AreYouReadyToPlay+0x84>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d034      	beq.n	8000b50 <AreYouReadyToPlay+0x78>
            break;

        memset(RxBuffer, 0, sizeof(RxBuffer)); // Clear the receive buffer
 8000ae6:	221b      	movs	r2, #27
 8000ae8:	2100      	movs	r1, #0
 8000aea:	481d      	ldr	r0, [pc, #116]	; (8000b60 <AreYouReadyToPlay+0x88>)
 8000aec:	f005 fb8c 	bl	8006208 <memset>

        HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, RxBuffer, 27, HAL_MAX_DELAY);
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295
 8000af4:	221b      	movs	r2, #27
 8000af6:	491a      	ldr	r1, [pc, #104]	; (8000b60 <AreYouReadyToPlay+0x88>)
 8000af8:	481a      	ldr	r0, [pc, #104]	; (8000b64 <AreYouReadyToPlay+0x8c>)
 8000afa:	f004 fc7f 	bl	80053fc <HAL_UART_Receive>
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]

        if (status == HAL_OK && strcmp((char*)RxBuffer, "wanna play this game so bad") == 0) {//correct condition
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d111      	bne.n	8000b2c <AreYouReadyToPlay+0x54>
 8000b08:	4917      	ldr	r1, [pc, #92]	; (8000b68 <AreYouReadyToPlay+0x90>)
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <AreYouReadyToPlay+0x88>)
 8000b0c:	f7ff fb88 	bl	8000220 <strcmp>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d10a      	bne.n	8000b2c <AreYouReadyToPlay+0x54>
            ReadyToPlay=1; //you are ready to play
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <AreYouReadyToPlay+0x84>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Welcome Your Turn start!\r\n", strlen("Welcome Your Turn start!\r\n"), HAL_MAX_DELAY);
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	221a      	movs	r2, #26
 8000b22:	4912      	ldr	r1, [pc, #72]	; (8000b6c <AreYouReadyToPlay+0x94>)
 8000b24:	480f      	ldr	r0, [pc, #60]	; (8000b64 <AreYouReadyToPlay+0x8c>)
 8000b26:	f004 fbdb 	bl	80052e0 <HAL_UART_Transmit>
            break; // Exit the loop once condition is met
 8000b2a:	e012      	b.n	8000b52 <AreYouReadyToPlay+0x7a>
        }
        else {
            ReadyToPlay=0;
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <AreYouReadyToPlay+0x84>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Do you really wanna play? Just type\r\n", strlen("Do you really wanna play? Just type\r\n"), HAL_MAX_DELAY);
 8000b32:	f04f 33ff 	mov.w	r3, #4294967295
 8000b36:	2225      	movs	r2, #37	; 0x25
 8000b38:	490d      	ldr	r1, [pc, #52]	; (8000b70 <AreYouReadyToPlay+0x98>)
 8000b3a:	480a      	ldr	r0, [pc, #40]	; (8000b64 <AreYouReadyToPlay+0x8c>)
 8000b3c:	f004 fbd0 	bl	80052e0 <HAL_UART_Transmit>
            HAL_UART_Transmit(&hlpuart1, (uint8_t *)"wanna play this game so bad\r\n", strlen("wanna play this game so bad\r\n"), HAL_MAX_DELAY);
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	221d      	movs	r2, #29
 8000b46:	490b      	ldr	r1, [pc, #44]	; (8000b74 <AreYouReadyToPlay+0x9c>)
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <AreYouReadyToPlay+0x8c>)
 8000b4a:	f004 fbc9 	bl	80052e0 <HAL_UART_Transmit>
    while (1) {
 8000b4e:	e7c6      	b.n	8000ade <AreYouReadyToPlay+0x6>
            break;
 8000b50:	bf00      	nop
        }
    }
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000314 	.word	0x20000314
 8000b60:	200002f8 	.word	0x200002f8
 8000b64:	20000190 	.word	0x20000190
 8000b68:	08006bc8 	.word	0x08006bc8
 8000b6c:	08006be4 	.word	0x08006be4
 8000b70:	08006c00 	.word	0x08006c00
 8000b74:	08006b90 	.word	0x08006b90

08000b78 <SPITxRx_readIO>:
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
HAL_Delay(5);
}

void SPITxRx_readIO()
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	480f      	ldr	r0, [pc, #60]	; (8000bbc <SPITxRx_readIO+0x44>)
 8000b80:	f001 fac0 	bl	8002104 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d016      	beq.n	8000bb8 <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <SPITxRx_readIO+0x44>)
 8000b90:	f001 fad0 	bl	8002134 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <SPITxRx_readIO+0x48>)
 8000b96:	2241      	movs	r2, #65	; 0x41
 8000b98:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <SPITxRx_readIO+0x48>)
 8000b9c:	2212      	movs	r2, #18
 8000b9e:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <SPITxRx_readIO+0x48>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <SPITxRx_readIO+0x48>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000bac:	2304      	movs	r3, #4
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <SPITxRx_readIO+0x4c>)
 8000bb0:	4903      	ldr	r1, [pc, #12]	; (8000bc0 <SPITxRx_readIO+0x48>)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <SPITxRx_readIO+0x50>)
 8000bb4:	f003 fb04 	bl	80041c0 <HAL_SPI_TransmitReceive_IT>
}
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	48000c00 	.word	0x48000c00
 8000bc0:	200002e0 	.word	0x200002e0
 8000bc4:	200002d4 	.word	0x200002d4
 8000bc8:	20000224 	.word	0x20000224

08000bcc <TikTokGame>:

void TikTokGame()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 8000bd0:	4bac      	ldr	r3, [pc, #688]	; (8000e84 <TikTokGame+0x2b8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	f040 8188 	bne.w	8000eea <TikTokGame+0x31e>
    {
    	switch (game_left) {
 8000bda:	4bab      	ldr	r3, [pc, #684]	; (8000e88 <TikTokGame+0x2bc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	f200 81e8 	bhi.w	8000fb6 <TikTokGame+0x3ea>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <TikTokGame+0x20>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000e0f 	.word	0x08000e0f
 8000bf0:	08000d5f 	.word	0x08000d5f
 8000bf4:	08000caf 	.word	0x08000caf
 8000bf8:	08000fb7 	.word	0x08000fb7
 8000bfc:	08000c01 	.word	0x08000c01
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 8000c00:	4ba2      	ldr	r3, [pc, #648]	; (8000e8c <TikTokGame+0x2c0>)
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d84f      	bhi.n	8000caa <TikTokGame+0xde>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <TikTokGame+0x44>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c75 	.word	0x08000c75
 8000c14:	08000cab 	.word	0x08000cab
 8000c18:	08000c4d 	.word	0x08000c4d
 8000c1c:	08000c25 	.word	0x08000c25
 8000c20:	08000cab 	.word	0x08000cab
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000c24:	4b9a      	ldr	r3, [pc, #616]	; (8000e90 <TikTokGame+0x2c4>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000c2a:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <TikTokGame+0x2bc>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c30:	4b98      	ldr	r3, [pc, #608]	; (8000e94 <TikTokGame+0x2c8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000c36:	4b93      	ldr	r3, [pc, #588]	; (8000e84 <TikTokGame+0x2b8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\r\n", strlen("You pick 1\r\n"), HAL_MAX_DELAY);
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	220c      	movs	r2, #12
 8000c42:	4995      	ldr	r1, [pc, #596]	; (8000e98 <TikTokGame+0x2cc>)
 8000c44:	4895      	ldr	r0, [pc, #596]	; (8000e9c <TikTokGame+0x2d0>)
 8000c46:	f004 fb4b 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000c4a:	e02f      	b.n	8000cac <TikTokGame+0xe0>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000c4c:	4b90      	ldr	r3, [pc, #576]	; (8000e90 <TikTokGame+0x2c4>)
 8000c4e:	2202      	movs	r2, #2
 8000c50:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 8000c52:	4b8d      	ldr	r3, [pc, #564]	; (8000e88 <TikTokGame+0x2bc>)
 8000c54:	2203      	movs	r2, #3
 8000c56:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c58:	4b8e      	ldr	r3, [pc, #568]	; (8000e94 <TikTokGame+0x2c8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000c5e:	4b89      	ldr	r3, [pc, #548]	; (8000e84 <TikTokGame+0x2b8>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 2\r\n", strlen("You pick 2\r\n"), HAL_MAX_DELAY);
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	220c      	movs	r2, #12
 8000c6a:	498d      	ldr	r1, [pc, #564]	; (8000ea0 <TikTokGame+0x2d4>)
 8000c6c:	488b      	ldr	r0, [pc, #556]	; (8000e9c <TikTokGame+0x2d0>)
 8000c6e:	f004 fb37 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000c72:	e01b      	b.n	8000cac <TikTokGame+0xe0>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000c74:	4b86      	ldr	r3, [pc, #536]	; (8000e90 <TikTokGame+0x2c4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000c7a:	4b83      	ldr	r3, [pc, #524]	; (8000e88 <TikTokGame+0x2bc>)
 8000c7c:	2205      	movs	r2, #5
 8000c7e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c80:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <TikTokGame+0x2c8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000c86:	4b7f      	ldr	r3, [pc, #508]	; (8000e84 <TikTokGame+0x2b8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\r\n", strlen("Loser gonna keep restart\r\n"), HAL_MAX_DELAY);
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c90:	221a      	movs	r2, #26
 8000c92:	4984      	ldr	r1, [pc, #528]	; (8000ea4 <TikTokGame+0x2d8>)
 8000c94:	4881      	ldr	r0, [pc, #516]	; (8000e9c <TikTokGame+0x2d0>)
 8000c96:	f004 fb23 	bl	80052e0 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\r\n", strlen("Your Turn NOW!!\r\n"), HAL_MAX_DELAY);
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	2211      	movs	r2, #17
 8000ca0:	4981      	ldr	r1, [pc, #516]	; (8000ea8 <TikTokGame+0x2dc>)
 8000ca2:	487e      	ldr	r0, [pc, #504]	; (8000e9c <TikTokGame+0x2d0>)
 8000ca4:	f004 fb1c 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000ca8:	e000      	b.n	8000cac <TikTokGame+0xe0>
    	            default: // multi press do nothing
    	                break;
 8000caa:	bf00      	nop
    	        }
    	        break;
 8000cac:	e183      	b.n	8000fb6 <TikTokGame+0x3ea>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 8000cae:	4b77      	ldr	r3, [pc, #476]	; (8000e8c <TikTokGame+0x2c0>)
 8000cb0:	789b      	ldrb	r3, [r3, #2]
 8000cb2:	3b03      	subs	r3, #3
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d850      	bhi.n	8000d5a <TikTokGame+0x18e>
 8000cb8:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <TikTokGame+0xf4>)
 8000cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cbe:	bf00      	nop
 8000cc0:	08000d25 	.word	0x08000d25
 8000cc4:	08000d5b 	.word	0x08000d5b
 8000cc8:	08000cfd 	.word	0x08000cfd
 8000ccc:	08000cd5 	.word	0x08000cd5
 8000cd0:	08000d5b 	.word	0x08000d5b
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000cd4:	4b6e      	ldr	r3, [pc, #440]	; (8000e90 <TikTokGame+0x2c4>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000cda:	4b6b      	ldr	r3, [pc, #428]	; (8000e88 <TikTokGame+0x2bc>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000ce0:	4b6c      	ldr	r3, [pc, #432]	; (8000e94 <TikTokGame+0x2c8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000ce6:	4b67      	ldr	r3, [pc, #412]	; (8000e84 <TikTokGame+0x2b8>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\r\n", strlen("You pick 1\r\n"), HAL_MAX_DELAY);
 8000cec:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf0:	220c      	movs	r2, #12
 8000cf2:	4969      	ldr	r1, [pc, #420]	; (8000e98 <TikTokGame+0x2cc>)
 8000cf4:	4869      	ldr	r0, [pc, #420]	; (8000e9c <TikTokGame+0x2d0>)
 8000cf6:	f004 faf3 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000cfa:	e02f      	b.n	8000d5c <TikTokGame+0x190>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000cfc:	4b64      	ldr	r3, [pc, #400]	; (8000e90 <TikTokGame+0x2c4>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000d02:	4b61      	ldr	r3, [pc, #388]	; (8000e88 <TikTokGame+0x2bc>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000d08:	4b62      	ldr	r3, [pc, #392]	; (8000e94 <TikTokGame+0x2c8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <TikTokGame+0x2b8>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 2\r\n", strlen("You pick 2\r\n"), HAL_MAX_DELAY);
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	220c      	movs	r2, #12
 8000d1a:	4961      	ldr	r1, [pc, #388]	; (8000ea0 <TikTokGame+0x2d4>)
 8000d1c:	485f      	ldr	r0, [pc, #380]	; (8000e9c <TikTokGame+0x2d0>)
 8000d1e:	f004 fadf 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000d22:	e01b      	b.n	8000d5c <TikTokGame+0x190>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000d24:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <TikTokGame+0x2c4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000d2a:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <TikTokGame+0x2bc>)
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000d30:	4b58      	ldr	r3, [pc, #352]	; (8000e94 <TikTokGame+0x2c8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000d36:	4b53      	ldr	r3, [pc, #332]	; (8000e84 <TikTokGame+0x2b8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\r\n", strlen("Loser gonna keep restart\r\n"), HAL_MAX_DELAY);
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	221a      	movs	r2, #26
 8000d42:	4958      	ldr	r1, [pc, #352]	; (8000ea4 <TikTokGame+0x2d8>)
 8000d44:	4855      	ldr	r0, [pc, #340]	; (8000e9c <TikTokGame+0x2d0>)
 8000d46:	f004 facb 	bl	80052e0 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\r\n", strlen("Your Turn NOW!!\r\n"), HAL_MAX_DELAY);
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	2211      	movs	r2, #17
 8000d50:	4955      	ldr	r1, [pc, #340]	; (8000ea8 <TikTokGame+0x2dc>)
 8000d52:	4852      	ldr	r0, [pc, #328]	; (8000e9c <TikTokGame+0x2d0>)
 8000d54:	f004 fac4 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000d58:	e000      	b.n	8000d5c <TikTokGame+0x190>
    	            default: // multi press do nothing
    	                break;
 8000d5a:	bf00      	nop
    	        }
    	        break;
 8000d5c:	e12b      	b.n	8000fb6 <TikTokGame+0x3ea>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000d5e:	4b4b      	ldr	r3, [pc, #300]	; (8000e8c <TikTokGame+0x2c0>)
 8000d60:	789b      	ldrb	r3, [r3, #2]
 8000d62:	3b03      	subs	r3, #3
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	d850      	bhi.n	8000e0a <TikTokGame+0x23e>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <TikTokGame+0x1a4>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000dd5 	.word	0x08000dd5
 8000d74:	08000e0b 	.word	0x08000e0b
 8000d78:	08000dad 	.word	0x08000dad
 8000d7c:	08000d85 	.word	0x08000d85
 8000d80:	08000e0b 	.word	0x08000e0b
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000d84:	4b42      	ldr	r3, [pc, #264]	; (8000e90 <TikTokGame+0x2c4>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000d8a:	4b3f      	ldr	r3, [pc, #252]	; (8000e88 <TikTokGame+0x2bc>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000d90:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <TikTokGame+0x2c8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <TikTokGame+0x2b8>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\r\n", strlen("You pick 1\r\n"), HAL_MAX_DELAY);
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	220c      	movs	r2, #12
 8000da2:	493d      	ldr	r1, [pc, #244]	; (8000e98 <TikTokGame+0x2cc>)
 8000da4:	483d      	ldr	r0, [pc, #244]	; (8000e9c <TikTokGame+0x2d0>)
 8000da6:	f004 fa9b 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000daa:	e02f      	b.n	8000e0c <TikTokGame+0x240>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <TikTokGame+0x2c4>)
 8000dae:	2202      	movs	r2, #2
 8000db0:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <TikTokGame+0x2bc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000db8:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <TikTokGame+0x2c8>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <TikTokGame+0x2b8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 2\r\n", strlen("You pick 2\r\n"), HAL_MAX_DELAY);
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	220c      	movs	r2, #12
 8000dca:	4935      	ldr	r1, [pc, #212]	; (8000ea0 <TikTokGame+0x2d4>)
 8000dcc:	4833      	ldr	r0, [pc, #204]	; (8000e9c <TikTokGame+0x2d0>)
 8000dce:	f004 fa87 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000dd2:	e01b      	b.n	8000e0c <TikTokGame+0x240>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000dd4:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <TikTokGame+0x2c4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <TikTokGame+0x2bc>)
 8000ddc:	2205      	movs	r2, #5
 8000dde:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <TikTokGame+0x2c8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000de6:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <TikTokGame+0x2b8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\r\n", strlen("Loser gonna keep restart\r\n"), HAL_MAX_DELAY);
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	221a      	movs	r2, #26
 8000df2:	492c      	ldr	r1, [pc, #176]	; (8000ea4 <TikTokGame+0x2d8>)
 8000df4:	4829      	ldr	r0, [pc, #164]	; (8000e9c <TikTokGame+0x2d0>)
 8000df6:	f004 fa73 	bl	80052e0 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\r\n", strlen("Your Turn NOW!!\r\n"), HAL_MAX_DELAY);
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	2211      	movs	r2, #17
 8000e00:	4929      	ldr	r1, [pc, #164]	; (8000ea8 <TikTokGame+0x2dc>)
 8000e02:	4826      	ldr	r0, [pc, #152]	; (8000e9c <TikTokGame+0x2d0>)
 8000e04:	f004 fa6c 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000e08:	e000      	b.n	8000e0c <TikTokGame+0x240>
    	            default: // multi press do nothing
    	                break;
 8000e0a:	bf00      	nop
    	        }
    	        break;
 8000e0c:	e0d3      	b.n	8000fb6 <TikTokGame+0x3ea>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <TikTokGame+0x2c0>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	3b03      	subs	r3, #3
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d866      	bhi.n	8000ee6 <TikTokGame+0x31a>
 8000e18:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <TikTokGame+0x254>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000eb1 	.word	0x08000eb1
 8000e24:	08000ee7 	.word	0x08000ee7
 8000e28:	08000e5d 	.word	0x08000e5d
 8000e2c:	08000e35 	.word	0x08000e35
 8000e30:	08000ee7 	.word	0x08000ee7
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <TikTokGame+0x2c4>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <TikTokGame+0x2bc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <TikTokGame+0x2c8>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <TikTokGame+0x2b8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"You pick 1\r\n", strlen("You pick 1\r\n"), HAL_MAX_DELAY);
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e50:	220c      	movs	r2, #12
 8000e52:	4911      	ldr	r1, [pc, #68]	; (8000e98 <TikTokGame+0x2cc>)
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <TikTokGame+0x2d0>)
 8000e56:	f004 fa43 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000e5a:	e045      	b.n	8000ee8 <TikTokGame+0x31c>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <TikTokGame+0x2c4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <TikTokGame+0x2bc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <TikTokGame+0x2c8>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <TikTokGame+0x2b8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Are you blind? I gonna let you pick 1\r\n", strlen("Are you blind? I gonna let you pick 1\r\n"), HAL_MAX_DELAY);
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
 8000e78:	2227      	movs	r2, #39	; 0x27
 8000e7a:	490c      	ldr	r1, [pc, #48]	; (8000eac <TikTokGame+0x2e0>)
 8000e7c:	4807      	ldr	r0, [pc, #28]	; (8000e9c <TikTokGame+0x2d0>)
 8000e7e:	f004 fa2f 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000e82:	e031      	b.n	8000ee8 <TikTokGame+0x31c>
 8000e84:	200002f0 	.word	0x200002f0
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	200002d4 	.word	0x200002d4
 8000e90:	200002f4 	.word	0x200002f4
 8000e94:	200002ec 	.word	0x200002ec
 8000e98:	08006c28 	.word	0x08006c28
 8000e9c:	20000190 	.word	0x20000190
 8000ea0:	08006c38 	.word	0x08006c38
 8000ea4:	08006c48 	.word	0x08006c48
 8000ea8:	08006c64 	.word	0x08006c64
 8000eac:	08006c78 	.word	0x08006c78
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <TikTokGame+0x3f4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000eb6:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <TikTokGame+0x3f8>)
 8000eb8:	2205      	movs	r2, #5
 8000eba:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000ebc:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <TikTokGame+0x3fc>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000ec2:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <TikTokGame+0x400>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Loser gonna keep restart\r\n", strlen("Loser gonna keep restart\r\n"), HAL_MAX_DELAY);
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ecc:	221a      	movs	r2, #26
 8000ece:	4940      	ldr	r1, [pc, #256]	; (8000fd0 <TikTokGame+0x404>)
 8000ed0:	4840      	ldr	r0, [pc, #256]	; (8000fd4 <TikTokGame+0x408>)
 8000ed2:	f004 fa05 	bl	80052e0 <HAL_UART_Transmit>
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\r\n", strlen("Your Turn NOW!!\r\n"), HAL_MAX_DELAY);
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	2211      	movs	r2, #17
 8000edc:	493e      	ldr	r1, [pc, #248]	; (8000fd8 <TikTokGame+0x40c>)
 8000ede:	483d      	ldr	r0, [pc, #244]	; (8000fd4 <TikTokGame+0x408>)
 8000ee0:	f004 f9fe 	bl	80052e0 <HAL_UART_Transmit>
    	                break;
 8000ee4:	e000      	b.n	8000ee8 <TikTokGame+0x31c>
    	            default: // multi press do nothing
    	                break;
 8000ee6:	bf00      	nop
    	        }
    	        break;
 8000ee8:	e065      	b.n	8000fb6 <TikTokGame+0x3ea>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <TikTokGame+0x3f8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d85d      	bhi.n	8000fb0 <TikTokGame+0x3e4>
 8000ef4:	a201      	add	r2, pc, #4	; (adr r2, 8000efc <TikTokGame+0x330>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f8f 	.word	0x08000f8f
 8000f00:	08000f6d 	.word	0x08000f6d
 8000f04:	08000f3d 	.word	0x08000f3d
 8000f08:	08000f0d 	.word	0x08000f0d
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <TikTokGame+0x3f4>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000f12:	4b2c      	ldr	r3, [pc, #176]	; (8000fc4 <TikTokGame+0x3f8>)
 8000f14:	2203      	movs	r2, #3
 8000f16:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000f18:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <TikTokGame+0x3fc>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 1\r\n", strlen("AI pick 1\r\n"), HAL_MAX_DELAY);
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	220b      	movs	r2, #11
 8000f24:	492d      	ldr	r1, [pc, #180]	; (8000fdc <TikTokGame+0x410>)
 8000f26:	482b      	ldr	r0, [pc, #172]	; (8000fd4 <TikTokGame+0x408>)
 8000f28:	f004 f9da 	bl	80052e0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\r\n", strlen("Your Turn NOW!!\r\n"), HAL_MAX_DELAY);
 8000f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f30:	2211      	movs	r2, #17
 8000f32:	4929      	ldr	r1, [pc, #164]	; (8000fd8 <TikTokGame+0x40c>)
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <TikTokGame+0x408>)
 8000f36:	f004 f9d3 	bl	80052e0 <HAL_UART_Transmit>
                break;
 8000f3a:	e039      	b.n	8000fb0 <TikTokGame+0x3e4>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <TikTokGame+0x3f4>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <TikTokGame+0x3f8>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <TikTokGame+0x3fc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 1\r\n", strlen("AI pick 1\r\n"), HAL_MAX_DELAY);
 8000f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f52:	220b      	movs	r2, #11
 8000f54:	4921      	ldr	r1, [pc, #132]	; (8000fdc <TikTokGame+0x410>)
 8000f56:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <TikTokGame+0x408>)
 8000f58:	f004 f9c2 	bl	80052e0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\r\n", strlen("Your Turn NOW!!\r\n"), HAL_MAX_DELAY);
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	2211      	movs	r2, #17
 8000f62:	491d      	ldr	r1, [pc, #116]	; (8000fd8 <TikTokGame+0x40c>)
 8000f64:	481b      	ldr	r0, [pc, #108]	; (8000fd4 <TikTokGame+0x408>)
 8000f66:	f004 f9bb 	bl	80052e0 <HAL_UART_Transmit>
                break;
 8000f6a:	e021      	b.n	8000fb0 <TikTokGame+0x3e4>
            case 2:
                // statements
                game_pick = 2; // pick2
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <TikTokGame+0x3f4>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <TikTokGame+0x3f8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <TikTokGame+0x3fc>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 2\r\n", strlen("AI pick 2\r\n"), HAL_MAX_DELAY);
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	220b      	movs	r2, #11
 8000f84:	4916      	ldr	r1, [pc, #88]	; (8000fe0 <TikTokGame+0x414>)
 8000f86:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <TikTokGame+0x408>)
 8000f88:	f004 f9aa 	bl	80052e0 <HAL_UART_Transmit>
                break;
 8000f8c:	e010      	b.n	8000fb0 <TikTokGame+0x3e4>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <TikTokGame+0x3f4>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <TikTokGame+0x3f8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <TikTokGame+0x3fc>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI pick 1\r\n", strlen("AI pick 1\r\n"), HAL_MAX_DELAY);
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <TikTokGame+0x410>)
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <TikTokGame+0x408>)
 8000faa:	f004 f999 	bl	80052e0 <HAL_UART_Transmit>
                break;
 8000fae:	bf00      	nop
        }
        game_turn = 0;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <TikTokGame+0x400>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
        //HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn NOW!!\r\n", strlen("Your Turn NOW!!\r\n"), HAL_MAX_DELAY);
    }
    HAL_Delay(200);//delay
 8000fb6:	20c8      	movs	r0, #200	; 0xc8
 8000fb8:	f000 fbc2 	bl	8001740 <HAL_Delay>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200002f4 	.word	0x200002f4
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200002ec 	.word	0x200002ec
 8000fcc:	200002f0 	.word	0x200002f0
 8000fd0:	08006c48 	.word	0x08006c48
 8000fd4:	20000190 	.word	0x20000190
 8000fd8:	08006c64 	.word	0x08006c64
 8000fdc:	08006ca0 	.word	0x08006ca0
 8000fe0:	08006cac 	.word	0x08006cac

08000fe4 <LEDdisplay>:

void LEDdisplay() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	switch (game_winner) {
 8000fe8:	4b28      	ldr	r3, [pc, #160]	; (800108c <LEDdisplay+0xa8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d028      	beq.n	8001042 <LEDdisplay+0x5e>
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	dc49      	bgt.n	8001088 <LEDdisplay+0xa4>
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d046      	beq.n	8001086 <LEDdisplay+0xa2>
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d000      	beq.n	8000ffe <LEDdisplay+0x1a>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\r\n", strlen("Congrats You are winning!!!\r\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\r\n", strlen("But now what?? Let's play again I know You still fun\r\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\r\n", strlen("Coin left is 5. It's your turn to pick.\r\n"), HAL_MAX_DELAY);
	            break;
	    }
}
 8000ffc:	e044      	b.n	8001088 <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <LEDdisplay+0xac>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <LEDdisplay+0xb0>)
 8001006:	2205      	movs	r2, #5
 8001008:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <LEDdisplay+0xa8>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8001010:	4b21      	ldr	r3, [pc, #132]	; (8001098 <LEDdisplay+0xb4>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI Win!! Humanity Lost!\r\n", strlen("AI Win!! Humanity Lost!\r\n"), HAL_MAX_DELAY);
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	2219      	movs	r2, #25
 800101c:	491f      	ldr	r1, [pc, #124]	; (800109c <LEDdisplay+0xb8>)
 800101e:	4820      	ldr	r0, [pc, #128]	; (80010a0 <LEDdisplay+0xbc>)
 8001020:	f004 f95e 	bl	80052e0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Try again we believe in you\r\n", strlen("Try again we believe in you\r\n"), HAL_MAX_DELAY);
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	221d      	movs	r2, #29
 800102a:	491e      	ldr	r1, [pc, #120]	; (80010a4 <LEDdisplay+0xc0>)
 800102c:	481c      	ldr	r0, [pc, #112]	; (80010a0 <LEDdisplay+0xbc>)
 800102e:	f004 f957 	bl	80052e0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\r\n", strlen("Coin left is 5. It's your turn to pick.\r\n"), HAL_MAX_DELAY);
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	2229      	movs	r2, #41	; 0x29
 8001038:	491b      	ldr	r1, [pc, #108]	; (80010a8 <LEDdisplay+0xc4>)
 800103a:	4819      	ldr	r0, [pc, #100]	; (80010a0 <LEDdisplay+0xbc>)
 800103c:	f004 f950 	bl	80052e0 <HAL_UART_Transmit>
	            break;
 8001040:	e022      	b.n	8001088 <LEDdisplay+0xa4>
                game_pick = 0; // no pick
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <LEDdisplay+0xac>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <LEDdisplay+0xb0>)
 800104a:	2205      	movs	r2, #5
 800104c:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <LEDdisplay+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <LEDdisplay+0xb4>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\r\n", strlen("Congrats You are winning!!!\r\n"), HAL_MAX_DELAY);
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	221d      	movs	r2, #29
 8001060:	4912      	ldr	r1, [pc, #72]	; (80010ac <LEDdisplay+0xc8>)
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <LEDdisplay+0xbc>)
 8001064:	f004 f93c 	bl	80052e0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"But now what?? Let's play again I know You still fun\r\n", strlen("But now what?? Let's play again I know You still fun\r\n"), HAL_MAX_DELAY);
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	2236      	movs	r2, #54	; 0x36
 800106e:	4910      	ldr	r1, [pc, #64]	; (80010b0 <LEDdisplay+0xcc>)
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <LEDdisplay+0xbc>)
 8001072:	f004 f935 	bl	80052e0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\r\n", strlen("Coin left is 5. It's your turn to pick.\r\n"), HAL_MAX_DELAY);
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	2229      	movs	r2, #41	; 0x29
 800107c:	490a      	ldr	r1, [pc, #40]	; (80010a8 <LEDdisplay+0xc4>)
 800107e:	4808      	ldr	r0, [pc, #32]	; (80010a0 <LEDdisplay+0xbc>)
 8001080:	f004 f92e 	bl	80052e0 <HAL_UART_Transmit>
	            break;
 8001084:	e000      	b.n	8001088 <LEDdisplay+0xa4>
	            break;
 8001086:	bf00      	nop
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200002ec 	.word	0x200002ec
 8001090:	200002f4 	.word	0x200002f4
 8001094:	20000000 	.word	0x20000000
 8001098:	200002f0 	.word	0x200002f0
 800109c:	08006cb8 	.word	0x08006cb8
 80010a0:	20000190 	.word	0x20000190
 80010a4:	08006cd4 	.word	0x08006cd4
 80010a8:	08006cf4 	.word	0x08006cf4
 80010ac:	08006d20 	.word	0x08006d20
 80010b0:	08006d40 	.word	0x08006d40

080010b4 <CoinLeftUART>:
void CoinLeftUART() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
	 char coin_left_message[30]; // Buffer to store the message
	    sprintf(coin_left_message, "Coin left is %d\r\r\n", game_left); // Use \r\r\n for proper newline
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <CoinLeftUART+0x34>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	463b      	mov	r3, r7
 80010c0:	490a      	ldr	r1, [pc, #40]	; (80010ec <CoinLeftUART+0x38>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f005 f880 	bl	80061c8 <siprintf>
	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)coin_left_message, strlen(coin_left_message), HAL_MAX_DELAY);
 80010c8:	463b      	mov	r3, r7
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f8b2 	bl	8000234 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4639      	mov	r1, r7
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <CoinLeftUART+0x3c>)
 80010dc:	f004 f900 	bl	80052e0 <HAL_UART_Transmit>
}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	08006d78 	.word	0x08006d78
 80010f0:	20000190 	.word	0x20000190

080010f4 <HAL_SPI_TxRxCpltCallback>:
//	}
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 80010fc:	2201      	movs	r2, #1
 80010fe:	2104      	movs	r1, #4
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8001102:	f001 f817 	bl	8002134 <HAL_GPIO_WritePin>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	48000c00 	.word	0x48000c00

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	e7fe      	b.n	800111c <Error_Handler+0x8>
	...

08001120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_MspInit+0x44>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_MspInit+0x44>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001156:	f001 fffb 	bl	8003150 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0a0      	sub	sp, #128	; 0x80
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	2254      	movs	r2, #84	; 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f005 f83d 	bl	8006208 <memset>
  if(hi2c->Instance==I2C1)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a5f      	ldr	r2, [pc, #380]	; (8001310 <HAL_I2C_MspInit+0x1a8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	f040 80b6 	bne.w	8001306 <HAL_I2C_MspInit+0x19e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800119a:	2340      	movs	r3, #64	; 0x40
 800119c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800119e:	2300      	movs	r3, #0
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fd10 	bl	8003bcc <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011b2:	f7ff ffaf 	bl	8001114 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b57      	ldr	r3, [pc, #348]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b54      	ldr	r3, [pc, #336]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b51      	ldr	r3, [pc, #324]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a50      	ldr	r2, [pc, #320]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b4e      	ldr	r3, [pc, #312]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ec:	2312      	movs	r3, #18
 80011ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011f8:	2304      	movs	r3, #4
 80011fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001206:	f000 fdfb 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120e:	2312      	movs	r3, #18
 8001210:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001216:	2300      	movs	r3, #0
 8001218:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121a:	2304      	movs	r3, #4
 800121c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001222:	4619      	mov	r1, r3
 8001224:	483c      	ldr	r0, [pc, #240]	; (8001318 <HAL_I2C_MspInit+0x1b0>)
 8001226:	f000 fdeb 	bl	8001e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122a:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a39      	ldr	r2, [pc, #228]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
 8001236:	4b37      	ldr	r3, [pc, #220]	; (8001314 <HAL_I2C_MspInit+0x1ac>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8001242:	4b36      	ldr	r3, [pc, #216]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 8001244:	4a36      	ldr	r2, [pc, #216]	; (8001320 <HAL_I2C_MspInit+0x1b8>)
 8001246:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 800124a:	2210      	movs	r2, #16
 800124c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124e:	4b33      	ldr	r3, [pc, #204]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001254:	4b31      	ldr	r3, [pc, #196]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800126c:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001272:	4b2a      	ldr	r3, [pc, #168]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001278:	4828      	ldr	r0, [pc, #160]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 800127a:	f000 fb93 	bl	80019a4 <HAL_DMA_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 8001284:	f7ff ff46 	bl	8001114 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a24      	ldr	r2, [pc, #144]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 800128c:	63da      	str	r2, [r3, #60]	; 0x3c
 800128e:	4a23      	ldr	r2, [pc, #140]	; (800131c <HAL_I2C_MspInit+0x1b4>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 8001296:	4a24      	ldr	r2, [pc, #144]	; (8001328 <HAL_I2C_MspInit+0x1c0>)
 8001298:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 800129c:	2211      	movs	r2, #17
 800129e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012a2:	2210      	movs	r2, #16
 80012a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80012ca:	4816      	ldr	r0, [pc, #88]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012cc:	f000 fb6a 	bl	80019a4 <HAL_DMA_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 80012d6:	f7ff ff1d 	bl	8001114 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a11      	ldr	r2, [pc, #68]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
 80012e0:	4a10      	ldr	r2, [pc, #64]	; (8001324 <HAL_I2C_MspInit+0x1bc>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	201f      	movs	r0, #31
 80012ec:	f000 fb25 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012f0:	201f      	movs	r0, #31
 80012f2:	f000 fb3c 	bl	800196e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2020      	movs	r0, #32
 80012fc:	f000 fb1d 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001300:	2020      	movs	r0, #32
 8001302:	f000 fb34 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	3780      	adds	r7, #128	; 0x80
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40005400 	.word	0x40005400
 8001314:	40021000 	.word	0x40021000
 8001318:	48000400 	.word	0x48000400
 800131c:	200000d0 	.word	0x200000d0
 8001320:	40020008 	.word	0x40020008
 8001324:	20000130 	.word	0x20000130
 8001328:	4002001c 	.word	0x4002001c

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09e      	sub	sp, #120	; 0x78
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2254      	movs	r2, #84	; 0x54
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f004 ff5b 	bl	8006208 <memset>
  if(huart->Instance==LPUART1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_UART_MspInit+0xa8>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d136      	bne.n	80013ca <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800135c:	2320      	movs	r3, #32
 800135e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fc2f 	bl	8003bcc <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001374:	f7ff fece 	bl	8001114 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0xac>)
 800137a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137c:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_UART_MspInit+0xac>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0xac>)
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_UART_MspInit+0xac>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0xac>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_UART_MspInit+0xac>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80013a8:	230c      	movs	r3, #12
 80013aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013b8:	230c      	movs	r3, #12
 80013ba:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f000 fd1b 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3778      	adds	r7, #120	; 0x78
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40008000 	.word	0x40008000
 80013d8:	40021000 	.word	0x40021000

080013dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_SPI_MspInit+0x8c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d130      	bne.n	8001460 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_SPI_MspInit+0x90>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_SPI_MspInit+0x90>)
 8001404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001408:	6593      	str	r3, [r2, #88]	; 0x58
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <HAL_SPI_MspInit+0x90>)
 800140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_SPI_MspInit+0x90>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a14      	ldr	r2, [pc, #80]	; (800146c <HAL_SPI_MspInit+0x90>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_SPI_MspInit+0x90>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800142e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001440:	2306      	movs	r3, #6
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4809      	ldr	r0, [pc, #36]	; (8001470 <HAL_SPI_MspInit+0x94>)
 800144c:	f000 fcd8 	bl	8001e00 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2033      	movs	r0, #51	; 0x33
 8001456:	f000 fa70 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800145a:	2033      	movs	r0, #51	; 0x33
 800145c:	f000 fa87 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40003c00 	.word	0x40003c00
 800146c:	40021000 	.word	0x40021000
 8001470:	48000800 	.word	0x48000800

08001474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_TIM_Base_MspInit+0x38>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d10b      	bne.n	800149e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_TIM_Base_MspInit+0x3c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6593      	str	r3, [r2, #88]	; 0x58
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_TIM_Base_MspInit+0x3c>)
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40021000 	.word	0x40021000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f900 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA1_Channel1_IRQHandler+0x10>)
 800150e:	f000 fb58 	bl	8001bc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000d0 	.word	0x200000d0

0800151c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA1_Channel2_IRQHandler+0x10>)
 8001522:	f000 fb4e 	bl	8001bc2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000130 	.word	0x20000130

08001530 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <I2C1_EV_IRQHandler+0x10>)
 8001536:	f000 fed3 	bl	80022e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000007c 	.word	0x2000007c

08001544 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <I2C1_ER_IRQHandler+0x10>)
 800154a:	f000 fee3 	bl	8002314 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000007c 	.word	0x2000007c

08001558 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800155c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001560:	f000 fe00 	bl	8002164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}

08001568 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <SPI3_IRQHandler+0x10>)
 800156e:	f002 fed5 	bl	800431c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000224 	.word	0x20000224

0800157c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001584:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <_sbrk+0x5c>)
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <_sbrk+0x60>)
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x64>)
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <_sbrk+0x68>)
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d207      	bcs.n	80015bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ac:	f004 fe34 	bl	8006218 <__errno>
 80015b0:	4603      	mov	r3, r0
 80015b2:	220c      	movs	r2, #12
 80015b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ba:	e009      	b.n	80015d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <_sbrk+0x64>)
 80015cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20020000 	.word	0x20020000
 80015dc:	00000400 	.word	0x00000400
 80015e0:	20000318 	.word	0x20000318
 80015e4:	20000468 	.word	0x20000468

080015e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <SystemInit+0x20>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <SystemInit+0x20>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800160e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001610:	f7ff ffea 	bl	80015e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <LoopForever+0x6>)
  ldr r1, =_edata
 8001616:	490d      	ldr	r1, [pc, #52]	; (800164c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001618:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <LoopForever+0xe>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800161c:	e002      	b.n	8001624 <LoopCopyDataInit>

0800161e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001622:	3304      	adds	r3, #4

08001624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001628:	d3f9      	bcc.n	800161e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <LoopForever+0x12>)
  ldr r4, =_ebss
 800162c:	4c0a      	ldr	r4, [pc, #40]	; (8001658 <LoopForever+0x16>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001630:	e001      	b.n	8001636 <LoopFillZerobss>

08001632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001634:	3204      	adds	r2, #4

08001636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001638:	d3fb      	bcc.n	8001632 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163a:	f004 fdf3 	bl	8006224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163e:	f7fe ffd5 	bl	80005ec <main>

08001642 <LoopForever>:

LoopForever:
    b LoopForever
 8001642:	e7fe      	b.n	8001642 <LoopForever>
  ldr   r0, =_estack
 8001644:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001650:	08006e10 	.word	0x08006e10
  ldr r2, =_sbss
 8001654:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001658:	20000468 	.word	0x20000468

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>

0800165e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001668:	2003      	movs	r0, #3
 800166a:	f000 f95b 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166e:	2000      	movs	r0, #0
 8001670:	f000 f80e 	bl	8001690 <HAL_InitTick>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	71fb      	strb	r3, [r7, #7]
 800167e:	e001      	b.n	8001684 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001680:	f7ff fd4e 	bl	8001120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001684:	79fb      	ldrb	r3, [r7, #7]

}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800169c:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <HAL_InitTick+0x68>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d022      	beq.n	80016ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_InitTick+0x6c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_InitTick+0x68>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f966 	bl	800198a <HAL_SYSTICK_Config>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10f      	bne.n	80016e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b0f      	cmp	r3, #15
 80016c8:	d809      	bhi.n	80016de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ca:	2200      	movs	r2, #0
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	f04f 30ff 	mov.w	r0, #4294967295
 80016d2:	f000 f932 	bl	800193a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d6:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_InitTick+0x70>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	e007      	b.n	80016ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e004      	b.n	80016ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e001      	b.n	80016ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	2000000c 	.word	0x2000000c
 80016fc:	20000004 	.word	0x20000004
 8001700:	20000008 	.word	0x20000008

08001704 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x1c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_IncTick+0x20>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4413      	add	r3, r2
 8001712:	4a03      	ldr	r2, [pc, #12]	; (8001720 <HAL_IncTick+0x1c>)
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	2000031c 	.word	0x2000031c
 8001724:	2000000c 	.word	0x2000000c

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	; (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000031c 	.word	0x2000031c

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d004      	beq.n	8001764 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_Delay+0x40>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001764:	bf00      	nop
 8001766:	f7ff ffdf 	bl	8001728 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	429a      	cmp	r2, r3
 8001774:	d8f7      	bhi.n	8001766 <HAL_Delay+0x26>
  {
  }
}
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000000c 	.word	0x2000000c

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff40 	bl	80017cc <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff90 	bl	8001878 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5f 	bl	8001824 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff33 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa4 	bl	80018e0 <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e08d      	b.n	8001ad2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_DMA_Init+0x138>)
 80019be:	429a      	cmp	r2, r3
 80019c0:	d80f      	bhi.n	80019e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <HAL_DMA_Init+0x13c>)
 80019ca:	4413      	add	r3, r2
 80019cc:	4a45      	ldr	r2, [pc, #276]	; (8001ae4 <HAL_DMA_Init+0x140>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	091b      	lsrs	r3, r3, #4
 80019d4:	009a      	lsls	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a42      	ldr	r2, [pc, #264]	; (8001ae8 <HAL_DMA_Init+0x144>)
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
 80019e0:	e00e      	b.n	8001a00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b40      	ldr	r3, [pc, #256]	; (8001aec <HAL_DMA_Init+0x148>)
 80019ea:	4413      	add	r3, r2
 80019ec:	4a3d      	ldr	r2, [pc, #244]	; (8001ae4 <HAL_DMA_Init+0x140>)
 80019ee:	fba2 2303 	umull	r2, r3, r2, r3
 80019f2:	091b      	lsrs	r3, r3, #4
 80019f4:	009a      	lsls	r2, r3, #2
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a3c      	ldr	r2, [pc, #240]	; (8001af0 <HAL_DMA_Init+0x14c>)
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 f972 	bl	8001d3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a60:	d102      	bne.n	8001a68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d010      	beq.n	8001aa8 <HAL_DMA_Init+0x104>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d80c      	bhi.n	8001aa8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f992 	bl	8001db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	e008      	b.n	8001aba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40020407 	.word	0x40020407
 8001ae0:	bffdfff8 	.word	0xbffdfff8
 8001ae4:	cccccccd 	.word	0xcccccccd
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	bffdfbf8 	.word	0xbffdfbf8
 8001af0:	40020400 	.word	0x40020400

08001af4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2204      	movs	r2, #4
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
 8001b26:	e047      	b.n	8001bb8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 020e 	bic.w	r2, r2, #14
 8001b36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2101      	movs	r1, #1
 8001b66:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b74:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00c      	beq.n	8001b98 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b96:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	4798      	blx	r3
    }
  }
  return status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2204      	movs	r2, #4
 8001be4:	409a      	lsls	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d026      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x7a>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d021      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d107      	bne.n	8001c16 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0204 	bic.w	r2, r2, #4
 8001c14:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f003 021f 	and.w	r2, r3, #31
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	2104      	movs	r1, #4
 8001c24:	fa01 f202 	lsl.w	r2, r1, r2
 8001c28:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d071      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c3a:	e06c      	b.n	8001d16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	2202      	movs	r2, #2
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d02e      	beq.n	8001cae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d029      	beq.n	8001cae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10b      	bne.n	8001c80 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 020a 	bic.w	r2, r2, #10
 8001c76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d038      	beq.n	8001d16 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cac:	e033      	b.n	8001d16 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d02a      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d025      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 020e 	bic.w	r2, r2, #14
 8001cda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f003 021f 	and.w	r2, r3, #31
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	2101      	movs	r1, #1
 8001cea:	fa01 f202 	lsl.w	r2, r1, r2
 8001cee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
}
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d2e:	b2db      	uxtb	r3, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d802      	bhi.n	8001d56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e001      	b.n	8001d5a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001d58:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3b08      	subs	r3, #8
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	009a      	lsls	r2, r3, #2
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d86:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 031f 	and.w	r3, r3, #31
 8001d8e:	2201      	movs	r2, #1
 8001d90:	409a      	lsls	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d96:	bf00      	nop
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40020407 	.word	0x40020407
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020820 	.word	0x40020820
 8001db0:	cccccccd 	.word	0xcccccccd
 8001db4:	40020880 	.word	0x40020880

08001db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001dda:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	2201      	movs	r2, #1
 8001de6:	409a      	lsls	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	1000823f 	.word	0x1000823f
 8001dfc:	40020940 	.word	0x40020940

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e0e:	e15a      	b.n	80020c6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 814c 	beq.w	80020c0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d005      	beq.n	8001e40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d130      	bne.n	8001ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e76:	2201      	movs	r2, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0201 	and.w	r2, r3, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d017      	beq.n	8001ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d123      	bne.n	8001f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	6939      	ldr	r1, [r7, #16]
 8001f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0203 	and.w	r2, r3, #3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80a6 	beq.w	80020c0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f74:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	4a5a      	ldr	r2, [pc, #360]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f80:	4b58      	ldr	r3, [pc, #352]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f8c:	4a56      	ldr	r2, [pc, #344]	; (80020e8 <HAL_GPIO_Init+0x2e8>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb6:	d01f      	beq.n	8001ff8 <HAL_GPIO_Init+0x1f8>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a4c      	ldr	r2, [pc, #304]	; (80020ec <HAL_GPIO_Init+0x2ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d019      	beq.n	8001ff4 <HAL_GPIO_Init+0x1f4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a4b      	ldr	r2, [pc, #300]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_GPIO_Init+0x1f0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a4a      	ldr	r2, [pc, #296]	; (80020f4 <HAL_GPIO_Init+0x2f4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00d      	beq.n	8001fec <HAL_GPIO_Init+0x1ec>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a49      	ldr	r2, [pc, #292]	; (80020f8 <HAL_GPIO_Init+0x2f8>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d007      	beq.n	8001fe8 <HAL_GPIO_Init+0x1e8>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_GPIO_Init+0x2fc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d101      	bne.n	8001fe4 <HAL_GPIO_Init+0x1e4>
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	e00a      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001fe4:	2306      	movs	r3, #6
 8001fe6:	e008      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	e006      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001fec:	2303      	movs	r3, #3
 8001fee:	e004      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e002      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e000      	b.n	8001ffa <HAL_GPIO_Init+0x1fa>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	f002 0203 	and.w	r2, r2, #3
 8002000:	0092      	lsls	r2, r2, #2
 8002002:	4093      	lsls	r3, r2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800200a:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_GPIO_Init+0x2e8>)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	3302      	adds	r3, #2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <HAL_GPIO_Init+0x300>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800203c:	4a30      	ldr	r2, [pc, #192]	; (8002100 <HAL_GPIO_Init+0x300>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002066:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_GPIO_Init+0x300>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_GPIO_Init+0x300>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_GPIO_Init+0x300>)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	3301      	adds	r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f47f ae9d 	bne.w	8001e10 <HAL_GPIO_Init+0x10>
  }
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010000 	.word	0x40010000
 80020ec:	48000400 	.word	0x48000400
 80020f0:	48000800 	.word	0x48000800
 80020f4:	48000c00 	.word	0x48000c00
 80020f8:	48001000 	.word	0x48001000
 80020fc:	48001400 	.word	0x48001400
 8002100:	40010400 	.word	0x40010400

08002104 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	887b      	ldrh	r3, [r7, #2]
 8002116:	4013      	ands	r3, r2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e001      	b.n	8002126 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002150:	e002      	b.n	8002158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800217c:	88fb      	ldrh	r3, [r7, #6]
 800217e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 f806 	bl	8002194 <HAL_GPIO_EXTI_Callback>
  }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010400 	.word	0x40010400

08002194 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e08d      	b.n	80022d8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe ffc9 	bl	8001168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d107      	bne.n	8002224 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	e006      	b.n	8002232 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002230:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d108      	bne.n	800224c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	e007      	b.n	800225c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800226a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69d9      	ldr	r1, [r3, #28]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	4798      	blx	r3
  }
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00f      	beq.n	8002356 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002354:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00f      	beq.n	8002380 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	f043 0208 	orr.w	r2, r3, #8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00f      	beq.n	80023aa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	f043 0202 	orr.w	r2, r3, #2
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 030b 	and.w	r3, r3, #11
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 fbd5 	bl	8002b6c <I2C_ITError>
  }
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
 80023fe:	4613      	mov	r3, r2
 8002400:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b086      	sub	sp, #24
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <I2C_Slave_ISR_IT+0x24>
 800246a:	2302      	movs	r3, #2
 800246c:	e0e2      	b.n	8002634 <I2C_Slave_ISR_IT+0x1ea>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800248a:	6939      	ldr	r1, [r7, #16]
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f9b5 	bl	80027fc <I2C_ITSlaveCplt>
 8002492:	e0ca      	b.n	800262a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d04b      	beq.n	8002536 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d046      	beq.n	8002536 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d128      	bne.n	8002504 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b28      	cmp	r3, #40	; 0x28
 80024bc:	d108      	bne.n	80024d0 <I2C_Slave_ISR_IT+0x86>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024c4:	d104      	bne.n	80024d0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fafb 	bl	8002ac4 <I2C_ITListenCplt>
 80024ce:	e031      	b.n	8002534 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b29      	cmp	r3, #41	; 0x29
 80024da:	d10e      	bne.n	80024fa <I2C_Slave_ISR_IT+0xb0>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024e2:	d00a      	beq.n	80024fa <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fc54 	bl	8002d9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f926 	bl	8002744 <I2C_ITSlaveSeqCplt>
 80024f8:	e01c      	b.n	8002534 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2210      	movs	r2, #16
 8002500:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002502:	e08f      	b.n	8002624 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <I2C_Slave_ISR_IT+0xdc>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002524:	d17e      	bne.n	8002624 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4619      	mov	r1, r3
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f000 fb1d 	bl	8002b6c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002532:	e077      	b.n	8002624 <I2C_Slave_ISR_IT+0x1da>
 8002534:	e076      	b.n	8002624 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02f      	beq.n	80025a0 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02a      	beq.n	80025a0 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d018      	beq.n	8002586 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d14b      	bne.n	8002628 <I2C_Slave_ISR_IT+0x1de>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002596:	d047      	beq.n	8002628 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f8d3 	bl	8002744 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800259e:	e043      	b.n	8002628 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025b4:	6939      	ldr	r1, [r7, #16]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f840 	bl	800263c <I2C_ITAddrCplt>
 80025bc:	e035      	b.n	800262a <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d030      	beq.n	800262a <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d02b      	beq.n	800262a <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d018      	beq.n	800260e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c5a      	adds	r2, r3, #1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
 800260c:	e00d      	b.n	800262a <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002614:	d002      	beq.n	800261c <I2C_Slave_ISR_IT+0x1d2>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f891 	bl	8002744 <I2C_ITSlaveSeqCplt>
 8002622:	e002      	b.n	800262a <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002624:	bf00      	nop
 8002626:	e000      	b.n	800262a <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002628:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002652:	2b28      	cmp	r3, #40	; 0x28
 8002654:	d16a      	bne.n	800272c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	0c1b      	lsrs	r3, r3, #16
 800266e:	b29b      	uxth	r3, r3
 8002670:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002674:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	b29b      	uxth	r3, r3
 800268c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002690:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d138      	bne.n	800270c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800269a:	897b      	ldrh	r3, [r7, #10]
 800269c:	09db      	lsrs	r3, r3, #7
 800269e:	b29a      	uxth	r2, r3
 80026a0:	89bb      	ldrh	r3, [r7, #12]
 80026a2:	4053      	eors	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f003 0306 	and.w	r3, r3, #6
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11c      	bne.n	80026e8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d13b      	bne.n	800273c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2208      	movs	r2, #8
 80026d0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026da:	89ba      	ldrh	r2, [r7, #12]
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fe86 	bl	80023f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026e6:	e029      	b.n	800273c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80026e8:	893b      	ldrh	r3, [r7, #8]
 80026ea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fb94 	bl	8002e1e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026fe:	89ba      	ldrh	r2, [r7, #12]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff fe74 	bl	80023f2 <HAL_I2C_AddrCallback>
}
 800270a:	e017      	b.n	800273c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800270c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 fb84 	bl	8002e1e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800271e:	89ba      	ldrh	r2, [r7, #12]
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff fe64 	bl	80023f2 <HAL_I2C_AddrCallback>
}
 800272a:	e007      	b.n	800273c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2208      	movs	r2, #8
 8002732:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e00c      	b.n	8002792 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002790:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b29      	cmp	r3, #41	; 0x29
 800279c:	d112      	bne.n	80027c4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2228      	movs	r2, #40	; 0x28
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2221      	movs	r2, #33	; 0x21
 80027aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027ac:	2101      	movs	r1, #1
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fb35 	bl	8002e1e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fe04 	bl	80023ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027c2:	e017      	b.n	80027f4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b2a      	cmp	r3, #42	; 0x2a
 80027ce:	d111      	bne.n	80027f4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2228      	movs	r2, #40	; 0x28
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2222      	movs	r2, #34	; 0x22
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027de:	2102      	movs	r1, #2
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb1c 	bl	8002e1e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fdf5 	bl	80023de <HAL_I2C_SlaveRxCpltCallback>
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2220      	movs	r2, #32
 8002826:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002828:	7afb      	ldrb	r3, [r7, #11]
 800282a:	2b21      	cmp	r3, #33	; 0x21
 800282c:	d002      	beq.n	8002834 <I2C_ITSlaveCplt+0x38>
 800282e:	7afb      	ldrb	r3, [r7, #11]
 8002830:	2b29      	cmp	r3, #41	; 0x29
 8002832:	d108      	bne.n	8002846 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002834:	f248 0101 	movw	r1, #32769	; 0x8001
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 faf0 	bl	8002e1e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2221      	movs	r2, #33	; 0x21
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
 8002844:	e019      	b.n	800287a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	2b22      	cmp	r3, #34	; 0x22
 800284a:	d002      	beq.n	8002852 <I2C_ITSlaveCplt+0x56>
 800284c:	7afb      	ldrb	r3, [r7, #11]
 800284e:	2b2a      	cmp	r3, #42	; 0x2a
 8002850:	d108      	bne.n	8002864 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002852:	f248 0102 	movw	r1, #32770	; 0x8002
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fae1 	bl	8002e1e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2222      	movs	r2, #34	; 0x22
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
 8002862:	e00a      	b.n	800287a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002864:	7afb      	ldrb	r3, [r7, #11]
 8002866:	2b28      	cmp	r3, #40	; 0x28
 8002868:	d107      	bne.n	800287a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800286a:	f248 0103 	movw	r1, #32771	; 0x8003
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 fad5 	bl	8002e1e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002888:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b89      	ldr	r3, [pc, #548]	; (8002abc <I2C_ITSlaveCplt+0x2c0>)
 8002896:	400b      	ands	r3, r1
 8002898:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa7d 	bl	8002d9a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d013      	beq.n	80028d2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01f      	beq.n	8002902 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d0:	e017      	b.n	8002902 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ea:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29b      	uxth	r3, r3
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	f043 0204 	orr.w	r2, r3, #4
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d049      	beq.n	8002a02 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002974:	2b00      	cmp	r3, #0
 8002976:	d044      	beq.n	8002a02 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d128      	bne.n	80029d4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b28      	cmp	r3, #40	; 0x28
 800298c:	d108      	bne.n	80029a0 <I2C_ITSlaveCplt+0x1a4>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002994:	d104      	bne.n	80029a0 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f893 	bl	8002ac4 <I2C_ITListenCplt>
 800299e:	e030      	b.n	8002a02 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b29      	cmp	r3, #41	; 0x29
 80029aa:	d10e      	bne.n	80029ca <I2C_ITSlaveCplt+0x1ce>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029b2:	d00a      	beq.n	80029ca <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2210      	movs	r2, #16
 80029ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f9ec 	bl	8002d9a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff febe 	bl	8002744 <I2C_ITSlaveSeqCplt>
 80029c8:	e01b      	b.n	8002a02 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	61da      	str	r2, [r3, #28]
 80029d2:	e016      	b.n	8002a02 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0204 	orr.w	r2, r3, #4
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <I2C_ITSlaveCplt+0x1fa>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f4:	d105      	bne.n	8002a02 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4619      	mov	r1, r3
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f8b5 	bl	8002b6c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8a4 	bl	8002b6c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b28      	cmp	r3, #40	; 0x28
 8002a2e:	d141      	bne.n	8002ab4 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a30:	6979      	ldr	r1, [r7, #20]
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f846 	bl	8002ac4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a38:	e03c      	b.n	8002ab4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a42:	d014      	beq.n	8002a6e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fe7d 	bl	8002744 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <I2C_ITSlaveCplt+0x2c4>)
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fcd1 	bl	800240e <HAL_I2C_ListenCpltCallback>
}
 8002a6c:	e022      	b.n	8002ab4 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b22      	cmp	r3, #34	; 0x22
 8002a78:	d10e      	bne.n	8002a98 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fca4 	bl	80023de <HAL_I2C_SlaveRxCpltCallback>
}
 8002a96:	e00d      	b.n	8002ab4 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fc8b 	bl	80023ca <HAL_I2C_SlaveTxCpltCallback>
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	fe00e800 	.word	0xfe00e800
 8002ac0:	ffff0000 	.word	0xffff0000

08002ac4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	; (8002b68 <I2C_ITListenCplt+0xa4>)
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d022      	beq.n	8002b40 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d012      	beq.n	8002b40 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b38:	f043 0204 	orr.w	r2, r3, #4
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b40:	f248 0103 	movw	r1, #32771	; 0x8003
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f96a 	bl	8002e1e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2210      	movs	r2, #16
 8002b50:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fc57 	bl	800240e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	ffff0000 	.word	0xffff0000

08002b6c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a6d      	ldr	r2, [pc, #436]	; (8002d40 <I2C_ITError+0x1d4>)
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b28      	cmp	r3, #40	; 0x28
 8002ba2:	d005      	beq.n	8002bb0 <I2C_ITError+0x44>
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b29      	cmp	r3, #41	; 0x29
 8002ba8:	d002      	beq.n	8002bb0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b2a      	cmp	r3, #42	; 0x2a
 8002bae:	d10b      	bne.n	8002bc8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bb0:	2103      	movs	r1, #3
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f933 	bl	8002e1e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2228      	movs	r2, #40	; 0x28
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a60      	ldr	r2, [pc, #384]	; (8002d44 <I2C_ITError+0x1d8>)
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bc6:	e030      	b.n	8002c2a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bc8:	f248 0103 	movw	r1, #32771	; 0x8003
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f926 	bl	8002e1e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f8e1 	bl	8002d9a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b60      	cmp	r3, #96	; 0x60
 8002be2:	d01f      	beq.n	8002c24 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d114      	bne.n	8002c24 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d109      	bne.n	8002c1c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f043 0204 	orr.w	r2, r3, #4
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2220      	movs	r2, #32
 8002c22:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d039      	beq.n	8002cac <I2C_ITError+0x140>
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b11      	cmp	r3, #17
 8002c3c:	d002      	beq.n	8002c44 <I2C_ITError+0xd8>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b21      	cmp	r3, #33	; 0x21
 8002c42:	d133      	bne.n	8002cac <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c52:	d107      	bne.n	8002c64 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f859 	bl	8001d20 <HAL_DMA_GetState>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d017      	beq.n	8002ca4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	4a33      	ldr	r2, [pc, #204]	; (8002d48 <I2C_ITError+0x1dc>)
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe ff33 	bl	8001af4 <HAL_DMA_Abort_IT>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d04d      	beq.n	8002d30 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ca2:	e045      	b.n	8002d30 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f851 	bl	8002d4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002caa:	e041      	b.n	8002d30 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d039      	beq.n	8002d28 <I2C_ITError+0x1bc>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b12      	cmp	r3, #18
 8002cb8:	d002      	beq.n	8002cc0 <I2C_ITError+0x154>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b22      	cmp	r3, #34	; 0x22
 8002cbe:	d133      	bne.n	8002d28 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cce:	d107      	bne.n	8002ce0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cde:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff f81b 	bl	8001d20 <HAL_DMA_GetState>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d017      	beq.n	8002d20 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <I2C_ITError+0x1dc>)
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fef5 	bl	8001af4 <HAL_DMA_Abort_IT>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d011      	beq.n	8002d34 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d1e:	e009      	b.n	8002d34 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f813 	bl	8002d4c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d26:	e005      	b.n	8002d34 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f80f 	bl	8002d4c <I2C_TreatErrorCallback>
  }
}
 8002d2e:	e002      	b.n	8002d36 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d30:	bf00      	nop
 8002d32:	e000      	b.n	8002d36 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d34:	bf00      	nop
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	ffff0000 	.word	0xffff0000
 8002d44:	0800244b 	.word	0x0800244b
 8002d48:	08002de3 	.word	0x08002de3

08002d4c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b60      	cmp	r3, #96	; 0x60
 8002d5e:	d10e      	bne.n	8002d7e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fb5d 	bl	8002436 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d7c:	e009      	b.n	8002d92 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fb48 	bl	8002422 <HAL_I2C_ErrorCallback>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d103      	bne.n	8002db8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d007      	beq.n	8002dd6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	619a      	str	r2, [r3, #24]
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff ff9b 	bl	8002d4c <I2C_TreatErrorCallback>
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002e2e:	887b      	ldrh	r3, [r7, #2]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00f      	beq.n	8002e58 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002e3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e4c:	2b28      	cmp	r3, #40	; 0x28
 8002e4e:	d003      	beq.n	8002e58 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002e56:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002e58:	887b      	ldrh	r3, [r7, #2]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00f      	beq.n	8002e82 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002e68:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e76:	2b28      	cmp	r3, #40	; 0x28
 8002e78:	d003      	beq.n	8002e82 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002e80:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002e82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da03      	bge.n	8002e92 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002e92:	887b      	ldrh	r3, [r7, #2]
 8002e94:	2b10      	cmp	r3, #16
 8002e96:	d103      	bne.n	8002ea0 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002e9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d103      	bne.n	8002eae <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f043 0320 	orr.w	r3, r3, #32
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	2b40      	cmp	r3, #64	; 0x40
 8002eb2:	d103      	bne.n	8002ebc <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6819      	ldr	r1, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	400a      	ands	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d138      	bne.n	8002f62 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e032      	b.n	8002f64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2224      	movs	r2, #36	; 0x24
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f2c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b20      	cmp	r3, #32
 8002f84:	d139      	bne.n	8002ffa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e033      	b.n	8002ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	; 0x24
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d141      	bne.n	800309a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800301e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003022:	d131      	bne.n	8003088 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003024:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800302a:	4a46      	ldr	r2, [pc, #280]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003034:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800303c:	4a41      	ldr	r2, [pc, #260]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2232      	movs	r2, #50	; 0x32
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	4a3f      	ldr	r2, [pc, #252]	; (800314c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	0c9b      	lsrs	r3, r3, #18
 8003056:	3301      	adds	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305a:	e002      	b.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	3b01      	subs	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003062:	4b38      	ldr	r3, [pc, #224]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800306e:	d102      	bne.n	8003076 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f2      	bne.n	800305c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003082:	d158      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e057      	b.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003088:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	4a2d      	ldr	r2, [pc, #180]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003098:	e04d      	b.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d141      	bne.n	8003126 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ae:	d131      	bne.n	8003114 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030b0:	4b24      	ldr	r3, [pc, #144]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b6:	4a23      	ldr	r2, [pc, #140]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c0:	4b20      	ldr	r3, [pc, #128]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2232      	movs	r2, #50	; 0x32
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	4a1c      	ldr	r2, [pc, #112]	; (800314c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	0c9b      	lsrs	r3, r3, #18
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030e6:	e002      	b.n	80030ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ee:	4b15      	ldr	r3, [pc, #84]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fa:	d102      	bne.n	8003102 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f2      	bne.n	80030e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d112      	bne.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e011      	b.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003124:	e007      	b.n	8003136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800312e:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003134:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	40007000 	.word	0x40007000
 8003148:	20000004 	.word	0x20000004
 800314c:	431bde83 	.word	0x431bde83

08003150 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800315a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800315e:	6093      	str	r3, [r2, #8]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	40007000 	.word	0x40007000

08003170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e2fe      	b.n	8003780 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d075      	beq.n	800327a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318e:	4b97      	ldr	r3, [pc, #604]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003198:	4b94      	ldr	r3, [pc, #592]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_OscConfig+0x3e>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d002      	beq.n	80031b4 <HAL_RCC_OscConfig+0x44>
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d10b      	bne.n	80031cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	4b8d      	ldr	r3, [pc, #564]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05b      	beq.n	8003278 <HAL_RCC_OscConfig+0x108>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d157      	bne.n	8003278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e2d9      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d106      	bne.n	80031e4 <HAL_RCC_OscConfig+0x74>
 80031d6:	4b85      	ldr	r3, [pc, #532]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a84      	ldr	r2, [pc, #528]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e01d      	b.n	8003220 <HAL_RCC_OscConfig+0xb0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x98>
 80031ee:	4b7f      	ldr	r3, [pc, #508]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a7e      	ldr	r2, [pc, #504]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b7c      	ldr	r3, [pc, #496]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7b      	ldr	r2, [pc, #492]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0xb0>
 8003208:	4b78      	ldr	r3, [pc, #480]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a77      	ldr	r2, [pc, #476]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800320e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b75      	ldr	r3, [pc, #468]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a74      	ldr	r2, [pc, #464]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800321a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fa7e 	bl	8001728 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe fa7a 	bl	8001728 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e29e      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003242:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0xc0>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fa6a 	bl	8001728 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7fe fa66 	bl	8001728 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e28a      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326a:	4b60      	ldr	r3, [pc, #384]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0xe8>
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d075      	beq.n	8003372 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003286:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003290:	4b56      	ldr	r3, [pc, #344]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b0c      	cmp	r3, #12
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_OscConfig+0x136>
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_OscConfig+0x13c>
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d11f      	bne.n	80032ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ac:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_OscConfig+0x154>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e25d      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c4:	4b49      	ldr	r3, [pc, #292]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	4946      	ldr	r1, [pc, #280]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032d8:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <HAL_RCC_OscConfig+0x280>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe f9d7 	bl	8001690 <HAL_InitTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d043      	beq.n	8003370 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e249      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d023      	beq.n	800333c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a3c      	ldr	r2, [pc, #240]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80032fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fe fa12 	bl	8001728 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003308:	f7fe fa0e 	bl	8001728 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e232      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331a:	4b34      	ldr	r3, [pc, #208]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003326:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	061b      	lsls	r3, r3, #24
 8003334:	492d      	ldr	r1, [pc, #180]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
 800333a:	e01a      	b.n	8003372 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003342:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fe f9ee 	bl	8001728 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003350:	f7fe f9ea 	bl	8001728 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e20e      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003362:	4b22      	ldr	r3, [pc, #136]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1e0>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d041      	beq.n	8003402 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d01c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 8003388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003396:	f7fe f9c7 	bl	8001728 <HAL_GetTick>
 800339a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339e:	f7fe f9c3 	bl	8001728 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e1e7      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80033b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0ef      	beq.n	800339e <HAL_RCC_OscConfig+0x22e>
 80033be:	e020      	b.n	8003402 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <HAL_RCC_OscConfig+0x27c>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe f9aa 	bl	8001728 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d6:	e00d      	b.n	80033f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fe f9a6 	bl	8001728 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d906      	bls.n	80033f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1ca      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033f4:	4b8c      	ldr	r3, [pc, #560]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ea      	bne.n	80033d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a6 	beq.w	800355c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003414:	4b84      	ldr	r3, [pc, #528]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_OscConfig+0x2b4>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x2b6>
 8003424:	2300      	movs	r3, #0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00d      	beq.n	8003446 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	4b7f      	ldr	r3, [pc, #508]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	4a7e      	ldr	r2, [pc, #504]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003434:	6593      	str	r3, [r2, #88]	; 0x58
 8003436:	4b7c      	ldr	r3, [pc, #496]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003446:	4b79      	ldr	r3, [pc, #484]	; (800362c <HAL_RCC_OscConfig+0x4bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003452:	4b76      	ldr	r3, [pc, #472]	; (800362c <HAL_RCC_OscConfig+0x4bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a75      	ldr	r2, [pc, #468]	; (800362c <HAL_RCC_OscConfig+0x4bc>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fe f963 	bl	8001728 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe f95f 	bl	8001728 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e183      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003478:	4b6c      	ldr	r3, [pc, #432]	; (800362c <HAL_RCC_OscConfig+0x4bc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d108      	bne.n	800349e <HAL_RCC_OscConfig+0x32e>
 800348c:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349c:	e024      	b.n	80034e8 <HAL_RCC_OscConfig+0x378>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d110      	bne.n	80034c8 <HAL_RCC_OscConfig+0x358>
 80034a6:	4b60      	ldr	r3, [pc, #384]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	4a5e      	ldr	r2, [pc, #376]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b6:	4b5c      	ldr	r3, [pc, #368]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	4a5a      	ldr	r2, [pc, #360]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x378>
 80034c8:	4b57      	ldr	r3, [pc, #348]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	4a56      	ldr	r2, [pc, #344]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d8:	4b53      	ldr	r3, [pc, #332]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe f91a 	bl	8001728 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe f916 	bl	8001728 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e138      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350e:	4b46      	ldr	r3, [pc, #280]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ed      	beq.n	80034f8 <HAL_RCC_OscConfig+0x388>
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe f903 	bl	8001728 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe f8ff 	bl	8001728 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e121      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800353c:	4b3a      	ldr	r3, [pc, #232]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ed      	bne.n	8003526 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800354a:	7ffb      	ldrb	r3, [r7, #31]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	4a34      	ldr	r2, [pc, #208]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d03c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01c      	beq.n	80035aa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003576:	4a2c      	ldr	r2, [pc, #176]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fe f8d2 	bl	8001728 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003588:	f7fe f8ce 	bl	8001728 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e0f2      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800359a:	4b23      	ldr	r3, [pc, #140]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 800359c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <HAL_RCC_OscConfig+0x418>
 80035a8:	e01b      	b.n	80035e2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035aa:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80035ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b0:	4a1d      	ldr	r2, [pc, #116]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe f8b5 	bl	8001728 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c2:	f7fe f8b1 	bl	8001728 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0d5      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d4:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80035d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ef      	bne.n	80035c2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80c9 	beq.w	800377e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ec:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	f000 8083 	beq.w	8003700 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d15e      	bne.n	80036c0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a08      	ldr	r2, [pc, #32]	; (8003628 <HAL_RCC_OscConfig+0x4b8>)
 8003608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800360c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fe f88b 	bl	8001728 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003614:	e00c      	b.n	8003630 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fe f887 	bl	8001728 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d905      	bls.n	8003630 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e0ab      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003630:	4b55      	ldr	r3, [pc, #340]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ec      	bne.n	8003616 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800363c:	4b52      	ldr	r3, [pc, #328]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	4b52      	ldr	r3, [pc, #328]	; (800378c <HAL_RCC_OscConfig+0x61c>)
 8003642:	4013      	ands	r3, r2
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6a11      	ldr	r1, [r2, #32]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800364c:	3a01      	subs	r2, #1
 800364e:	0112      	lsls	r2, r2, #4
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003656:	0212      	lsls	r2, r2, #8
 8003658:	4311      	orrs	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800365e:	0852      	lsrs	r2, r2, #1
 8003660:	3a01      	subs	r2, #1
 8003662:	0552      	lsls	r2, r2, #21
 8003664:	4311      	orrs	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800366a:	0852      	lsrs	r2, r2, #1
 800366c:	3a01      	subs	r2, #1
 800366e:	0652      	lsls	r2, r2, #25
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003676:	06d2      	lsls	r2, r2, #27
 8003678:	430a      	orrs	r2, r1
 800367a:	4943      	ldr	r1, [pc, #268]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 800367c:	4313      	orrs	r3, r2
 800367e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a40      	ldr	r2, [pc, #256]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 8003686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800368c:	4b3e      	ldr	r3, [pc, #248]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 8003692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003696:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fe f846 	bl	8001728 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe f842 	bl	8001728 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e066      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b2:	4b35      	ldr	r3, [pc, #212]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x530>
 80036be:	e05e      	b.n	800377e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b31      	ldr	r3, [pc, #196]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a30      	ldr	r2, [pc, #192]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 80036c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe f82c 	bl	8001728 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fe f828 	bl	8001728 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e04c      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036f2:	4b25      	ldr	r3, [pc, #148]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	4924      	ldr	r1, [pc, #144]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <HAL_RCC_OscConfig+0x620>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	60cb      	str	r3, [r1, #12]
 80036fe:	e03e      	b.n	800377e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e039      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_RCC_OscConfig+0x618>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f003 0203 	and.w	r2, r3, #3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	429a      	cmp	r2, r3
 800371e:	d12c      	bne.n	800377a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	3b01      	subs	r3, #1
 800372c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d123      	bne.n	800377a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d11b      	bne.n	800377a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d113      	bne.n	800377a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	085b      	lsrs	r3, r3, #1
 800375e:	3b01      	subs	r3, #1
 8003760:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d109      	bne.n	800377a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	3b01      	subs	r3, #1
 8003774:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d001      	beq.n	800377e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	019f800c 	.word	0x019f800c
 8003790:	feeefffc 	.word	0xfeeefffc

08003794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e11e      	b.n	80039ea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b91      	ldr	r3, [pc, #580]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d910      	bls.n	80037dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b8e      	ldr	r3, [pc, #568]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 020f 	bic.w	r2, r3, #15
 80037c2:	498c      	ldr	r1, [pc, #560]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e106      	b.n	80039ea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d073      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d129      	bne.n	8003844 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037f0:	4b81      	ldr	r3, [pc, #516]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0f4      	b.n	80039ea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003800:	f000 f99e 	bl	8003b40 <RCC_GetSysClockFreqFromPLLSource>
 8003804:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	4a7c      	ldr	r2, [pc, #496]	; (80039fc <HAL_RCC_ClockConfig+0x268>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d93f      	bls.n	800388e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800380e:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d009      	beq.n	800382e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003822:	2b00      	cmp	r3, #0
 8003824:	d033      	beq.n	800388e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800382a:	2b00      	cmp	r3, #0
 800382c:	d12f      	bne.n	800388e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800382e:	4b72      	ldr	r3, [pc, #456]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003836:	4a70      	ldr	r2, [pc, #448]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e024      	b.n	800388e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384c:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d109      	bne.n	800386c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0c6      	b.n	80039ea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800385c:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0be      	b.n	80039ea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800386c:	f000 f8ce 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8003870:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4a61      	ldr	r2, [pc, #388]	; (80039fc <HAL_RCC_ClockConfig+0x268>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d909      	bls.n	800388e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800387a:	4b5f      	ldr	r3, [pc, #380]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003882:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800388e:	4b5a      	ldr	r3, [pc, #360]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 0203 	bic.w	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4957      	ldr	r1, [pc, #348]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800389c:	4313      	orrs	r3, r2
 800389e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fd ff42 	bl	8001728 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fd ff3e 	bl	8001728 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e095      	b.n	80039ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 020c 	and.w	r2, r3, #12
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d1eb      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d023      	beq.n	8003924 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e8:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a42      	ldr	r2, [pc, #264]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 80038ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038f2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003900:	4b3d      	ldr	r3, [pc, #244]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003908:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800390a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800390e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4936      	ldr	r1, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
 8003922:	e008      	b.n	8003936 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d105      	bne.n	8003936 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800392a:	4b33      	ldr	r3, [pc, #204]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 8003930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003934:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d21d      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003944:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 020f 	bic.w	r2, r3, #15
 800394c:	4929      	ldr	r1, [pc, #164]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003954:	f7fd fee8 	bl	8001728 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fd fee4 	bl	8001728 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e03b      	b.n	80039ea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_ClockConfig+0x260>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d1ed      	bne.n	800395c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4917      	ldr	r1, [pc, #92]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490f      	ldr	r1, [pc, #60]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039be:	f000 f825 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCC_ClockConfig+0x264>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490c      	ldr	r1, [pc, #48]	; (8003a00 <HAL_RCC_ClockConfig+0x26c>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <HAL_RCC_ClockConfig+0x270>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_RCC_ClockConfig+0x274>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fd fe54 	bl	8001690 <HAL_InitTick>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	04c4b400 	.word	0x04c4b400
 8003a00:	08006d8c 	.word	0x08006d8c
 8003a04:	20000004 	.word	0x20000004
 8003a08:	20000008 	.word	0x20000008

08003a0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d102      	bne.n	8003a24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e047      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030c 	and.w	r3, r3, #12
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d102      	bne.n	8003a36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a30:	4b26      	ldr	r3, [pc, #152]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e03e      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d136      	bne.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0303 	and.w	r3, r3, #3
 8003a4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3301      	adds	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a60:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6a:	68d2      	ldr	r2, [r2, #12]
 8003a6c:	0a12      	lsrs	r2, r2, #8
 8003a6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a72:	fb02 f303 	mul.w	r3, r2, r3
 8003a76:	617b      	str	r3, [r7, #20]
      break;
 8003a78:	e00c      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a82:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a84:	68d2      	ldr	r2, [r2, #12]
 8003a86:	0a12      	lsrs	r2, r2, #8
 8003a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
      break;
 8003a92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	0e5b      	lsrs	r3, r3, #25
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	e001      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ab4:	693b      	ldr	r3, [r7, #16]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	00f42400 	.word	0x00f42400
 8003acc:	016e3600 	.word	0x016e3600

08003ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	; (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000004 	.word	0x20000004

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4904      	ldr	r1, [pc, #16]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	08006d9c 	.word	0x08006d9c

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b18:	f7ff ffda 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	0adb      	lsrs	r3, r3, #11
 8003b24:	f003 0307 	and.w	r3, r3, #7
 8003b28:	4904      	ldr	r1, [pc, #16]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b2a:	5ccb      	ldrb	r3, [r1, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	08006d9c 	.word	0x08006d9c

08003b40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	091b      	lsrs	r3, r3, #4
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d10c      	bne.n	8003b7e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b64:	4a17      	ldr	r2, [pc, #92]	; (8003bc4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	4a14      	ldr	r2, [pc, #80]	; (8003bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b6e:	68d2      	ldr	r2, [r2, #12]
 8003b70:	0a12      	lsrs	r2, r2, #8
 8003b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	617b      	str	r3, [r7, #20]
    break;
 8003b7c:	e00c      	b.n	8003b98 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	4a0e      	ldr	r2, [pc, #56]	; (8003bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b88:	68d2      	ldr	r2, [r2, #12]
 8003b8a:	0a12      	lsrs	r2, r2, #8
 8003b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
    break;
 8003b96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	0e5b      	lsrs	r3, r3, #25
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bb2:	687b      	ldr	r3, [r7, #4]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	371c      	adds	r7, #28
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	016e3600 	.word	0x016e3600
 8003bc8:	00f42400 	.word	0x00f42400

08003bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bd8:	2300      	movs	r3, #0
 8003bda:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8098 	beq.w	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bee:	4b43      	ldr	r3, [pc, #268]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	4b40      	ldr	r3, [pc, #256]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfe:	4a3f      	ldr	r2, [pc, #252]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6593      	str	r3, [r2, #88]	; 0x58
 8003c06:	4b3d      	ldr	r3, [pc, #244]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c16:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a39      	ldr	r2, [pc, #228]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c20:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c22:	f7fd fd81 	bl	8001728 <HAL_GetTick>
 8003c26:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c28:	e009      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2a:	f7fd fd7d 	bl	8001728 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d902      	bls.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	74fb      	strb	r3, [r7, #19]
        break;
 8003c3c:	e005      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c3e:	4b30      	ldr	r3, [pc, #192]	; (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ef      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d159      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c50:	4b2a      	ldr	r3, [pc, #168]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01e      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d019      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c6c:	4b23      	ldr	r3, [pc, #140]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c78:	4b20      	ldr	r3, [pc, #128]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	4a1f      	ldr	r2, [pc, #124]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c88:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003caa:	f7fd fd3d 	bl	8001728 <HAL_GetTick>
 8003cae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb0:	e00b      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb2:	f7fd fd39 	bl	8001728 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d902      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cca:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0ec      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cde:	4b07      	ldr	r3, [pc, #28]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cf4:	e008      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	74bb      	strb	r3, [r7, #18]
 8003cfa:	e005      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	7cfb      	ldrb	r3, [r7, #19]
 8003d06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d08:	7c7b      	ldrb	r3, [r7, #17]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d105      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d0e:	4ba7      	ldr	r3, [pc, #668]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	4aa6      	ldr	r2, [pc, #664]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d26:	4ba1      	ldr	r3, [pc, #644]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f023 0203 	bic.w	r2, r3, #3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	499d      	ldr	r1, [pc, #628]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d48:	4b98      	ldr	r3, [pc, #608]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 020c 	bic.w	r2, r3, #12
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	4995      	ldr	r1, [pc, #596]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d6a:	4b90      	ldr	r3, [pc, #576]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	498c      	ldr	r1, [pc, #560]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d8c:	4b87      	ldr	r3, [pc, #540]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	4984      	ldr	r1, [pc, #528]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0310 	and.w	r3, r3, #16
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003dae:	4b7f      	ldr	r3, [pc, #508]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	497b      	ldr	r1, [pc, #492]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd0:	4b76      	ldr	r3, [pc, #472]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	4973      	ldr	r1, [pc, #460]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df2:	4b6e      	ldr	r3, [pc, #440]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	496a      	ldr	r1, [pc, #424]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e14:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4962      	ldr	r1, [pc, #392]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e36:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	4959      	ldr	r1, [pc, #356]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e58:	4b54      	ldr	r3, [pc, #336]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e5e:	f023 0203 	bic.w	r2, r3, #3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	4951      	ldr	r1, [pc, #324]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e7a:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	4948      	ldr	r1, [pc, #288]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e9c:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	4940      	ldr	r1, [pc, #256]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	4a3a      	ldr	r2, [pc, #232]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ec6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d015      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ed4:	4b35      	ldr	r3, [pc, #212]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee2:	4932      	ldr	r1, [pc, #200]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef4:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4a2c      	ldr	r2, [pc, #176]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003efe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d015      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	4924      	ldr	r1, [pc, #144]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d015      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f52:	4916      	ldr	r1, [pc, #88]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f62:	d105      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a10      	ldr	r2, [pc, #64]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d019      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4908      	ldr	r1, [pc, #32]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f9a:	d109      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4a02      	ldr	r2, [pc, #8]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa6:	60d3      	str	r3, [r2, #12]
 8003fa8:	e002      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fbc:	4b29      	ldr	r3, [pc, #164]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	4926      	ldr	r1, [pc, #152]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fdc:	4b21      	ldr	r3, [pc, #132]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004002:	4918      	ldr	r1, [pc, #96]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d105      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a12      	ldr	r2, [pc, #72]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800401a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d015      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800402c:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800402e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	490a      	ldr	r1, [pc, #40]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800404a:	d105      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800404c:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	4a04      	ldr	r2, [pc, #16]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004052:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004056:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004058:	7cbb      	ldrb	r3, [r7, #18]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000

08004068 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e09d      	b.n	80041b6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	d108      	bne.n	8004094 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800408a:	d009      	beq.n	80040a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	61da      	str	r2, [r3, #28]
 8004092:	e005      	b.n	80040a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd f98e 	bl	80013dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e0:	d902      	bls.n	80040e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e002      	b.n	80040ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040f6:	d007      	beq.n	8004108 <HAL_SPI_Init+0xa0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004100:	d002      	beq.n	8004108 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414a:	ea42 0103 	orr.w	r1, r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	0c1b      	lsrs	r3, r3, #16
 8004164:	f003 0204 	and.w	r2, r3, #4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004184:	ea42 0103 	orr.w	r1, r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041d8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041e0:	7dbb      	ldrb	r3, [r7, #22]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d00d      	beq.n	8004202 <HAL_SPI_TransmitReceive_IT+0x42>
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ec:	d106      	bne.n	80041fc <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d102      	bne.n	80041fc <HAL_SPI_TransmitReceive_IT+0x3c>
 80041f6:	7dbb      	ldrb	r3, [r7, #22]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
 80041fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004200:	e07d      	b.n	80042fe <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_SPI_TransmitReceive_IT+0x54>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_SPI_TransmitReceive_IT+0x54>
 800420e:	887b      	ldrh	r3, [r7, #2]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004218:	e071      	b.n	80042fe <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004220:	2b01      	cmp	r3, #1
 8004222:	d101      	bne.n	8004228 <HAL_SPI_TransmitReceive_IT+0x68>
 8004224:	2302      	movs	r3, #2
 8004226:	e06b      	b.n	8004300 <HAL_SPI_TransmitReceive_IT+0x140>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b04      	cmp	r3, #4
 800423a:	d003      	beq.n	8004244 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2205      	movs	r2, #5
 8004240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	887a      	ldrh	r2, [r7, #2]
 8004266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	887a      	ldrh	r2, [r7, #2]
 800426e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800427a:	d906      	bls.n	800428a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4a23      	ldr	r2, [pc, #140]	; (800430c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8004280:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004286:	651a      	str	r2, [r3, #80]	; 0x50
 8004288:	e005      	b.n	8004296 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a21      	ldr	r2, [pc, #132]	; (8004314 <HAL_SPI_TransmitReceive_IT+0x154>)
 800428e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a21      	ldr	r2, [pc, #132]	; (8004318 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004294:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800429e:	d802      	bhi.n	80042a6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d908      	bls.n	80042b8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e007      	b.n	80042c8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042c6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d007      	beq.n	80042e6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80042fc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80042fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004300:	4618      	mov	r0, r3
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	080046a7 	.word	0x080046a7
 8004310:	0800470d 	.word	0x0800470d
 8004314:	08004557 	.word	0x08004557
 8004318:	08004615 	.word	0x08004615

0800431c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10e      	bne.n	800435c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004344:	2b00      	cmp	r3, #0
 8004346:	d009      	beq.n	800435c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	4798      	blx	r3
    return;
 800435a:	e0ce      	b.n	80044fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_SPI_IRQHandler+0x5e>
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
    return;
 8004378:	e0bf      	b.n	80044fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <HAL_SPI_IRQHandler+0x7e>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d105      	bne.n	800439a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80b0 	beq.w	80044fa <HAL_SPI_IRQHandler+0x1de>
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f003 0320 	and.w	r3, r3, #32
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80aa 	beq.w	80044fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d023      	beq.n	80043f8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d011      	beq.n	80043e0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	e00b      	b.n	80043f8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	613b      	str	r3, [r7, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	693b      	ldr	r3, [r7, #16]
        return;
 80043f6:	e080      	b.n	80044fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d014      	beq.n	800442c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004406:	f043 0201 	orr.w	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	f043 0208 	orr.w	r2, r3, #8
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004454:	2b00      	cmp	r3, #0
 8004456:	d04f      	beq.n	80044f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004466:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_SPI_IRQHandler+0x168>
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d034      	beq.n	80044ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0203 	bic.w	r2, r2, #3
 8004492:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	2b00      	cmp	r3, #0
 800449a:	d011      	beq.n	80044c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	4a17      	ldr	r2, [pc, #92]	; (8004500 <HAL_SPI_IRQHandler+0x1e4>)
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fd fb23 	bl	8001af4 <HAL_DMA_Abort_IT>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_SPI_IRQHandler+0x1e4>)
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7fd fb0d 	bl	8001af4 <HAL_DMA_Abort_IT>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80044ec:	e003      	b.n	80044f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f812 	bl	8004518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80044f4:	e000      	b.n	80044f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80044f6:	bf00      	nop
    return;
 80044f8:	bf00      	nop
  }
}
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	0800452d 	.word	0x0800452d

08004504 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff ffe5 	bl	8004518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d923      	bls.n	80045b2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	b292      	uxth	r2, r2
 8004576:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b02      	subs	r3, #2
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d11f      	bne.n	80045e0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	e016      	b.n	80045e0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f103 020c 	add.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	7812      	ldrb	r2, [r2, #0]
 80045c0:	b2d2      	uxtb	r2, r2
 80045c2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10f      	bne.n	800460c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fa14 	bl	8004a34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d912      	bls.n	800464c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b02      	subs	r3, #2
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	87da      	strh	r2, [r3, #62]	; 0x3e
 800464a:	e012      	b.n	8004672 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	d110      	bne.n	800469e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800468a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9cb 	bl	8004a34 <SPI_CloseRxTx_ISR>
    }
  }
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b8:	b292      	uxth	r2, r2
 80046ba:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	1c9a      	adds	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10f      	bne.n	8004704 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f998 	bl	8004a34 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	1c9a      	adds	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d110      	bne.n	8004764 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004750:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f968 	bl	8004a34 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004764:	bf00      	nop
 8004766:	3708      	adds	r7, #8
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800477c:	f7fc ffd4 	bl	8001728 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	4413      	add	r3, r2
 800478a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800478c:	f7fc ffcc 	bl	8001728 <HAL_GetTick>
 8004790:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004792:	4b39      	ldr	r3, [pc, #228]	; (8004878 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	015b      	lsls	r3, r3, #5
 8004798:	0d1b      	lsrs	r3, r3, #20
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	fb02 f303 	mul.w	r3, r2, r3
 80047a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a2:	e054      	b.n	800484e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d050      	beq.n	800484e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047ac:	f7fc ffbc 	bl	8001728 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d902      	bls.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d13d      	bne.n	800483e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047da:	d111      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e4:	d004      	beq.n	80047f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ee:	d107      	bne.n	8004800 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004808:	d10f      	bne.n	800482a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004828:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e017      	b.n	800486e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3b01      	subs	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4013      	ands	r3, r2
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	429a      	cmp	r2, r3
 800485c:	bf0c      	ite	eq
 800485e:	2301      	moveq	r3, #1
 8004860:	2300      	movne	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	429a      	cmp	r2, r3
 800486a:	d19b      	bne.n	80047a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3720      	adds	r7, #32
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000004 	.word	0x20000004

0800487c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	; 0x28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800488e:	f7fc ff4b 	bl	8001728 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	4413      	add	r3, r2
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800489e:	f7fc ff43 	bl	8001728 <HAL_GetTick>
 80048a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80048ac:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00da      	lsls	r2, r3, #3
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	0d1b      	lsrs	r3, r3, #20
 80048bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80048c4:	e060      	b.n	8004988 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80048cc:	d107      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x62>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d050      	beq.n	8004988 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048e6:	f7fc ff1f 	bl	8001728 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d902      	bls.n	80048fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d13d      	bne.n	8004978 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800490a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004914:	d111      	bne.n	800493a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800491e:	d004      	beq.n	800492a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004928:	d107      	bne.n	800493a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004938:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004942:	d10f      	bne.n	8004964 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004962:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e010      	b.n	800499a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	3b01      	subs	r3, #1
 8004986:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4013      	ands	r3, r2
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d196      	bne.n	80048c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3728      	adds	r7, #40	; 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000004 	.word	0x20000004

080049a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff ff5b 	bl	800487c <SPI_WaitFifoStateUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e027      	b.n	8004a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fec0 	bl	800476c <SPI_WaitFlagStateUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	f043 0220 	orr.w	r2, r3, #32
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e014      	b.n	8004a2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff ff34 	bl	800487c <SPI_WaitFifoStateUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e000      	b.n	8004a2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a3c:	f7fc fe74 	bl	8001728 <HAL_GetTick>
 8004a40:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0220 	bic.w	r2, r2, #32
 8004a50:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	2164      	movs	r1, #100	; 0x64
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ffa6 	bl	80049a8 <SPI_EndRxTxTransaction>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	f043 0220 	orr.w	r2, r3, #32
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d115      	bne.n	8004aa2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d107      	bne.n	8004a92 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fd3a 	bl	8004504 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004a90:	e00e      	b.n	8004ab0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc fb2a 	bl	80010f4 <HAL_SPI_TxRxCpltCallback>
}
 8004aa0:	e006      	b.n	8004ab0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fd34 	bl	8004518 <HAL_SPI_ErrorCallback>
}
 8004ab0:	bf00      	nop
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e049      	b.n	8004b5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7fc fcc8 	bl	8001474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3304      	adds	r3, #4
 8004af4:	4619      	mov	r1, r3
 8004af6:	4610      	mov	r0, r2
 8004af8:	f000 f9bc 	bl	8004e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d001      	beq.n	8004b80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e04c      	b.n	8004c1a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <HAL_TIM_Base_Start+0xc0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d022      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d01d      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <HAL_TIM_Base_Start+0xc4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d018      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <HAL_TIM_Base_Start+0xc8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d013      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_TIM_Base_Start+0xcc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <HAL_TIM_Base_Start+0xd0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d009      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1c      	ldr	r2, [pc, #112]	; (8004c3c <HAL_TIM_Base_Start+0xd4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x70>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a1b      	ldr	r2, [pc, #108]	; (8004c40 <HAL_TIM_Base_Start+0xd8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d115      	bne.n	8004c04 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <HAL_TIM_Base_Start+0xdc>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b06      	cmp	r3, #6
 8004be8:	d015      	beq.n	8004c16 <HAL_TIM_Base_Start+0xae>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d011      	beq.n	8004c16 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0201 	orr.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c02:	e008      	b.n	8004c16 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40000800 	.word	0x40000800
 8004c34:	40000c00 	.word	0x40000c00
 8004c38:	40013400 	.word	0x40013400
 8004c3c:	40014000 	.word	0x40014000
 8004c40:	40015000 	.word	0x40015000
 8004c44:	00010007 	.word	0x00010007

08004c48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c52:	2300      	movs	r3, #0
 8004c54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_TIM_ConfigClockSource+0x1c>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e0f6      	b.n	8004e52 <HAL_TIM_ConfigClockSource+0x20a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a6f      	ldr	r2, [pc, #444]	; (8004e5c <HAL_TIM_ConfigClockSource+0x214>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	f000 80c1 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004ca4:	4a6d      	ldr	r2, [pc, #436]	; (8004e5c <HAL_TIM_ConfigClockSource+0x214>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	f200 80c6 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cac:	4a6c      	ldr	r2, [pc, #432]	; (8004e60 <HAL_TIM_ConfigClockSource+0x218>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	f000 80b9 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004cb4:	4a6a      	ldr	r2, [pc, #424]	; (8004e60 <HAL_TIM_ConfigClockSource+0x218>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	f200 80be 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cbc:	4a69      	ldr	r2, [pc, #420]	; (8004e64 <HAL_TIM_ConfigClockSource+0x21c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	f000 80b1 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004cc4:	4a67      	ldr	r2, [pc, #412]	; (8004e64 <HAL_TIM_ConfigClockSource+0x21c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	f200 80b6 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ccc:	4a66      	ldr	r2, [pc, #408]	; (8004e68 <HAL_TIM_ConfigClockSource+0x220>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	f000 80a9 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004cd4:	4a64      	ldr	r2, [pc, #400]	; (8004e68 <HAL_TIM_ConfigClockSource+0x220>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	f200 80ae 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cdc:	4a63      	ldr	r2, [pc, #396]	; (8004e6c <HAL_TIM_ConfigClockSource+0x224>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	f000 80a1 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004ce4:	4a61      	ldr	r2, [pc, #388]	; (8004e6c <HAL_TIM_ConfigClockSource+0x224>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	f200 80a6 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cec:	4a60      	ldr	r2, [pc, #384]	; (8004e70 <HAL_TIM_ConfigClockSource+0x228>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	f000 8099 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004cf4:	4a5e      	ldr	r2, [pc, #376]	; (8004e70 <HAL_TIM_ConfigClockSource+0x228>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	f200 809e 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d00:	f000 8091 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004d04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004d08:	f200 8096 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d10:	f000 8089 	beq.w	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d18:	f200 808e 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d20:	d03e      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0x158>
 8004d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d26:	f200 8087 	bhi.w	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2e:	f000 8086 	beq.w	8004e3e <HAL_TIM_ConfigClockSource+0x1f6>
 8004d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d36:	d87f      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d38:	2b70      	cmp	r3, #112	; 0x70
 8004d3a:	d01a      	beq.n	8004d72 <HAL_TIM_ConfigClockSource+0x12a>
 8004d3c:	2b70      	cmp	r3, #112	; 0x70
 8004d3e:	d87b      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d40:	2b60      	cmp	r3, #96	; 0x60
 8004d42:	d050      	beq.n	8004de6 <HAL_TIM_ConfigClockSource+0x19e>
 8004d44:	2b60      	cmp	r3, #96	; 0x60
 8004d46:	d877      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d48:	2b50      	cmp	r3, #80	; 0x50
 8004d4a:	d03c      	beq.n	8004dc6 <HAL_TIM_ConfigClockSource+0x17e>
 8004d4c:	2b50      	cmp	r3, #80	; 0x50
 8004d4e:	d873      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d058      	beq.n	8004e06 <HAL_TIM_ConfigClockSource+0x1be>
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d86f      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d58:	2b30      	cmp	r3, #48	; 0x30
 8004d5a:	d064      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004d5c:	2b30      	cmp	r3, #48	; 0x30
 8004d5e:	d86b      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d60:	2b20      	cmp	r3, #32
 8004d62:	d060      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d867      	bhi.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d05c      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d05a      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0x1de>
 8004d70:	e062      	b.n	8004e38 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d82:	f000 f9a7 	bl	80050d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68ba      	ldr	r2, [r7, #8]
 8004d9c:	609a      	str	r2, [r3, #8]
      break;
 8004d9e:	e04f      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004db0:	f000 f990 	bl	80050d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dc2:	609a      	str	r2, [r3, #8]
      break;
 8004dc4:	e03c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f000 f902 	bl	8004fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2150      	movs	r1, #80	; 0x50
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f95b 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004de4:	e02c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004df2:	461a      	mov	r2, r3
 8004df4:	f000 f921 	bl	800503a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2160      	movs	r1, #96	; 0x60
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f94b 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004e04:	e01c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e12:	461a      	mov	r2, r3
 8004e14:	f000 f8e2 	bl	8004fdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f93b 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004e24:	e00c      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f000 f932 	bl	800509a <TIM_ITRx_SetConfig>
      break;
 8004e36:	e003      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3c:	e000      	b.n	8004e40 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	00100070 	.word	0x00100070
 8004e60:	00100060 	.word	0x00100060
 8004e64:	00100050 	.word	0x00100050
 8004e68:	00100040 	.word	0x00100040
 8004e6c:	00100030 	.word	0x00100030
 8004e70:	00100020 	.word	0x00100020

08004e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a4c      	ldr	r2, [pc, #304]	; (8004fb8 <TIM_Base_SetConfig+0x144>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d017      	beq.n	8004ebc <TIM_Base_SetConfig+0x48>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d013      	beq.n	8004ebc <TIM_Base_SetConfig+0x48>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a49      	ldr	r2, [pc, #292]	; (8004fbc <TIM_Base_SetConfig+0x148>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00f      	beq.n	8004ebc <TIM_Base_SetConfig+0x48>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a48      	ldr	r2, [pc, #288]	; (8004fc0 <TIM_Base_SetConfig+0x14c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <TIM_Base_SetConfig+0x48>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a47      	ldr	r2, [pc, #284]	; (8004fc4 <TIM_Base_SetConfig+0x150>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d007      	beq.n	8004ebc <TIM_Base_SetConfig+0x48>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a46      	ldr	r2, [pc, #280]	; (8004fc8 <TIM_Base_SetConfig+0x154>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d003      	beq.n	8004ebc <TIM_Base_SetConfig+0x48>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a45      	ldr	r2, [pc, #276]	; (8004fcc <TIM_Base_SetConfig+0x158>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d108      	bne.n	8004ece <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a39      	ldr	r2, [pc, #228]	; (8004fb8 <TIM_Base_SetConfig+0x144>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d023      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004edc:	d01f      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a36      	ldr	r2, [pc, #216]	; (8004fbc <TIM_Base_SetConfig+0x148>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d01b      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a35      	ldr	r2, [pc, #212]	; (8004fc0 <TIM_Base_SetConfig+0x14c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d017      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <TIM_Base_SetConfig+0x150>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a33      	ldr	r2, [pc, #204]	; (8004fc8 <TIM_Base_SetConfig+0x154>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d00f      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a33      	ldr	r2, [pc, #204]	; (8004fd0 <TIM_Base_SetConfig+0x15c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00b      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a32      	ldr	r2, [pc, #200]	; (8004fd4 <TIM_Base_SetConfig+0x160>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a31      	ldr	r2, [pc, #196]	; (8004fd8 <TIM_Base_SetConfig+0x164>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d003      	beq.n	8004f1e <TIM_Base_SetConfig+0xaa>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2c      	ldr	r2, [pc, #176]	; (8004fcc <TIM_Base_SetConfig+0x158>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <TIM_Base_SetConfig+0x144>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_Base_SetConfig+0x110>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1a      	ldr	r2, [pc, #104]	; (8004fc8 <TIM_Base_SetConfig+0x154>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x110>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a1a      	ldr	r2, [pc, #104]	; (8004fd0 <TIM_Base_SetConfig+0x15c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x110>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a19      	ldr	r2, [pc, #100]	; (8004fd4 <TIM_Base_SetConfig+0x160>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x110>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a18      	ldr	r2, [pc, #96]	; (8004fd8 <TIM_Base_SetConfig+0x164>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x110>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <TIM_Base_SetConfig+0x158>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d103      	bne.n	8004f8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d105      	bne.n	8004faa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f023 0201 	bic.w	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	611a      	str	r2, [r3, #16]
  }
}
 8004faa:	bf00      	nop
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400
 8004fc0:	40000800 	.word	0x40000800
 8004fc4:	40000c00 	.word	0x40000c00
 8004fc8:	40013400 	.word	0x40013400
 8004fcc:	40015000 	.word	0x40015000
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f023 030a 	bic.w	r3, r3, #10
 8005018:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800503a:	b480      	push	{r7}
 800503c:	b087      	sub	sp, #28
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f023 0210 	bic.w	r2, r3, #16
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	031b      	lsls	r3, r3, #12
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005076:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	621a      	str	r2, [r3, #32]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80050b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f043 0307 	orr.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	021a      	lsls	r2, r3, #8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d101      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005128:	2302      	movs	r3, #2
 800512a:	e074      	b.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a34      	ldr	r2, [pc, #208]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a33      	ldr	r2, [pc, #204]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a31      	ldr	r2, [pc, #196]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d108      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005170:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a21      	ldr	r2, [pc, #132]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ac:	d01d      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1f      	ldr	r2, [pc, #124]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1c      	ldr	r2, [pc, #112]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a11      	ldr	r2, [pc, #68]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10c      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40013400 	.word	0x40013400
 800522c:	40015000 	.word	0x40015000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40014000 	.word	0x40014000

08005240 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e042      	b.n	80052d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005258:	2b00      	cmp	r3, #0
 800525a:	d106      	bne.n	800526a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fc f861 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2224      	movs	r2, #36	; 0x24
 800526e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0201 	bic.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fc7a 	bl	8005b84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f97b 	bl	800558c <UART_SetConfig>
 8005296:	4603      	mov	r3, r0
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e01b      	b.n	80052d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 fcf9 	bl	8005cc8 <UART_CheckIdleState>
 80052d6:	4603      	mov	r3, r0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d17b      	bne.n	80053f2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_UART_Transmit+0x26>
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e074      	b.n	80053f4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2221      	movs	r2, #33	; 0x21
 8005316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fc fa05 	bl	8001728 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x6c>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005354:	e030      	b.n	80053b8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fd5b 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2220      	movs	r2, #32
 8005370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e03d      	b.n	80053f4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800538c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	3302      	adds	r3, #2
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e007      	b.n	80053a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1c8      	bne.n	8005356 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	2200      	movs	r2, #0
 80053cc:	2140      	movs	r1, #64	; 0x40
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 fd24 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2220      	movs	r2, #32
 80053de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e006      	b.n	80053f4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	4613      	mov	r3, r2
 800540a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005412:	2b20      	cmp	r3, #32
 8005414:	f040 80b5 	bne.w	8005582 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_UART_Receive+0x28>
 800541e:	88fb      	ldrh	r3, [r7, #6]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e0ad      	b.n	8005584 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2222      	movs	r2, #34	; 0x22
 8005434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543e:	f7fc f973 	bl	8001728 <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	88fa      	ldrh	r2, [r7, #6]
 8005448:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545c:	d10e      	bne.n	800547c <HAL_UART_Receive+0x80>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d105      	bne.n	8005472 <HAL_UART_Receive+0x76>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f240 12ff 	movw	r2, #511	; 0x1ff
 800546c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005470:	e02d      	b.n	80054ce <HAL_UART_Receive+0xd2>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	22ff      	movs	r2, #255	; 0xff
 8005476:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800547a:	e028      	b.n	80054ce <HAL_UART_Receive+0xd2>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10d      	bne.n	80054a0 <HAL_UART_Receive+0xa4>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <HAL_UART_Receive+0x9a>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	22ff      	movs	r2, #255	; 0xff
 8005490:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005494:	e01b      	b.n	80054ce <HAL_UART_Receive+0xd2>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	227f      	movs	r2, #127	; 0x7f
 800549a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800549e:	e016      	b.n	80054ce <HAL_UART_Receive+0xd2>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054a8:	d10d      	bne.n	80054c6 <HAL_UART_Receive+0xca>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <HAL_UART_Receive+0xc0>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	227f      	movs	r2, #127	; 0x7f
 80054b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054ba:	e008      	b.n	80054ce <HAL_UART_Receive+0xd2>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	223f      	movs	r2, #63	; 0x3f
 80054c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054c4:	e003      	b.n	80054ce <HAL_UART_Receive+0xd2>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80054d4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054de:	d108      	bne.n	80054f2 <HAL_UART_Receive+0xf6>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	e003      	b.n	80054fa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80054fa:	e036      	b.n	800556a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2200      	movs	r2, #0
 8005504:	2120      	movs	r1, #32
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fc88 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e032      	b.n	8005584 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10c      	bne.n	800553e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	b29a      	uxth	r2, r3
 800552c:	8a7b      	ldrh	r3, [r7, #18]
 800552e:	4013      	ands	r3, r2
 8005530:	b29a      	uxth	r2, r3
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	3302      	adds	r3, #2
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e00c      	b.n	8005558 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	b2da      	uxtb	r2, r3
 8005546:	8a7b      	ldrh	r3, [r7, #18]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	4013      	ands	r3, r2
 800554c:	b2da      	uxtb	r2, r3
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3301      	adds	r3, #1
 8005556:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b01      	subs	r3, #1
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1c2      	bne.n	80054fc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
  }
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005590:	b08c      	sub	sp, #48	; 0x30
 8005592:	af00      	add	r7, sp, #0
 8005594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	431a      	orrs	r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	4baa      	ldr	r3, [pc, #680]	; (8005864 <UART_SetConfig+0x2d8>)
 80055bc:	4013      	ands	r3, r2
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a9f      	ldr	r2, [pc, #636]	; (8005868 <UART_SetConfig+0x2dc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055f4:	4313      	orrs	r3, r2
 80055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005602:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	6812      	ldr	r2, [r2, #0]
 800560a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800560c:	430b      	orrs	r3, r1
 800560e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	f023 010f 	bic.w	r1, r3, #15
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a90      	ldr	r2, [pc, #576]	; (800586c <UART_SetConfig+0x2e0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d125      	bne.n	800567c <UART_SetConfig+0xf0>
 8005630:	4b8f      	ldr	r3, [pc, #572]	; (8005870 <UART_SetConfig+0x2e4>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d81a      	bhi.n	8005674 <UART_SetConfig+0xe8>
 800563e:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <UART_SetConfig+0xb8>)
 8005640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005644:	08005655 	.word	0x08005655
 8005648:	08005665 	.word	0x08005665
 800564c:	0800565d 	.word	0x0800565d
 8005650:	0800566d 	.word	0x0800566d
 8005654:	2301      	movs	r3, #1
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800565a:	e116      	b.n	800588a <UART_SetConfig+0x2fe>
 800565c:	2302      	movs	r3, #2
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005662:	e112      	b.n	800588a <UART_SetConfig+0x2fe>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566a:	e10e      	b.n	800588a <UART_SetConfig+0x2fe>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005672:	e10a      	b.n	800588a <UART_SetConfig+0x2fe>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e106      	b.n	800588a <UART_SetConfig+0x2fe>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a7c      	ldr	r2, [pc, #496]	; (8005874 <UART_SetConfig+0x2e8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d138      	bne.n	80056f8 <UART_SetConfig+0x16c>
 8005686:	4b7a      	ldr	r3, [pc, #488]	; (8005870 <UART_SetConfig+0x2e4>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b0c      	cmp	r3, #12
 8005692:	d82d      	bhi.n	80056f0 <UART_SetConfig+0x164>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x110>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	080056f1 	.word	0x080056f1
 80056a4:	080056f1 	.word	0x080056f1
 80056a8:	080056f1 	.word	0x080056f1
 80056ac:	080056e1 	.word	0x080056e1
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	080056f1 	.word	0x080056f1
 80056b8:	080056f1 	.word	0x080056f1
 80056bc:	080056d9 	.word	0x080056d9
 80056c0:	080056f1 	.word	0x080056f1
 80056c4:	080056f1 	.word	0x080056f1
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d6:	e0d8      	b.n	800588a <UART_SetConfig+0x2fe>
 80056d8:	2302      	movs	r3, #2
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056de:	e0d4      	b.n	800588a <UART_SetConfig+0x2fe>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056e6:	e0d0      	b.n	800588a <UART_SetConfig+0x2fe>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ee:	e0cc      	b.n	800588a <UART_SetConfig+0x2fe>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f6:	e0c8      	b.n	800588a <UART_SetConfig+0x2fe>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a5e      	ldr	r2, [pc, #376]	; (8005878 <UART_SetConfig+0x2ec>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d125      	bne.n	800574e <UART_SetConfig+0x1c2>
 8005702:	4b5b      	ldr	r3, [pc, #364]	; (8005870 <UART_SetConfig+0x2e4>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005708:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800570c:	2b30      	cmp	r3, #48	; 0x30
 800570e:	d016      	beq.n	800573e <UART_SetConfig+0x1b2>
 8005710:	2b30      	cmp	r3, #48	; 0x30
 8005712:	d818      	bhi.n	8005746 <UART_SetConfig+0x1ba>
 8005714:	2b20      	cmp	r3, #32
 8005716:	d00a      	beq.n	800572e <UART_SetConfig+0x1a2>
 8005718:	2b20      	cmp	r3, #32
 800571a:	d814      	bhi.n	8005746 <UART_SetConfig+0x1ba>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <UART_SetConfig+0x19a>
 8005720:	2b10      	cmp	r3, #16
 8005722:	d008      	beq.n	8005736 <UART_SetConfig+0x1aa>
 8005724:	e00f      	b.n	8005746 <UART_SetConfig+0x1ba>
 8005726:	2300      	movs	r3, #0
 8005728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572c:	e0ad      	b.n	800588a <UART_SetConfig+0x2fe>
 800572e:	2302      	movs	r3, #2
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005734:	e0a9      	b.n	800588a <UART_SetConfig+0x2fe>
 8005736:	2304      	movs	r3, #4
 8005738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800573c:	e0a5      	b.n	800588a <UART_SetConfig+0x2fe>
 800573e:	2308      	movs	r3, #8
 8005740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005744:	e0a1      	b.n	800588a <UART_SetConfig+0x2fe>
 8005746:	2310      	movs	r3, #16
 8005748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800574c:	e09d      	b.n	800588a <UART_SetConfig+0x2fe>
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a4a      	ldr	r2, [pc, #296]	; (800587c <UART_SetConfig+0x2f0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d125      	bne.n	80057a4 <UART_SetConfig+0x218>
 8005758:	4b45      	ldr	r3, [pc, #276]	; (8005870 <UART_SetConfig+0x2e4>)
 800575a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005762:	2bc0      	cmp	r3, #192	; 0xc0
 8005764:	d016      	beq.n	8005794 <UART_SetConfig+0x208>
 8005766:	2bc0      	cmp	r3, #192	; 0xc0
 8005768:	d818      	bhi.n	800579c <UART_SetConfig+0x210>
 800576a:	2b80      	cmp	r3, #128	; 0x80
 800576c:	d00a      	beq.n	8005784 <UART_SetConfig+0x1f8>
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d814      	bhi.n	800579c <UART_SetConfig+0x210>
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <UART_SetConfig+0x1f0>
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d008      	beq.n	800578c <UART_SetConfig+0x200>
 800577a:	e00f      	b.n	800579c <UART_SetConfig+0x210>
 800577c:	2300      	movs	r3, #0
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005782:	e082      	b.n	800588a <UART_SetConfig+0x2fe>
 8005784:	2302      	movs	r3, #2
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578a:	e07e      	b.n	800588a <UART_SetConfig+0x2fe>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005792:	e07a      	b.n	800588a <UART_SetConfig+0x2fe>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579a:	e076      	b.n	800588a <UART_SetConfig+0x2fe>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a2:	e072      	b.n	800588a <UART_SetConfig+0x2fe>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a35      	ldr	r2, [pc, #212]	; (8005880 <UART_SetConfig+0x2f4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d12a      	bne.n	8005804 <UART_SetConfig+0x278>
 80057ae:	4b30      	ldr	r3, [pc, #192]	; (8005870 <UART_SetConfig+0x2e4>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057bc:	d01a      	beq.n	80057f4 <UART_SetConfig+0x268>
 80057be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057c2:	d81b      	bhi.n	80057fc <UART_SetConfig+0x270>
 80057c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c8:	d00c      	beq.n	80057e4 <UART_SetConfig+0x258>
 80057ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ce:	d815      	bhi.n	80057fc <UART_SetConfig+0x270>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <UART_SetConfig+0x250>
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d8:	d008      	beq.n	80057ec <UART_SetConfig+0x260>
 80057da:	e00f      	b.n	80057fc <UART_SetConfig+0x270>
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e2:	e052      	b.n	800588a <UART_SetConfig+0x2fe>
 80057e4:	2302      	movs	r3, #2
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ea:	e04e      	b.n	800588a <UART_SetConfig+0x2fe>
 80057ec:	2304      	movs	r3, #4
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f2:	e04a      	b.n	800588a <UART_SetConfig+0x2fe>
 80057f4:	2308      	movs	r3, #8
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fa:	e046      	b.n	800588a <UART_SetConfig+0x2fe>
 80057fc:	2310      	movs	r3, #16
 80057fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005802:	e042      	b.n	800588a <UART_SetConfig+0x2fe>
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a17      	ldr	r2, [pc, #92]	; (8005868 <UART_SetConfig+0x2dc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d13a      	bne.n	8005884 <UART_SetConfig+0x2f8>
 800580e:	4b18      	ldr	r3, [pc, #96]	; (8005870 <UART_SetConfig+0x2e4>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800581c:	d01a      	beq.n	8005854 <UART_SetConfig+0x2c8>
 800581e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005822:	d81b      	bhi.n	800585c <UART_SetConfig+0x2d0>
 8005824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005828:	d00c      	beq.n	8005844 <UART_SetConfig+0x2b8>
 800582a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582e:	d815      	bhi.n	800585c <UART_SetConfig+0x2d0>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <UART_SetConfig+0x2b0>
 8005834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005838:	d008      	beq.n	800584c <UART_SetConfig+0x2c0>
 800583a:	e00f      	b.n	800585c <UART_SetConfig+0x2d0>
 800583c:	2300      	movs	r3, #0
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e022      	b.n	800588a <UART_SetConfig+0x2fe>
 8005844:	2302      	movs	r3, #2
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e01e      	b.n	800588a <UART_SetConfig+0x2fe>
 800584c:	2304      	movs	r3, #4
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e01a      	b.n	800588a <UART_SetConfig+0x2fe>
 8005854:	2308      	movs	r3, #8
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e016      	b.n	800588a <UART_SetConfig+0x2fe>
 800585c:	2310      	movs	r3, #16
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e012      	b.n	800588a <UART_SetConfig+0x2fe>
 8005864:	cfff69f3 	.word	0xcfff69f3
 8005868:	40008000 	.word	0x40008000
 800586c:	40013800 	.word	0x40013800
 8005870:	40021000 	.word	0x40021000
 8005874:	40004400 	.word	0x40004400
 8005878:	40004800 	.word	0x40004800
 800587c:	40004c00 	.word	0x40004c00
 8005880:	40005000 	.word	0x40005000
 8005884:	2310      	movs	r3, #16
 8005886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4aae      	ldr	r2, [pc, #696]	; (8005b48 <UART_SetConfig+0x5bc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	f040 8097 	bne.w	80059c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005896:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800589a:	2b08      	cmp	r3, #8
 800589c:	d823      	bhi.n	80058e6 <UART_SetConfig+0x35a>
 800589e:	a201      	add	r2, pc, #4	; (adr r2, 80058a4 <UART_SetConfig+0x318>)
 80058a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058e7 	.word	0x080058e7
 80058ac:	080058d1 	.word	0x080058d1
 80058b0:	080058e7 	.word	0x080058e7
 80058b4:	080058d7 	.word	0x080058d7
 80058b8:	080058e7 	.word	0x080058e7
 80058bc:	080058e7 	.word	0x080058e7
 80058c0:	080058e7 	.word	0x080058e7
 80058c4:	080058df 	.word	0x080058df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c8:	f7fe f90e 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058ce:	e010      	b.n	80058f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058d0:	4b9e      	ldr	r3, [pc, #632]	; (8005b4c <UART_SetConfig+0x5c0>)
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058d4:	e00d      	b.n	80058f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d6:	f7fe f899 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 80058da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058dc:	e009      	b.n	80058f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058e4:	e005      	b.n	80058f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8130 	beq.w	8005b5a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fe:	4a94      	ldr	r2, [pc, #592]	; (8005b50 <UART_SetConfig+0x5c4>)
 8005900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005904:	461a      	mov	r2, r3
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	fbb3 f3f2 	udiv	r3, r3, r2
 800590c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	429a      	cmp	r2, r3
 800591c:	d305      	bcc.n	800592a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	429a      	cmp	r2, r3
 8005928:	d903      	bls.n	8005932 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005930:	e113      	b.n	8005b5a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	2200      	movs	r2, #0
 8005936:	60bb      	str	r3, [r7, #8]
 8005938:	60fa      	str	r2, [r7, #12]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	4a84      	ldr	r2, [pc, #528]	; (8005b50 <UART_SetConfig+0x5c4>)
 8005940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005944:	b29b      	uxth	r3, r3
 8005946:	2200      	movs	r2, #0
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005950:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005954:	f7fa fccc 	bl	80002f0 <__aeabi_uldivmod>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4610      	mov	r0, r2
 800595e:	4619      	mov	r1, r3
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	020b      	lsls	r3, r1, #8
 800596a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800596e:	0202      	lsls	r2, r0, #8
 8005970:	6979      	ldr	r1, [r7, #20]
 8005972:	6849      	ldr	r1, [r1, #4]
 8005974:	0849      	lsrs	r1, r1, #1
 8005976:	2000      	movs	r0, #0
 8005978:	460c      	mov	r4, r1
 800597a:	4605      	mov	r5, r0
 800597c:	eb12 0804 	adds.w	r8, r2, r4
 8005980:	eb43 0905 	adc.w	r9, r3, r5
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	469a      	mov	sl, r3
 800598c:	4693      	mov	fp, r2
 800598e:	4652      	mov	r2, sl
 8005990:	465b      	mov	r3, fp
 8005992:	4640      	mov	r0, r8
 8005994:	4649      	mov	r1, r9
 8005996:	f7fa fcab 	bl	80002f0 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4613      	mov	r3, r2
 80059a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059a8:	d308      	bcc.n	80059bc <UART_SetConfig+0x430>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059b0:	d204      	bcs.n	80059bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a3a      	ldr	r2, [r7, #32]
 80059b8:	60da      	str	r2, [r3, #12]
 80059ba:	e0ce      	b.n	8005b5a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059c2:	e0ca      	b.n	8005b5a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059cc:	d166      	bne.n	8005a9c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d827      	bhi.n	8005a26 <UART_SetConfig+0x49a>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <UART_SetConfig+0x450>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a11 	.word	0x08005a11
 80059e8:	08005a27 	.word	0x08005a27
 80059ec:	08005a17 	.word	0x08005a17
 80059f0:	08005a27 	.word	0x08005a27
 80059f4:	08005a27 	.word	0x08005a27
 80059f8:	08005a27 	.word	0x08005a27
 80059fc:	08005a1f 	.word	0x08005a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a00:	f7fe f872 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8005a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a06:	e014      	b.n	8005a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a08:	f7fe f884 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8005a0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a0e:	e010      	b.n	8005a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a10:	4b4e      	ldr	r3, [pc, #312]	; (8005b4c <UART_SetConfig+0x5c0>)
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a14:	e00d      	b.n	8005a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a16:	f7fd fff9 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8005a1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a1c:	e009      	b.n	8005a32 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a24:	e005      	b.n	8005a32 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a26:	2300      	movs	r3, #0
 8005a28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8090 	beq.w	8005b5a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	4a44      	ldr	r2, [pc, #272]	; (8005b50 <UART_SetConfig+0x5c4>)
 8005a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a44:	461a      	mov	r2, r3
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a4c:	005a      	lsls	r2, r3, #1
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	441a      	add	r2, r3
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	2b0f      	cmp	r3, #15
 8005a64:	d916      	bls.n	8005a94 <UART_SetConfig+0x508>
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d212      	bcs.n	8005a94 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	f023 030f 	bic.w	r3, r3, #15
 8005a76:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	8bfb      	ldrh	r3, [r7, #30]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	8bfa      	ldrh	r2, [r7, #30]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	e062      	b.n	8005b5a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a9a:	e05e      	b.n	8005b5a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d828      	bhi.n	8005af6 <UART_SetConfig+0x56a>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <UART_SetConfig+0x520>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005ad9 	.word	0x08005ad9
 8005ab4:	08005ae1 	.word	0x08005ae1
 8005ab8:	08005af7 	.word	0x08005af7
 8005abc:	08005ae7 	.word	0x08005ae7
 8005ac0:	08005af7 	.word	0x08005af7
 8005ac4:	08005af7 	.word	0x08005af7
 8005ac8:	08005af7 	.word	0x08005af7
 8005acc:	08005aef 	.word	0x08005aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ad0:	f7fe f80a 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad6:	e014      	b.n	8005b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad8:	f7fe f81c 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
 8005adc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ade:	e010      	b.n	8005b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <UART_SetConfig+0x5c0>)
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ae4:	e00d      	b.n	8005b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae6:	f7fd ff91 	bl	8003a0c <HAL_RCC_GetSysClockFreq>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005aec:	e009      	b.n	8005b02 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005af4:	e005      	b.n	8005b02 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b00:	bf00      	nop
    }

    if (pclk != 0U)
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d028      	beq.n	8005b5a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	4a10      	ldr	r2, [pc, #64]	; (8005b50 <UART_SetConfig+0x5c4>)
 8005b0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b12:	461a      	mov	r2, r3
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	441a      	add	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	d910      	bls.n	8005b54 <UART_SetConfig+0x5c8>
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b38:	d20c      	bcs.n	8005b54 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60da      	str	r2, [r3, #12]
 8005b44:	e009      	b.n	8005b5a <UART_SetConfig+0x5ce>
 8005b46:	bf00      	nop
 8005b48:	40008000 	.word	0x40008000
 8005b4c:	00f42400 	.word	0x00f42400
 8005b50:	08006da4 	.word	0x08006da4
      }
      else
      {
        ret = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2200      	movs	r2, #0
 8005b74:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3730      	adds	r7, #48	; 0x30
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	f003 0304 	and.w	r3, r3, #4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01a      	beq.n	8005c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c82:	d10a      	bne.n	8005c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00a      	beq.n	8005cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b098      	sub	sp, #96	; 0x60
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd8:	f7fb fd26 	bl	8001728 <HAL_GetTick>
 8005cdc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d12f      	bne.n	8005d4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f88e 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d022      	beq.n	8005d4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	e853 3f00 	ldrex	r3, [r3]
 8005d12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d2c:	e841 2300 	strex	r3, r2, [r1]
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1e6      	bne.n	8005d06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e063      	b.n	8005e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d149      	bne.n	8005dee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d62:	2200      	movs	r2, #0
 8005d64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f857 	bl	8005e1c <UART_WaitOnFlagUntilTimeout>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d03c      	beq.n	8005dee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	623b      	str	r3, [r7, #32]
   return(result);
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
 8005d94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e6      	bne.n	8005d74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dc6:	61fa      	str	r2, [r7, #28]
 8005dc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e5      	bne.n	8005da6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e012      	b.n	8005e14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3758      	adds	r7, #88	; 0x58
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2c:	e04f      	b.n	8005ece <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e34:	d04b      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e36:	f7fb fc77 	bl	8001728 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	69ba      	ldr	r2, [r7, #24]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d302      	bcc.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e04e      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0304 	and.w	r3, r3, #4
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d037      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2b80      	cmp	r3, #128	; 0x80
 8005e62:	d034      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d031      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f003 0308 	and.w	r3, r3, #8
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d110      	bne.n	8005e9a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f838 	bl	8005ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2208      	movs	r2, #8
 8005e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e029      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d111      	bne.n	8005ece <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 f81e 	bl	8005ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e00f      	b.n	8005eee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	bf0c      	ite	eq
 8005ede:	2301      	moveq	r3, #1
 8005ee0:	2300      	movne	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d0a0      	beq.n	8005e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b095      	sub	sp, #84	; 0x54
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8005f1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e6      	bne.n	8005efe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5c:	e841 2300 	strex	r3, r2, [r1]
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1e3      	bne.n	8005f30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d118      	bne.n	8005fa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	e853 3f00 	ldrex	r3, [r3]
 8005f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f023 0310 	bic.w	r3, r3, #16
 8005f84:	647b      	str	r3, [r7, #68]	; 0x44
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8e:	61bb      	str	r3, [r7, #24]
 8005f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f92:	6979      	ldr	r1, [r7, #20]
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e6      	bne.n	8005f70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005fb6:	bf00      	nop
 8005fb8:	3754      	adds	r7, #84	; 0x54
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UARTEx_DisableFifoMode+0x16>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e027      	b.n	8006028 <HAL_UARTEx_DisableFifoMode+0x66>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2224      	movs	r2, #36	; 0x24
 8005fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006006:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006048:	2302      	movs	r3, #2
 800604a:	e02d      	b.n	80060a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2224      	movs	r2, #36	; 0x24
 8006058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f84f 	bl	800612c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e02d      	b.n	8006124 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	; 0x24
 80060d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f811 	bl	800612c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006138:	2b00      	cmp	r3, #0
 800613a:	d108      	bne.n	800614e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800614c:	e031      	b.n	80061b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800614e:	2308      	movs	r3, #8
 8006150:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006152:	2308      	movs	r3, #8
 8006154:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	0e5b      	lsrs	r3, r3, #25
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f003 0307 	and.w	r3, r3, #7
 8006164:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	0f5b      	lsrs	r3, r3, #29
 800616e:	b2db      	uxtb	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	7b3a      	ldrb	r2, [r7, #12]
 800617a:	4911      	ldr	r1, [pc, #68]	; (80061c0 <UARTEx_SetNbDataToProcess+0x94>)
 800617c:	5c8a      	ldrb	r2, [r1, r2]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006182:	7b3a      	ldrb	r2, [r7, #12]
 8006184:	490f      	ldr	r1, [pc, #60]	; (80061c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006186:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006188:	fb93 f3f2 	sdiv	r3, r3, r2
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	7b7a      	ldrb	r2, [r7, #13]
 8006198:	4909      	ldr	r1, [pc, #36]	; (80061c0 <UARTEx_SetNbDataToProcess+0x94>)
 800619a:	5c8a      	ldrb	r2, [r1, r2]
 800619c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061a0:	7b7a      	ldrb	r2, [r7, #13]
 80061a2:	4908      	ldr	r1, [pc, #32]	; (80061c4 <UARTEx_SetNbDataToProcess+0x98>)
 80061a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	08006dbc 	.word	0x08006dbc
 80061c4:	08006dc4 	.word	0x08006dc4

080061c8 <siprintf>:
 80061c8:	b40e      	push	{r1, r2, r3}
 80061ca:	b500      	push	{lr}
 80061cc:	b09c      	sub	sp, #112	; 0x70
 80061ce:	ab1d      	add	r3, sp, #116	; 0x74
 80061d0:	9002      	str	r0, [sp, #8]
 80061d2:	9006      	str	r0, [sp, #24]
 80061d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061d8:	4809      	ldr	r0, [pc, #36]	; (8006200 <siprintf+0x38>)
 80061da:	9107      	str	r1, [sp, #28]
 80061dc:	9104      	str	r1, [sp, #16]
 80061de:	4909      	ldr	r1, [pc, #36]	; (8006204 <siprintf+0x3c>)
 80061e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e4:	9105      	str	r1, [sp, #20]
 80061e6:	6800      	ldr	r0, [r0, #0]
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	a902      	add	r1, sp, #8
 80061ec:	f000 f992 	bl	8006514 <_svfiprintf_r>
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	2200      	movs	r2, #0
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	b01c      	add	sp, #112	; 0x70
 80061f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061fc:	b003      	add	sp, #12
 80061fe:	4770      	bx	lr
 8006200:	2000005c 	.word	0x2000005c
 8006204:	ffff0208 	.word	0xffff0208

08006208 <memset>:
 8006208:	4402      	add	r2, r0
 800620a:	4603      	mov	r3, r0
 800620c:	4293      	cmp	r3, r2
 800620e:	d100      	bne.n	8006212 <memset+0xa>
 8006210:	4770      	bx	lr
 8006212:	f803 1b01 	strb.w	r1, [r3], #1
 8006216:	e7f9      	b.n	800620c <memset+0x4>

08006218 <__errno>:
 8006218:	4b01      	ldr	r3, [pc, #4]	; (8006220 <__errno+0x8>)
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	2000005c 	.word	0x2000005c

08006224 <__libc_init_array>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4d0d      	ldr	r5, [pc, #52]	; (800625c <__libc_init_array+0x38>)
 8006228:	4c0d      	ldr	r4, [pc, #52]	; (8006260 <__libc_init_array+0x3c>)
 800622a:	1b64      	subs	r4, r4, r5
 800622c:	10a4      	asrs	r4, r4, #2
 800622e:	2600      	movs	r6, #0
 8006230:	42a6      	cmp	r6, r4
 8006232:	d109      	bne.n	8006248 <__libc_init_array+0x24>
 8006234:	4d0b      	ldr	r5, [pc, #44]	; (8006264 <__libc_init_array+0x40>)
 8006236:	4c0c      	ldr	r4, [pc, #48]	; (8006268 <__libc_init_array+0x44>)
 8006238:	f000 fc6a 	bl	8006b10 <_init>
 800623c:	1b64      	subs	r4, r4, r5
 800623e:	10a4      	asrs	r4, r4, #2
 8006240:	2600      	movs	r6, #0
 8006242:	42a6      	cmp	r6, r4
 8006244:	d105      	bne.n	8006252 <__libc_init_array+0x2e>
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	f855 3b04 	ldr.w	r3, [r5], #4
 800624c:	4798      	blx	r3
 800624e:	3601      	adds	r6, #1
 8006250:	e7ee      	b.n	8006230 <__libc_init_array+0xc>
 8006252:	f855 3b04 	ldr.w	r3, [r5], #4
 8006256:	4798      	blx	r3
 8006258:	3601      	adds	r6, #1
 800625a:	e7f2      	b.n	8006242 <__libc_init_array+0x1e>
 800625c:	08006e08 	.word	0x08006e08
 8006260:	08006e08 	.word	0x08006e08
 8006264:	08006e08 	.word	0x08006e08
 8006268:	08006e0c 	.word	0x08006e0c

0800626c <__retarget_lock_acquire_recursive>:
 800626c:	4770      	bx	lr

0800626e <__retarget_lock_release_recursive>:
 800626e:	4770      	bx	lr

08006270 <_free_r>:
 8006270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006272:	2900      	cmp	r1, #0
 8006274:	d044      	beq.n	8006300 <_free_r+0x90>
 8006276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627a:	9001      	str	r0, [sp, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f1a1 0404 	sub.w	r4, r1, #4
 8006282:	bfb8      	it	lt
 8006284:	18e4      	addlt	r4, r4, r3
 8006286:	f000 f8df 	bl	8006448 <__malloc_lock>
 800628a:	4a1e      	ldr	r2, [pc, #120]	; (8006304 <_free_r+0x94>)
 800628c:	9801      	ldr	r0, [sp, #4]
 800628e:	6813      	ldr	r3, [r2, #0]
 8006290:	b933      	cbnz	r3, 80062a0 <_free_r+0x30>
 8006292:	6063      	str	r3, [r4, #4]
 8006294:	6014      	str	r4, [r2, #0]
 8006296:	b003      	add	sp, #12
 8006298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800629c:	f000 b8da 	b.w	8006454 <__malloc_unlock>
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	d908      	bls.n	80062b6 <_free_r+0x46>
 80062a4:	6825      	ldr	r5, [r4, #0]
 80062a6:	1961      	adds	r1, r4, r5
 80062a8:	428b      	cmp	r3, r1
 80062aa:	bf01      	itttt	eq
 80062ac:	6819      	ldreq	r1, [r3, #0]
 80062ae:	685b      	ldreq	r3, [r3, #4]
 80062b0:	1949      	addeq	r1, r1, r5
 80062b2:	6021      	streq	r1, [r4, #0]
 80062b4:	e7ed      	b.n	8006292 <_free_r+0x22>
 80062b6:	461a      	mov	r2, r3
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	b10b      	cbz	r3, 80062c0 <_free_r+0x50>
 80062bc:	42a3      	cmp	r3, r4
 80062be:	d9fa      	bls.n	80062b6 <_free_r+0x46>
 80062c0:	6811      	ldr	r1, [r2, #0]
 80062c2:	1855      	adds	r5, r2, r1
 80062c4:	42a5      	cmp	r5, r4
 80062c6:	d10b      	bne.n	80062e0 <_free_r+0x70>
 80062c8:	6824      	ldr	r4, [r4, #0]
 80062ca:	4421      	add	r1, r4
 80062cc:	1854      	adds	r4, r2, r1
 80062ce:	42a3      	cmp	r3, r4
 80062d0:	6011      	str	r1, [r2, #0]
 80062d2:	d1e0      	bne.n	8006296 <_free_r+0x26>
 80062d4:	681c      	ldr	r4, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	6053      	str	r3, [r2, #4]
 80062da:	440c      	add	r4, r1
 80062dc:	6014      	str	r4, [r2, #0]
 80062de:	e7da      	b.n	8006296 <_free_r+0x26>
 80062e0:	d902      	bls.n	80062e8 <_free_r+0x78>
 80062e2:	230c      	movs	r3, #12
 80062e4:	6003      	str	r3, [r0, #0]
 80062e6:	e7d6      	b.n	8006296 <_free_r+0x26>
 80062e8:	6825      	ldr	r5, [r4, #0]
 80062ea:	1961      	adds	r1, r4, r5
 80062ec:	428b      	cmp	r3, r1
 80062ee:	bf04      	itt	eq
 80062f0:	6819      	ldreq	r1, [r3, #0]
 80062f2:	685b      	ldreq	r3, [r3, #4]
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	bf04      	itt	eq
 80062f8:	1949      	addeq	r1, r1, r5
 80062fa:	6021      	streq	r1, [r4, #0]
 80062fc:	6054      	str	r4, [r2, #4]
 80062fe:	e7ca      	b.n	8006296 <_free_r+0x26>
 8006300:	b003      	add	sp, #12
 8006302:	bd30      	pop	{r4, r5, pc}
 8006304:	20000460 	.word	0x20000460

08006308 <sbrk_aligned>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4e0e      	ldr	r6, [pc, #56]	; (8006344 <sbrk_aligned+0x3c>)
 800630c:	460c      	mov	r4, r1
 800630e:	6831      	ldr	r1, [r6, #0]
 8006310:	4605      	mov	r5, r0
 8006312:	b911      	cbnz	r1, 800631a <sbrk_aligned+0x12>
 8006314:	f000 fba6 	bl	8006a64 <_sbrk_r>
 8006318:	6030      	str	r0, [r6, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f000 fba1 	bl	8006a64 <_sbrk_r>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d00a      	beq.n	800633c <sbrk_aligned+0x34>
 8006326:	1cc4      	adds	r4, r0, #3
 8006328:	f024 0403 	bic.w	r4, r4, #3
 800632c:	42a0      	cmp	r0, r4
 800632e:	d007      	beq.n	8006340 <sbrk_aligned+0x38>
 8006330:	1a21      	subs	r1, r4, r0
 8006332:	4628      	mov	r0, r5
 8006334:	f000 fb96 	bl	8006a64 <_sbrk_r>
 8006338:	3001      	adds	r0, #1
 800633a:	d101      	bne.n	8006340 <sbrk_aligned+0x38>
 800633c:	f04f 34ff 	mov.w	r4, #4294967295
 8006340:	4620      	mov	r0, r4
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	20000464 	.word	0x20000464

08006348 <_malloc_r>:
 8006348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800634c:	1ccd      	adds	r5, r1, #3
 800634e:	f025 0503 	bic.w	r5, r5, #3
 8006352:	3508      	adds	r5, #8
 8006354:	2d0c      	cmp	r5, #12
 8006356:	bf38      	it	cc
 8006358:	250c      	movcc	r5, #12
 800635a:	2d00      	cmp	r5, #0
 800635c:	4607      	mov	r7, r0
 800635e:	db01      	blt.n	8006364 <_malloc_r+0x1c>
 8006360:	42a9      	cmp	r1, r5
 8006362:	d905      	bls.n	8006370 <_malloc_r+0x28>
 8006364:	230c      	movs	r3, #12
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	2600      	movs	r6, #0
 800636a:	4630      	mov	r0, r6
 800636c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006370:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006444 <_malloc_r+0xfc>
 8006374:	f000 f868 	bl	8006448 <__malloc_lock>
 8006378:	f8d8 3000 	ldr.w	r3, [r8]
 800637c:	461c      	mov	r4, r3
 800637e:	bb5c      	cbnz	r4, 80063d8 <_malloc_r+0x90>
 8006380:	4629      	mov	r1, r5
 8006382:	4638      	mov	r0, r7
 8006384:	f7ff ffc0 	bl	8006308 <sbrk_aligned>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	4604      	mov	r4, r0
 800638c:	d155      	bne.n	800643a <_malloc_r+0xf2>
 800638e:	f8d8 4000 	ldr.w	r4, [r8]
 8006392:	4626      	mov	r6, r4
 8006394:	2e00      	cmp	r6, #0
 8006396:	d145      	bne.n	8006424 <_malloc_r+0xdc>
 8006398:	2c00      	cmp	r4, #0
 800639a:	d048      	beq.n	800642e <_malloc_r+0xe6>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	4631      	mov	r1, r6
 80063a0:	4638      	mov	r0, r7
 80063a2:	eb04 0903 	add.w	r9, r4, r3
 80063a6:	f000 fb5d 	bl	8006a64 <_sbrk_r>
 80063aa:	4581      	cmp	r9, r0
 80063ac:	d13f      	bne.n	800642e <_malloc_r+0xe6>
 80063ae:	6821      	ldr	r1, [r4, #0]
 80063b0:	1a6d      	subs	r5, r5, r1
 80063b2:	4629      	mov	r1, r5
 80063b4:	4638      	mov	r0, r7
 80063b6:	f7ff ffa7 	bl	8006308 <sbrk_aligned>
 80063ba:	3001      	adds	r0, #1
 80063bc:	d037      	beq.n	800642e <_malloc_r+0xe6>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	442b      	add	r3, r5
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	f8d8 3000 	ldr.w	r3, [r8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d038      	beq.n	800643e <_malloc_r+0xf6>
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	42a2      	cmp	r2, r4
 80063d0:	d12b      	bne.n	800642a <_malloc_r+0xe2>
 80063d2:	2200      	movs	r2, #0
 80063d4:	605a      	str	r2, [r3, #4]
 80063d6:	e00f      	b.n	80063f8 <_malloc_r+0xb0>
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	1b52      	subs	r2, r2, r5
 80063dc:	d41f      	bmi.n	800641e <_malloc_r+0xd6>
 80063de:	2a0b      	cmp	r2, #11
 80063e0:	d917      	bls.n	8006412 <_malloc_r+0xca>
 80063e2:	1961      	adds	r1, r4, r5
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	6025      	str	r5, [r4, #0]
 80063e8:	bf18      	it	ne
 80063ea:	6059      	strne	r1, [r3, #4]
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	bf08      	it	eq
 80063f0:	f8c8 1000 	streq.w	r1, [r8]
 80063f4:	5162      	str	r2, [r4, r5]
 80063f6:	604b      	str	r3, [r1, #4]
 80063f8:	4638      	mov	r0, r7
 80063fa:	f104 060b 	add.w	r6, r4, #11
 80063fe:	f000 f829 	bl	8006454 <__malloc_unlock>
 8006402:	f026 0607 	bic.w	r6, r6, #7
 8006406:	1d23      	adds	r3, r4, #4
 8006408:	1af2      	subs	r2, r6, r3
 800640a:	d0ae      	beq.n	800636a <_malloc_r+0x22>
 800640c:	1b9b      	subs	r3, r3, r6
 800640e:	50a3      	str	r3, [r4, r2]
 8006410:	e7ab      	b.n	800636a <_malloc_r+0x22>
 8006412:	42a3      	cmp	r3, r4
 8006414:	6862      	ldr	r2, [r4, #4]
 8006416:	d1dd      	bne.n	80063d4 <_malloc_r+0x8c>
 8006418:	f8c8 2000 	str.w	r2, [r8]
 800641c:	e7ec      	b.n	80063f8 <_malloc_r+0xb0>
 800641e:	4623      	mov	r3, r4
 8006420:	6864      	ldr	r4, [r4, #4]
 8006422:	e7ac      	b.n	800637e <_malloc_r+0x36>
 8006424:	4634      	mov	r4, r6
 8006426:	6876      	ldr	r6, [r6, #4]
 8006428:	e7b4      	b.n	8006394 <_malloc_r+0x4c>
 800642a:	4613      	mov	r3, r2
 800642c:	e7cc      	b.n	80063c8 <_malloc_r+0x80>
 800642e:	230c      	movs	r3, #12
 8006430:	603b      	str	r3, [r7, #0]
 8006432:	4638      	mov	r0, r7
 8006434:	f000 f80e 	bl	8006454 <__malloc_unlock>
 8006438:	e797      	b.n	800636a <_malloc_r+0x22>
 800643a:	6025      	str	r5, [r4, #0]
 800643c:	e7dc      	b.n	80063f8 <_malloc_r+0xb0>
 800643e:	605b      	str	r3, [r3, #4]
 8006440:	deff      	udf	#255	; 0xff
 8006442:	bf00      	nop
 8006444:	20000460 	.word	0x20000460

08006448 <__malloc_lock>:
 8006448:	4801      	ldr	r0, [pc, #4]	; (8006450 <__malloc_lock+0x8>)
 800644a:	f7ff bf0f 	b.w	800626c <__retarget_lock_acquire_recursive>
 800644e:	bf00      	nop
 8006450:	2000045c 	.word	0x2000045c

08006454 <__malloc_unlock>:
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__malloc_unlock+0x8>)
 8006456:	f7ff bf0a 	b.w	800626e <__retarget_lock_release_recursive>
 800645a:	bf00      	nop
 800645c:	2000045c 	.word	0x2000045c

08006460 <__ssputs_r>:
 8006460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006464:	688e      	ldr	r6, [r1, #8]
 8006466:	461f      	mov	r7, r3
 8006468:	42be      	cmp	r6, r7
 800646a:	680b      	ldr	r3, [r1, #0]
 800646c:	4682      	mov	sl, r0
 800646e:	460c      	mov	r4, r1
 8006470:	4690      	mov	r8, r2
 8006472:	d82c      	bhi.n	80064ce <__ssputs_r+0x6e>
 8006474:	898a      	ldrh	r2, [r1, #12]
 8006476:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800647a:	d026      	beq.n	80064ca <__ssputs_r+0x6a>
 800647c:	6965      	ldr	r5, [r4, #20]
 800647e:	6909      	ldr	r1, [r1, #16]
 8006480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006484:	eba3 0901 	sub.w	r9, r3, r1
 8006488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800648c:	1c7b      	adds	r3, r7, #1
 800648e:	444b      	add	r3, r9
 8006490:	106d      	asrs	r5, r5, #1
 8006492:	429d      	cmp	r5, r3
 8006494:	bf38      	it	cc
 8006496:	461d      	movcc	r5, r3
 8006498:	0553      	lsls	r3, r2, #21
 800649a:	d527      	bpl.n	80064ec <__ssputs_r+0x8c>
 800649c:	4629      	mov	r1, r5
 800649e:	f7ff ff53 	bl	8006348 <_malloc_r>
 80064a2:	4606      	mov	r6, r0
 80064a4:	b360      	cbz	r0, 8006500 <__ssputs_r+0xa0>
 80064a6:	6921      	ldr	r1, [r4, #16]
 80064a8:	464a      	mov	r2, r9
 80064aa:	f000 faeb 	bl	8006a84 <memcpy>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	6126      	str	r6, [r4, #16]
 80064bc:	6165      	str	r5, [r4, #20]
 80064be:	444e      	add	r6, r9
 80064c0:	eba5 0509 	sub.w	r5, r5, r9
 80064c4:	6026      	str	r6, [r4, #0]
 80064c6:	60a5      	str	r5, [r4, #8]
 80064c8:	463e      	mov	r6, r7
 80064ca:	42be      	cmp	r6, r7
 80064cc:	d900      	bls.n	80064d0 <__ssputs_r+0x70>
 80064ce:	463e      	mov	r6, r7
 80064d0:	6820      	ldr	r0, [r4, #0]
 80064d2:	4632      	mov	r2, r6
 80064d4:	4641      	mov	r1, r8
 80064d6:	f000 faab 	bl	8006a30 <memmove>
 80064da:	68a3      	ldr	r3, [r4, #8]
 80064dc:	1b9b      	subs	r3, r3, r6
 80064de:	60a3      	str	r3, [r4, #8]
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	4433      	add	r3, r6
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	2000      	movs	r0, #0
 80064e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ec:	462a      	mov	r2, r5
 80064ee:	f000 fad7 	bl	8006aa0 <_realloc_r>
 80064f2:	4606      	mov	r6, r0
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d1e0      	bne.n	80064ba <__ssputs_r+0x5a>
 80064f8:	6921      	ldr	r1, [r4, #16]
 80064fa:	4650      	mov	r0, sl
 80064fc:	f7ff feb8 	bl	8006270 <_free_r>
 8006500:	230c      	movs	r3, #12
 8006502:	f8ca 3000 	str.w	r3, [sl]
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	f04f 30ff 	mov.w	r0, #4294967295
 8006512:	e7e9      	b.n	80064e8 <__ssputs_r+0x88>

08006514 <_svfiprintf_r>:
 8006514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006518:	4698      	mov	r8, r3
 800651a:	898b      	ldrh	r3, [r1, #12]
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	b09d      	sub	sp, #116	; 0x74
 8006520:	4607      	mov	r7, r0
 8006522:	460d      	mov	r5, r1
 8006524:	4614      	mov	r4, r2
 8006526:	d50e      	bpl.n	8006546 <_svfiprintf_r+0x32>
 8006528:	690b      	ldr	r3, [r1, #16]
 800652a:	b963      	cbnz	r3, 8006546 <_svfiprintf_r+0x32>
 800652c:	2140      	movs	r1, #64	; 0x40
 800652e:	f7ff ff0b 	bl	8006348 <_malloc_r>
 8006532:	6028      	str	r0, [r5, #0]
 8006534:	6128      	str	r0, [r5, #16]
 8006536:	b920      	cbnz	r0, 8006542 <_svfiprintf_r+0x2e>
 8006538:	230c      	movs	r3, #12
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	e0d0      	b.n	80066e4 <_svfiprintf_r+0x1d0>
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	616b      	str	r3, [r5, #20]
 8006546:	2300      	movs	r3, #0
 8006548:	9309      	str	r3, [sp, #36]	; 0x24
 800654a:	2320      	movs	r3, #32
 800654c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006550:	f8cd 800c 	str.w	r8, [sp, #12]
 8006554:	2330      	movs	r3, #48	; 0x30
 8006556:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066fc <_svfiprintf_r+0x1e8>
 800655a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800655e:	f04f 0901 	mov.w	r9, #1
 8006562:	4623      	mov	r3, r4
 8006564:	469a      	mov	sl, r3
 8006566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800656a:	b10a      	cbz	r2, 8006570 <_svfiprintf_r+0x5c>
 800656c:	2a25      	cmp	r2, #37	; 0x25
 800656e:	d1f9      	bne.n	8006564 <_svfiprintf_r+0x50>
 8006570:	ebba 0b04 	subs.w	fp, sl, r4
 8006574:	d00b      	beq.n	800658e <_svfiprintf_r+0x7a>
 8006576:	465b      	mov	r3, fp
 8006578:	4622      	mov	r2, r4
 800657a:	4629      	mov	r1, r5
 800657c:	4638      	mov	r0, r7
 800657e:	f7ff ff6f 	bl	8006460 <__ssputs_r>
 8006582:	3001      	adds	r0, #1
 8006584:	f000 80a9 	beq.w	80066da <_svfiprintf_r+0x1c6>
 8006588:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800658a:	445a      	add	r2, fp
 800658c:	9209      	str	r2, [sp, #36]	; 0x24
 800658e:	f89a 3000 	ldrb.w	r3, [sl]
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80a1 	beq.w	80066da <_svfiprintf_r+0x1c6>
 8006598:	2300      	movs	r3, #0
 800659a:	f04f 32ff 	mov.w	r2, #4294967295
 800659e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065a2:	f10a 0a01 	add.w	sl, sl, #1
 80065a6:	9304      	str	r3, [sp, #16]
 80065a8:	9307      	str	r3, [sp, #28]
 80065aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065ae:	931a      	str	r3, [sp, #104]	; 0x68
 80065b0:	4654      	mov	r4, sl
 80065b2:	2205      	movs	r2, #5
 80065b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b8:	4850      	ldr	r0, [pc, #320]	; (80066fc <_svfiprintf_r+0x1e8>)
 80065ba:	f7f9 fe49 	bl	8000250 <memchr>
 80065be:	9a04      	ldr	r2, [sp, #16]
 80065c0:	b9d8      	cbnz	r0, 80065fa <_svfiprintf_r+0xe6>
 80065c2:	06d0      	lsls	r0, r2, #27
 80065c4:	bf44      	itt	mi
 80065c6:	2320      	movmi	r3, #32
 80065c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065cc:	0711      	lsls	r1, r2, #28
 80065ce:	bf44      	itt	mi
 80065d0:	232b      	movmi	r3, #43	; 0x2b
 80065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065d6:	f89a 3000 	ldrb.w	r3, [sl]
 80065da:	2b2a      	cmp	r3, #42	; 0x2a
 80065dc:	d015      	beq.n	800660a <_svfiprintf_r+0xf6>
 80065de:	9a07      	ldr	r2, [sp, #28]
 80065e0:	4654      	mov	r4, sl
 80065e2:	2000      	movs	r0, #0
 80065e4:	f04f 0c0a 	mov.w	ip, #10
 80065e8:	4621      	mov	r1, r4
 80065ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065ee:	3b30      	subs	r3, #48	; 0x30
 80065f0:	2b09      	cmp	r3, #9
 80065f2:	d94d      	bls.n	8006690 <_svfiprintf_r+0x17c>
 80065f4:	b1b0      	cbz	r0, 8006624 <_svfiprintf_r+0x110>
 80065f6:	9207      	str	r2, [sp, #28]
 80065f8:	e014      	b.n	8006624 <_svfiprintf_r+0x110>
 80065fa:	eba0 0308 	sub.w	r3, r0, r8
 80065fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006602:	4313      	orrs	r3, r2
 8006604:	9304      	str	r3, [sp, #16]
 8006606:	46a2      	mov	sl, r4
 8006608:	e7d2      	b.n	80065b0 <_svfiprintf_r+0x9c>
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	1d19      	adds	r1, r3, #4
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	9103      	str	r1, [sp, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	bfbb      	ittet	lt
 8006616:	425b      	neglt	r3, r3
 8006618:	f042 0202 	orrlt.w	r2, r2, #2
 800661c:	9307      	strge	r3, [sp, #28]
 800661e:	9307      	strlt	r3, [sp, #28]
 8006620:	bfb8      	it	lt
 8006622:	9204      	strlt	r2, [sp, #16]
 8006624:	7823      	ldrb	r3, [r4, #0]
 8006626:	2b2e      	cmp	r3, #46	; 0x2e
 8006628:	d10c      	bne.n	8006644 <_svfiprintf_r+0x130>
 800662a:	7863      	ldrb	r3, [r4, #1]
 800662c:	2b2a      	cmp	r3, #42	; 0x2a
 800662e:	d134      	bne.n	800669a <_svfiprintf_r+0x186>
 8006630:	9b03      	ldr	r3, [sp, #12]
 8006632:	1d1a      	adds	r2, r3, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	9203      	str	r2, [sp, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	bfb8      	it	lt
 800663c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006640:	3402      	adds	r4, #2
 8006642:	9305      	str	r3, [sp, #20]
 8006644:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800670c <_svfiprintf_r+0x1f8>
 8006648:	7821      	ldrb	r1, [r4, #0]
 800664a:	2203      	movs	r2, #3
 800664c:	4650      	mov	r0, sl
 800664e:	f7f9 fdff 	bl	8000250 <memchr>
 8006652:	b138      	cbz	r0, 8006664 <_svfiprintf_r+0x150>
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	eba0 000a 	sub.w	r0, r0, sl
 800665a:	2240      	movs	r2, #64	; 0x40
 800665c:	4082      	lsls	r2, r0
 800665e:	4313      	orrs	r3, r2
 8006660:	3401      	adds	r4, #1
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006668:	4825      	ldr	r0, [pc, #148]	; (8006700 <_svfiprintf_r+0x1ec>)
 800666a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800666e:	2206      	movs	r2, #6
 8006670:	f7f9 fdee 	bl	8000250 <memchr>
 8006674:	2800      	cmp	r0, #0
 8006676:	d038      	beq.n	80066ea <_svfiprintf_r+0x1d6>
 8006678:	4b22      	ldr	r3, [pc, #136]	; (8006704 <_svfiprintf_r+0x1f0>)
 800667a:	bb1b      	cbnz	r3, 80066c4 <_svfiprintf_r+0x1b0>
 800667c:	9b03      	ldr	r3, [sp, #12]
 800667e:	3307      	adds	r3, #7
 8006680:	f023 0307 	bic.w	r3, r3, #7
 8006684:	3308      	adds	r3, #8
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668a:	4433      	add	r3, r6
 800668c:	9309      	str	r3, [sp, #36]	; 0x24
 800668e:	e768      	b.n	8006562 <_svfiprintf_r+0x4e>
 8006690:	fb0c 3202 	mla	r2, ip, r2, r3
 8006694:	460c      	mov	r4, r1
 8006696:	2001      	movs	r0, #1
 8006698:	e7a6      	b.n	80065e8 <_svfiprintf_r+0xd4>
 800669a:	2300      	movs	r3, #0
 800669c:	3401      	adds	r4, #1
 800669e:	9305      	str	r3, [sp, #20]
 80066a0:	4619      	mov	r1, r3
 80066a2:	f04f 0c0a 	mov.w	ip, #10
 80066a6:	4620      	mov	r0, r4
 80066a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066ac:	3a30      	subs	r2, #48	; 0x30
 80066ae:	2a09      	cmp	r2, #9
 80066b0:	d903      	bls.n	80066ba <_svfiprintf_r+0x1a6>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0c6      	beq.n	8006644 <_svfiprintf_r+0x130>
 80066b6:	9105      	str	r1, [sp, #20]
 80066b8:	e7c4      	b.n	8006644 <_svfiprintf_r+0x130>
 80066ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80066be:	4604      	mov	r4, r0
 80066c0:	2301      	movs	r3, #1
 80066c2:	e7f0      	b.n	80066a6 <_svfiprintf_r+0x192>
 80066c4:	ab03      	add	r3, sp, #12
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	462a      	mov	r2, r5
 80066ca:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <_svfiprintf_r+0x1f4>)
 80066cc:	a904      	add	r1, sp, #16
 80066ce:	4638      	mov	r0, r7
 80066d0:	f3af 8000 	nop.w
 80066d4:	1c42      	adds	r2, r0, #1
 80066d6:	4606      	mov	r6, r0
 80066d8:	d1d6      	bne.n	8006688 <_svfiprintf_r+0x174>
 80066da:	89ab      	ldrh	r3, [r5, #12]
 80066dc:	065b      	lsls	r3, r3, #25
 80066de:	f53f af2d 	bmi.w	800653c <_svfiprintf_r+0x28>
 80066e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066e4:	b01d      	add	sp, #116	; 0x74
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	ab03      	add	r3, sp, #12
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	462a      	mov	r2, r5
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <_svfiprintf_r+0x1f4>)
 80066f2:	a904      	add	r1, sp, #16
 80066f4:	4638      	mov	r0, r7
 80066f6:	f000 f879 	bl	80067ec <_printf_i>
 80066fa:	e7eb      	b.n	80066d4 <_svfiprintf_r+0x1c0>
 80066fc:	08006dcc 	.word	0x08006dcc
 8006700:	08006dd6 	.word	0x08006dd6
 8006704:	00000000 	.word	0x00000000
 8006708:	08006461 	.word	0x08006461
 800670c:	08006dd2 	.word	0x08006dd2

08006710 <_printf_common>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	4616      	mov	r6, r2
 8006716:	4699      	mov	r9, r3
 8006718:	688a      	ldr	r2, [r1, #8]
 800671a:	690b      	ldr	r3, [r1, #16]
 800671c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006720:	4293      	cmp	r3, r2
 8006722:	bfb8      	it	lt
 8006724:	4613      	movlt	r3, r2
 8006726:	6033      	str	r3, [r6, #0]
 8006728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800672c:	4607      	mov	r7, r0
 800672e:	460c      	mov	r4, r1
 8006730:	b10a      	cbz	r2, 8006736 <_printf_common+0x26>
 8006732:	3301      	adds	r3, #1
 8006734:	6033      	str	r3, [r6, #0]
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	0699      	lsls	r1, r3, #26
 800673a:	bf42      	ittt	mi
 800673c:	6833      	ldrmi	r3, [r6, #0]
 800673e:	3302      	addmi	r3, #2
 8006740:	6033      	strmi	r3, [r6, #0]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	f015 0506 	ands.w	r5, r5, #6
 8006748:	d106      	bne.n	8006758 <_printf_common+0x48>
 800674a:	f104 0a19 	add.w	sl, r4, #25
 800674e:	68e3      	ldr	r3, [r4, #12]
 8006750:	6832      	ldr	r2, [r6, #0]
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	42ab      	cmp	r3, r5
 8006756:	dc26      	bgt.n	80067a6 <_printf_common+0x96>
 8006758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800675c:	1e13      	subs	r3, r2, #0
 800675e:	6822      	ldr	r2, [r4, #0]
 8006760:	bf18      	it	ne
 8006762:	2301      	movne	r3, #1
 8006764:	0692      	lsls	r2, r2, #26
 8006766:	d42b      	bmi.n	80067c0 <_printf_common+0xb0>
 8006768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800676c:	4649      	mov	r1, r9
 800676e:	4638      	mov	r0, r7
 8006770:	47c0      	blx	r8
 8006772:	3001      	adds	r0, #1
 8006774:	d01e      	beq.n	80067b4 <_printf_common+0xa4>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	6922      	ldr	r2, [r4, #16]
 800677a:	f003 0306 	and.w	r3, r3, #6
 800677e:	2b04      	cmp	r3, #4
 8006780:	bf02      	ittt	eq
 8006782:	68e5      	ldreq	r5, [r4, #12]
 8006784:	6833      	ldreq	r3, [r6, #0]
 8006786:	1aed      	subeq	r5, r5, r3
 8006788:	68a3      	ldr	r3, [r4, #8]
 800678a:	bf0c      	ite	eq
 800678c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006790:	2500      	movne	r5, #0
 8006792:	4293      	cmp	r3, r2
 8006794:	bfc4      	itt	gt
 8006796:	1a9b      	subgt	r3, r3, r2
 8006798:	18ed      	addgt	r5, r5, r3
 800679a:	2600      	movs	r6, #0
 800679c:	341a      	adds	r4, #26
 800679e:	42b5      	cmp	r5, r6
 80067a0:	d11a      	bne.n	80067d8 <_printf_common+0xc8>
 80067a2:	2000      	movs	r0, #0
 80067a4:	e008      	b.n	80067b8 <_printf_common+0xa8>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	4649      	mov	r1, r9
 80067ac:	4638      	mov	r0, r7
 80067ae:	47c0      	blx	r8
 80067b0:	3001      	adds	r0, #1
 80067b2:	d103      	bne.n	80067bc <_printf_common+0xac>
 80067b4:	f04f 30ff 	mov.w	r0, #4294967295
 80067b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067bc:	3501      	adds	r5, #1
 80067be:	e7c6      	b.n	800674e <_printf_common+0x3e>
 80067c0:	18e1      	adds	r1, r4, r3
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	2030      	movs	r0, #48	; 0x30
 80067c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ca:	4422      	add	r2, r4
 80067cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d4:	3302      	adds	r3, #2
 80067d6:	e7c7      	b.n	8006768 <_printf_common+0x58>
 80067d8:	2301      	movs	r3, #1
 80067da:	4622      	mov	r2, r4
 80067dc:	4649      	mov	r1, r9
 80067de:	4638      	mov	r0, r7
 80067e0:	47c0      	blx	r8
 80067e2:	3001      	adds	r0, #1
 80067e4:	d0e6      	beq.n	80067b4 <_printf_common+0xa4>
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7d9      	b.n	800679e <_printf_common+0x8e>
	...

080067ec <_printf_i>:
 80067ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	7e0f      	ldrb	r7, [r1, #24]
 80067f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067f4:	2f78      	cmp	r7, #120	; 0x78
 80067f6:	4691      	mov	r9, r2
 80067f8:	4680      	mov	r8, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	469a      	mov	sl, r3
 80067fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006802:	d807      	bhi.n	8006814 <_printf_i+0x28>
 8006804:	2f62      	cmp	r7, #98	; 0x62
 8006806:	d80a      	bhi.n	800681e <_printf_i+0x32>
 8006808:	2f00      	cmp	r7, #0
 800680a:	f000 80d4 	beq.w	80069b6 <_printf_i+0x1ca>
 800680e:	2f58      	cmp	r7, #88	; 0x58
 8006810:	f000 80c0 	beq.w	8006994 <_printf_i+0x1a8>
 8006814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800681c:	e03a      	b.n	8006894 <_printf_i+0xa8>
 800681e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006822:	2b15      	cmp	r3, #21
 8006824:	d8f6      	bhi.n	8006814 <_printf_i+0x28>
 8006826:	a101      	add	r1, pc, #4	; (adr r1, 800682c <_printf_i+0x40>)
 8006828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800682c:	08006885 	.word	0x08006885
 8006830:	08006899 	.word	0x08006899
 8006834:	08006815 	.word	0x08006815
 8006838:	08006815 	.word	0x08006815
 800683c:	08006815 	.word	0x08006815
 8006840:	08006815 	.word	0x08006815
 8006844:	08006899 	.word	0x08006899
 8006848:	08006815 	.word	0x08006815
 800684c:	08006815 	.word	0x08006815
 8006850:	08006815 	.word	0x08006815
 8006854:	08006815 	.word	0x08006815
 8006858:	0800699d 	.word	0x0800699d
 800685c:	080068c5 	.word	0x080068c5
 8006860:	08006957 	.word	0x08006957
 8006864:	08006815 	.word	0x08006815
 8006868:	08006815 	.word	0x08006815
 800686c:	080069bf 	.word	0x080069bf
 8006870:	08006815 	.word	0x08006815
 8006874:	080068c5 	.word	0x080068c5
 8006878:	08006815 	.word	0x08006815
 800687c:	08006815 	.word	0x08006815
 8006880:	0800695f 	.word	0x0800695f
 8006884:	682b      	ldr	r3, [r5, #0]
 8006886:	1d1a      	adds	r2, r3, #4
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	602a      	str	r2, [r5, #0]
 800688c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006894:	2301      	movs	r3, #1
 8006896:	e09f      	b.n	80069d8 <_printf_i+0x1ec>
 8006898:	6820      	ldr	r0, [r4, #0]
 800689a:	682b      	ldr	r3, [r5, #0]
 800689c:	0607      	lsls	r7, r0, #24
 800689e:	f103 0104 	add.w	r1, r3, #4
 80068a2:	6029      	str	r1, [r5, #0]
 80068a4:	d501      	bpl.n	80068aa <_printf_i+0xbe>
 80068a6:	681e      	ldr	r6, [r3, #0]
 80068a8:	e003      	b.n	80068b2 <_printf_i+0xc6>
 80068aa:	0646      	lsls	r6, r0, #25
 80068ac:	d5fb      	bpl.n	80068a6 <_printf_i+0xba>
 80068ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	da03      	bge.n	80068be <_printf_i+0xd2>
 80068b6:	232d      	movs	r3, #45	; 0x2d
 80068b8:	4276      	negs	r6, r6
 80068ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068be:	485a      	ldr	r0, [pc, #360]	; (8006a28 <_printf_i+0x23c>)
 80068c0:	230a      	movs	r3, #10
 80068c2:	e012      	b.n	80068ea <_printf_i+0xfe>
 80068c4:	682b      	ldr	r3, [r5, #0]
 80068c6:	6820      	ldr	r0, [r4, #0]
 80068c8:	1d19      	adds	r1, r3, #4
 80068ca:	6029      	str	r1, [r5, #0]
 80068cc:	0605      	lsls	r5, r0, #24
 80068ce:	d501      	bpl.n	80068d4 <_printf_i+0xe8>
 80068d0:	681e      	ldr	r6, [r3, #0]
 80068d2:	e002      	b.n	80068da <_printf_i+0xee>
 80068d4:	0641      	lsls	r1, r0, #25
 80068d6:	d5fb      	bpl.n	80068d0 <_printf_i+0xe4>
 80068d8:	881e      	ldrh	r6, [r3, #0]
 80068da:	4853      	ldr	r0, [pc, #332]	; (8006a28 <_printf_i+0x23c>)
 80068dc:	2f6f      	cmp	r7, #111	; 0x6f
 80068de:	bf0c      	ite	eq
 80068e0:	2308      	moveq	r3, #8
 80068e2:	230a      	movne	r3, #10
 80068e4:	2100      	movs	r1, #0
 80068e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ea:	6865      	ldr	r5, [r4, #4]
 80068ec:	60a5      	str	r5, [r4, #8]
 80068ee:	2d00      	cmp	r5, #0
 80068f0:	bfa2      	ittt	ge
 80068f2:	6821      	ldrge	r1, [r4, #0]
 80068f4:	f021 0104 	bicge.w	r1, r1, #4
 80068f8:	6021      	strge	r1, [r4, #0]
 80068fa:	b90e      	cbnz	r6, 8006900 <_printf_i+0x114>
 80068fc:	2d00      	cmp	r5, #0
 80068fe:	d04b      	beq.n	8006998 <_printf_i+0x1ac>
 8006900:	4615      	mov	r5, r2
 8006902:	fbb6 f1f3 	udiv	r1, r6, r3
 8006906:	fb03 6711 	mls	r7, r3, r1, r6
 800690a:	5dc7      	ldrb	r7, [r0, r7]
 800690c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006910:	4637      	mov	r7, r6
 8006912:	42bb      	cmp	r3, r7
 8006914:	460e      	mov	r6, r1
 8006916:	d9f4      	bls.n	8006902 <_printf_i+0x116>
 8006918:	2b08      	cmp	r3, #8
 800691a:	d10b      	bne.n	8006934 <_printf_i+0x148>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07de      	lsls	r6, r3, #31
 8006920:	d508      	bpl.n	8006934 <_printf_i+0x148>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	6861      	ldr	r1, [r4, #4]
 8006926:	4299      	cmp	r1, r3
 8006928:	bfde      	ittt	le
 800692a:	2330      	movle	r3, #48	; 0x30
 800692c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006930:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006934:	1b52      	subs	r2, r2, r5
 8006936:	6122      	str	r2, [r4, #16]
 8006938:	f8cd a000 	str.w	sl, [sp]
 800693c:	464b      	mov	r3, r9
 800693e:	aa03      	add	r2, sp, #12
 8006940:	4621      	mov	r1, r4
 8006942:	4640      	mov	r0, r8
 8006944:	f7ff fee4 	bl	8006710 <_printf_common>
 8006948:	3001      	adds	r0, #1
 800694a:	d14a      	bne.n	80069e2 <_printf_i+0x1f6>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	b004      	add	sp, #16
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	f043 0320 	orr.w	r3, r3, #32
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	4833      	ldr	r0, [pc, #204]	; (8006a2c <_printf_i+0x240>)
 8006960:	2778      	movs	r7, #120	; 0x78
 8006962:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	6829      	ldr	r1, [r5, #0]
 800696a:	061f      	lsls	r7, r3, #24
 800696c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006970:	d402      	bmi.n	8006978 <_printf_i+0x18c>
 8006972:	065f      	lsls	r7, r3, #25
 8006974:	bf48      	it	mi
 8006976:	b2b6      	uxthmi	r6, r6
 8006978:	07df      	lsls	r7, r3, #31
 800697a:	bf48      	it	mi
 800697c:	f043 0320 	orrmi.w	r3, r3, #32
 8006980:	6029      	str	r1, [r5, #0]
 8006982:	bf48      	it	mi
 8006984:	6023      	strmi	r3, [r4, #0]
 8006986:	b91e      	cbnz	r6, 8006990 <_printf_i+0x1a4>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	f023 0320 	bic.w	r3, r3, #32
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	2310      	movs	r3, #16
 8006992:	e7a7      	b.n	80068e4 <_printf_i+0xf8>
 8006994:	4824      	ldr	r0, [pc, #144]	; (8006a28 <_printf_i+0x23c>)
 8006996:	e7e4      	b.n	8006962 <_printf_i+0x176>
 8006998:	4615      	mov	r5, r2
 800699a:	e7bd      	b.n	8006918 <_printf_i+0x12c>
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	6826      	ldr	r6, [r4, #0]
 80069a0:	6961      	ldr	r1, [r4, #20]
 80069a2:	1d18      	adds	r0, r3, #4
 80069a4:	6028      	str	r0, [r5, #0]
 80069a6:	0635      	lsls	r5, r6, #24
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	d501      	bpl.n	80069b0 <_printf_i+0x1c4>
 80069ac:	6019      	str	r1, [r3, #0]
 80069ae:	e002      	b.n	80069b6 <_printf_i+0x1ca>
 80069b0:	0670      	lsls	r0, r6, #25
 80069b2:	d5fb      	bpl.n	80069ac <_printf_i+0x1c0>
 80069b4:	8019      	strh	r1, [r3, #0]
 80069b6:	2300      	movs	r3, #0
 80069b8:	6123      	str	r3, [r4, #16]
 80069ba:	4615      	mov	r5, r2
 80069bc:	e7bc      	b.n	8006938 <_printf_i+0x14c>
 80069be:	682b      	ldr	r3, [r5, #0]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	602a      	str	r2, [r5, #0]
 80069c4:	681d      	ldr	r5, [r3, #0]
 80069c6:	6862      	ldr	r2, [r4, #4]
 80069c8:	2100      	movs	r1, #0
 80069ca:	4628      	mov	r0, r5
 80069cc:	f7f9 fc40 	bl	8000250 <memchr>
 80069d0:	b108      	cbz	r0, 80069d6 <_printf_i+0x1ea>
 80069d2:	1b40      	subs	r0, r0, r5
 80069d4:	6060      	str	r0, [r4, #4]
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	6123      	str	r3, [r4, #16]
 80069da:	2300      	movs	r3, #0
 80069dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e0:	e7aa      	b.n	8006938 <_printf_i+0x14c>
 80069e2:	6923      	ldr	r3, [r4, #16]
 80069e4:	462a      	mov	r2, r5
 80069e6:	4649      	mov	r1, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	47d0      	blx	sl
 80069ec:	3001      	adds	r0, #1
 80069ee:	d0ad      	beq.n	800694c <_printf_i+0x160>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	079b      	lsls	r3, r3, #30
 80069f4:	d413      	bmi.n	8006a1e <_printf_i+0x232>
 80069f6:	68e0      	ldr	r0, [r4, #12]
 80069f8:	9b03      	ldr	r3, [sp, #12]
 80069fa:	4298      	cmp	r0, r3
 80069fc:	bfb8      	it	lt
 80069fe:	4618      	movlt	r0, r3
 8006a00:	e7a6      	b.n	8006950 <_printf_i+0x164>
 8006a02:	2301      	movs	r3, #1
 8006a04:	4632      	mov	r2, r6
 8006a06:	4649      	mov	r1, r9
 8006a08:	4640      	mov	r0, r8
 8006a0a:	47d0      	blx	sl
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d09d      	beq.n	800694c <_printf_i+0x160>
 8006a10:	3501      	adds	r5, #1
 8006a12:	68e3      	ldr	r3, [r4, #12]
 8006a14:	9903      	ldr	r1, [sp, #12]
 8006a16:	1a5b      	subs	r3, r3, r1
 8006a18:	42ab      	cmp	r3, r5
 8006a1a:	dcf2      	bgt.n	8006a02 <_printf_i+0x216>
 8006a1c:	e7eb      	b.n	80069f6 <_printf_i+0x20a>
 8006a1e:	2500      	movs	r5, #0
 8006a20:	f104 0619 	add.w	r6, r4, #25
 8006a24:	e7f5      	b.n	8006a12 <_printf_i+0x226>
 8006a26:	bf00      	nop
 8006a28:	08006ddd 	.word	0x08006ddd
 8006a2c:	08006dee 	.word	0x08006dee

08006a30 <memmove>:
 8006a30:	4288      	cmp	r0, r1
 8006a32:	b510      	push	{r4, lr}
 8006a34:	eb01 0402 	add.w	r4, r1, r2
 8006a38:	d902      	bls.n	8006a40 <memmove+0x10>
 8006a3a:	4284      	cmp	r4, r0
 8006a3c:	4623      	mov	r3, r4
 8006a3e:	d807      	bhi.n	8006a50 <memmove+0x20>
 8006a40:	1e43      	subs	r3, r0, #1
 8006a42:	42a1      	cmp	r1, r4
 8006a44:	d008      	beq.n	8006a58 <memmove+0x28>
 8006a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a4e:	e7f8      	b.n	8006a42 <memmove+0x12>
 8006a50:	4402      	add	r2, r0
 8006a52:	4601      	mov	r1, r0
 8006a54:	428a      	cmp	r2, r1
 8006a56:	d100      	bne.n	8006a5a <memmove+0x2a>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a62:	e7f7      	b.n	8006a54 <memmove+0x24>

08006a64 <_sbrk_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d06      	ldr	r5, [pc, #24]	; (8006a80 <_sbrk_r+0x1c>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	602b      	str	r3, [r5, #0]
 8006a70:	f7fa fd84 	bl	800157c <_sbrk>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_sbrk_r+0x1a>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_sbrk_r+0x1a>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	20000458 	.word	0x20000458

08006a84 <memcpy>:
 8006a84:	440a      	add	r2, r1
 8006a86:	4291      	cmp	r1, r2
 8006a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a8c:	d100      	bne.n	8006a90 <memcpy+0xc>
 8006a8e:	4770      	bx	lr
 8006a90:	b510      	push	{r4, lr}
 8006a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a9a:	4291      	cmp	r1, r2
 8006a9c:	d1f9      	bne.n	8006a92 <memcpy+0xe>
 8006a9e:	bd10      	pop	{r4, pc}

08006aa0 <_realloc_r>:
 8006aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	460e      	mov	r6, r1
 8006aaa:	b921      	cbnz	r1, 8006ab6 <_realloc_r+0x16>
 8006aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	f7ff bc49 	b.w	8006348 <_malloc_r>
 8006ab6:	b92a      	cbnz	r2, 8006ac4 <_realloc_r+0x24>
 8006ab8:	f7ff fbda 	bl	8006270 <_free_r>
 8006abc:	4625      	mov	r5, r4
 8006abe:	4628      	mov	r0, r5
 8006ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ac4:	f000 f81b 	bl	8006afe <_malloc_usable_size_r>
 8006ac8:	4284      	cmp	r4, r0
 8006aca:	4607      	mov	r7, r0
 8006acc:	d802      	bhi.n	8006ad4 <_realloc_r+0x34>
 8006ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ad2:	d812      	bhi.n	8006afa <_realloc_r+0x5a>
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	4640      	mov	r0, r8
 8006ad8:	f7ff fc36 	bl	8006348 <_malloc_r>
 8006adc:	4605      	mov	r5, r0
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d0ed      	beq.n	8006abe <_realloc_r+0x1e>
 8006ae2:	42bc      	cmp	r4, r7
 8006ae4:	4622      	mov	r2, r4
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	bf28      	it	cs
 8006aea:	463a      	movcs	r2, r7
 8006aec:	f7ff ffca 	bl	8006a84 <memcpy>
 8006af0:	4631      	mov	r1, r6
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff fbbc 	bl	8006270 <_free_r>
 8006af8:	e7e1      	b.n	8006abe <_realloc_r+0x1e>
 8006afa:	4635      	mov	r5, r6
 8006afc:	e7df      	b.n	8006abe <_realloc_r+0x1e>

08006afe <_malloc_usable_size_r>:
 8006afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b02:	1f18      	subs	r0, r3, #4
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	bfbc      	itt	lt
 8006b08:	580b      	ldrlt	r3, [r1, r0]
 8006b0a:	18c0      	addlt	r0, r0, r3
 8006b0c:	4770      	bx	lr
	...

08006b10 <_init>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	bf00      	nop
 8006b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b16:	bc08      	pop	{r3}
 8006b18:	469e      	mov	lr, r3
 8006b1a:	4770      	bx	lr

08006b1c <_fini>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	bf00      	nop
 8006b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b22:	bc08      	pop	{r3}
 8006b24:	469e      	mov	lr, r3
 8006b26:	4770      	bx	lr
