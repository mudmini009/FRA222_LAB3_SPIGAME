
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080052a8  080052a8  000152a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c0  080053c0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080053c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000060  08005428  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005428  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001460c  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000275e  00000000  00000000  000346df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00036e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e75  00000000  00000000  000380b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c3d  00000000  00000000  00038f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001575d  00000000  00000000  0005fb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdde5  00000000  00000000  000752bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053e4  00000000  00000000  001730a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00178488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005290 	.word	0x08005290

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08005290 	.word	0x08005290

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fdc3 	bl	800115a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f82a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 f94a 	bl	8000870 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005dc:	f000 f872 	bl	80006c4 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 80005e0:	f000 f8ba 	bl	8000758 <MX_SPI3_Init>
  MX_TIM3_Init();
 80005e4:	f000 f8f6 	bl	80007d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3); // start timer
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <main+0x54>)
 80005ea:	f002 ff45 	bl	8003478 <HAL_TIM_Base_Start>
  SPITxRx_Setup();
 80005ee:	f000 f9cf 	bl	8000990 <SPITxRx_Setup>
  TikTokGame();
 80005f2:	f000 fa0d 	bl	8000a10 <TikTokGame>
  LEDdisplay();
 80005f6:	f000 fb8f 	bl	8000d18 <LEDdisplay>
  CoinLeftUART();
 80005fa:	f000 fbe3 	bl	8000dc4 <CoinLeftUART>
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000602:	221c      	movs	r2, #28
 8000604:	4907      	ldr	r1, [pc, #28]	; (8000624 <main+0x58>)
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0x5c>)
 8000608:	f003 faf2 	bl	8003bf0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SPITxRx_readIO();
 800060c:	f000 f9d6 	bl	80009bc <SPITxRx_readIO>
	  TikTokGame();
 8000610:	f000 f9fe 	bl	8000a10 <TikTokGame>
	  CoinLeftUART();
 8000614:	f000 fbd6 	bl	8000dc4 <CoinLeftUART>
	  LEDdisplay();
 8000618:	f000 fb7e 	bl	8000d18 <LEDdisplay>
  {
 800061c:	e7f6      	b.n	800060c <main+0x40>
 800061e:	bf00      	nop
 8000620:	20000174 	.word	0x20000174
 8000624:	080052a8 	.word	0x080052a8
 8000628:	2000007c 	.word	0x2000007c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2238      	movs	r2, #56	; 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 f9a4 	bl	8004988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800064e:	2000      	movs	r0, #0
 8000650:	f001 f962 	bl	8001918 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000662:	2302      	movs	r3, #2
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800066a:	2304      	movs	r3, #4
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800066e:	2355      	movs	r3, #85	; 0x55
 8000670:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800067a:	2302      	movs	r3, #2
 800067c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0318 	add.w	r3, r7, #24
 8000682:	4618      	mov	r0, r3
 8000684:	f001 f9fc 	bl	8001a80 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800068e:	f000 fbc9 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2303      	movs	r3, #3
 8000698:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2104      	movs	r1, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 fcfa 	bl	80020a4 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006b6:	f000 fbb5 	bl	8000e24 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006ca:	4a22      	ldr	r2, [pc, #136]	; (8000754 <MX_LPUART1_UART_Init+0x90>)
 80006cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80006ce:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006d0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80006d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000706:	4812      	ldr	r0, [pc, #72]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 8000708:	f003 fa22 	bl	8003b50 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000712:	f000 fb87 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 800071a:	f004 f84b 	bl	80047b4 <HAL_UARTEx_SetTxFifoThreshold>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000724:	f000 fb7e 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 800072c:	f004 f880 	bl	8004830 <HAL_UARTEx_SetRxFifoThreshold>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000736:	f000 fb75 	bl	8000e24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_LPUART1_UART_Init+0x8c>)
 800073c:	f004 f801 	bl	8004742 <HAL_UARTEx_DisableFifoMode>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000746:	f000 fb6d 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000007c 	.word	0x2000007c
 8000754:	40008000 	.word	0x40008000

08000758 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_SPI3_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_SPI3_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_SPI3_Init+0x74>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI3_Init+0x74>)
 8000772:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000776:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI3_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_SPI3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI3_Init+0x74>)
 8000786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI3_Init+0x74>)
 800078e:	2238      	movs	r2, #56	; 0x38
 8000790:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI3_Init+0x74>)
 80007a6:	2207      	movs	r2, #7
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI3_Init+0x74>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_SPI3_Init+0x74>)
 80007b8:	f002 f8de 	bl	8002978 <HAL_SPI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007c2:	f000 fb2f 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000110 	.word	0x20000110
 80007d0:	40003c00 	.word	0x40003c00

080007d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_TIM3_Init+0x94>)
 80007f4:	4a1d      	ldr	r2, [pc, #116]	; (800086c <MX_TIM3_Init+0x98>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16999;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_TIM3_Init+0x94>)
 80007fa:	f244 2267 	movw	r2, #16999	; 0x4267
 80007fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_TIM3_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM3_Init+0x94>)
 8000808:	2263      	movs	r2, #99	; 0x63
 800080a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_TIM3_Init+0x94>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_TIM3_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000818:	4813      	ldr	r0, [pc, #76]	; (8000868 <MX_TIM3_Init+0x94>)
 800081a:	f002 fdd5 	bl	80033c8 <HAL_TIM_Base_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000824:	f000 fafe 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_TIM3_Init+0x94>)
 8000836:	f002 fe8f 	bl	8003558 <HAL_TIM_ConfigClockSource>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000840:	f000 faf0 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_TIM3_Init+0x94>)
 8000852:	f003 f8e7 	bl	8003a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800085c:	f000 fae2 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000174 	.word	0x20000174
 800086c:	40000400 	.word	0x40000400

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <MX_GPIO_Init+0x114>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a3e      	ldr	r2, [pc, #248]	; (8000984 <MX_GPIO_Init+0x114>)
 800088c:	f043 0304 	orr.w	r3, r3, #4
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <MX_GPIO_Init+0x114>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0304 	and.w	r3, r3, #4
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <MX_GPIO_Init+0x114>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a38      	ldr	r2, [pc, #224]	; (8000984 <MX_GPIO_Init+0x114>)
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b36      	ldr	r3, [pc, #216]	; (8000984 <MX_GPIO_Init+0x114>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0320 	and.w	r3, r3, #32
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <MX_GPIO_Init+0x114>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a32      	ldr	r2, [pc, #200]	; (8000984 <MX_GPIO_Init+0x114>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b30      	ldr	r3, [pc, #192]	; (8000984 <MX_GPIO_Init+0x114>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <MX_GPIO_Init+0x114>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <MX_GPIO_Init+0x114>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <MX_GPIO_Init+0x114>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_GPIO_Init+0x114>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a26      	ldr	r2, [pc, #152]	; (8000984 <MX_GPIO_Init+0x114>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_GPIO_Init+0x114>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 ffcb 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	2104      	movs	r1, #4
 800090e:	481e      	ldr	r0, [pc, #120]	; (8000988 <MX_GPIO_Init+0x118>)
 8000910:	f000 ffc6 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800091e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <MX_GPIO_Init+0x11c>)
 800092c:	f000 fe1e 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f000 fe0f 	bl	800156c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800094e:	2304      	movs	r3, #4
 8000950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <MX_GPIO_Init+0x118>)
 8000966:	f000 fe01 	bl	800156c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2028      	movs	r0, #40	; 0x28
 8000970:	f000 fd61 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000974:	2028      	movs	r0, #40	; 0x28
 8000976:	f000 fd78 	bl	800146a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000
 8000988:	48000c00 	.word	0x48000c00
 800098c:	48000800 	.word	0x48000800

08000990 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */

void SPITxRx_Setup()
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
//CS pulse
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000994:	2200      	movs	r2, #0
 8000996:	2104      	movs	r1, #4
 8000998:	4807      	ldr	r0, [pc, #28]	; (80009b8 <SPITxRx_Setup+0x28>)
 800099a:	f000 ff81 	bl	80018a0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 800099e:	2005      	movs	r0, #5
 80009a0:	f000 fc4c 	bl	800123c <HAL_Delay>
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 80009a4:	2201      	movs	r2, #1
 80009a6:	2104      	movs	r1, #4
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <SPITxRx_Setup+0x28>)
 80009aa:	f000 ff79 	bl	80018a0 <HAL_GPIO_WritePin>
HAL_Delay(5);
 80009ae:	2005      	movs	r0, #5
 80009b0:	f000 fc44 	bl	800123c <HAL_Delay>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	48000c00 	.word	0x48000c00

080009bc <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2))
 80009c0:	2104      	movs	r1, #4
 80009c2:	480f      	ldr	r0, [pc, #60]	; (8000a00 <SPITxRx_readIO+0x44>)
 80009c4:	f000 ff54 	bl	8001870 <HAL_GPIO_ReadPin>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d016      	beq.n	80009fc <SPITxRx_readIO+0x40>
{
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80009ce:	2200      	movs	r2, #0
 80009d0:	2104      	movs	r1, #4
 80009d2:	480b      	ldr	r0, [pc, #44]	; (8000a00 <SPITxRx_readIO+0x44>)
 80009d4:	f000 ff64 	bl	80018a0 <HAL_GPIO_WritePin>
SPITx[0] = 0b01000001;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <SPITxRx_readIO+0x48>)
 80009da:	2241      	movs	r2, #65	; 0x41
 80009dc:	701a      	strb	r2, [r3, #0]
SPITx[1] = 0x12;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <SPITxRx_readIO+0x48>)
 80009e0:	2212      	movs	r2, #18
 80009e2:	705a      	strb	r2, [r3, #1]
SPITx[2] = 0;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <SPITxRx_readIO+0x48>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	709a      	strb	r2, [r3, #2]
SPITx[3] = 0;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SPITxRx_readIO+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	70da      	strb	r2, [r3, #3]
HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 80009f0:	2304      	movs	r3, #4
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SPITxRx_readIO+0x4c>)
 80009f4:	4903      	ldr	r1, [pc, #12]	; (8000a04 <SPITxRx_readIO+0x48>)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <SPITxRx_readIO+0x50>)
 80009f8:	f002 f86a 	bl	8002ad0 <HAL_SPI_TransmitReceive_IT>
}
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	48000c00 	.word	0x48000c00
 8000a04:	200001cc 	.word	0x200001cc
 8000a08:	200001c0 	.word	0x200001c0
 8000a0c:	20000110 	.word	0x20000110

08000a10 <TikTokGame>:

void TikTokGame()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	// for my reminder
//	int game_winner=0;//0=no 1=ai 2=human
//	int game_turn=0;//0=player 1=ai
//	int game_left=5;//amount of lamp that has left
//	int game_pick=0;//amount of pick for LED
    if(game_turn == 0) // player turn
 8000a14:	4ba1      	ldr	r3, [pc, #644]	; (8000c9c <TikTokGame+0x28c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f040 811b 	bne.w	8000c54 <TikTokGame+0x244>
    {
    	switch (game_left) {
 8000a1e:	4ba0      	ldr	r3, [pc, #640]	; (8000ca0 <TikTokGame+0x290>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	2b04      	cmp	r3, #4
 8000a26:	f200 8165 	bhi.w	8000cf4 <TikTokGame+0x2e4>
 8000a2a:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <TikTokGame+0x20>)
 8000a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a30:	08000bd1 	.word	0x08000bd1
 8000a34:	08000b4d 	.word	0x08000b4d
 8000a38:	08000ac9 	.word	0x08000ac9
 8000a3c:	08000cf5 	.word	0x08000cf5
 8000a40:	08000a45 	.word	0x08000a45
    	    case 5:
    	        // statements
    	        switch (SPIRx[2]) {
 8000a44:	4b97      	ldr	r3, [pc, #604]	; (8000ca4 <TikTokGame+0x294>)
 8000a46:	789b      	ldrb	r3, [r3, #2]
 8000a48:	3b03      	subs	r3, #3
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d83a      	bhi.n	8000ac4 <TikTokGame+0xb4>
 8000a4e:	a201      	add	r2, pc, #4	; (adr r2, 8000a54 <TikTokGame+0x44>)
 8000a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a54:	08000a9d 	.word	0x08000a9d
 8000a58:	08000ac5 	.word	0x08000ac5
 8000a5c:	08000a83 	.word	0x08000a83
 8000a60:	08000a69 	.word	0x08000a69
 8000a64:	08000ac5 	.word	0x08000ac5
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000a68:	4b8f      	ldr	r3, [pc, #572]	; (8000ca8 <TikTokGame+0x298>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
    	                game_left = 4; // coin left 4
 8000a6e:	4b8c      	ldr	r3, [pc, #560]	; (8000ca0 <TikTokGame+0x290>)
 8000a70:	2204      	movs	r2, #4
 8000a72:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a74:	4b8d      	ldr	r3, [pc, #564]	; (8000cac <TikTokGame+0x29c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a7a:	4b88      	ldr	r3, [pc, #544]	; (8000c9c <TikTokGame+0x28c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
    	                break;
 8000a80:	e021      	b.n	8000ac6 <TikTokGame+0xb6>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000a82:	4b89      	ldr	r3, [pc, #548]	; (8000ca8 <TikTokGame+0x298>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
    	                game_left = 3; // coin left 3
 8000a88:	4b85      	ldr	r3, [pc, #532]	; (8000ca0 <TikTokGame+0x290>)
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000a8e:	4b87      	ldr	r3, [pc, #540]	; (8000cac <TikTokGame+0x29c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000a94:	4b81      	ldr	r3, [pc, #516]	; (8000c9c <TikTokGame+0x28c>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
    	                break;
 8000a9a:	e014      	b.n	8000ac6 <TikTokGame+0xb6>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000a9c:	4b82      	ldr	r3, [pc, #520]	; (8000ca8 <TikTokGame+0x298>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000aa2:	4b7f      	ldr	r3, [pc, #508]	; (8000ca0 <TikTokGame+0x290>)
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000aa8:	4b80      	ldr	r3, [pc, #512]	; (8000cac <TikTokGame+0x29c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000aae:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <TikTokGame+0x28c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab8:	221c      	movs	r2, #28
 8000aba:	497d      	ldr	r1, [pc, #500]	; (8000cb0 <TikTokGame+0x2a0>)
 8000abc:	487d      	ldr	r0, [pc, #500]	; (8000cb4 <TikTokGame+0x2a4>)
 8000abe:	f003 f897 	bl	8003bf0 <HAL_UART_Transmit>
    	                break;
 8000ac2:	e000      	b.n	8000ac6 <TikTokGame+0xb6>
    	            default: // multi press do nothing
    	                break;
 8000ac4:	bf00      	nop
    	        }
    	        break;
 8000ac6:	e115      	b.n	8000cf4 <TikTokGame+0x2e4>
    	    case 3:
    	        // statements
    	        switch (SPIRx[2]) {
 8000ac8:	4b76      	ldr	r3, [pc, #472]	; (8000ca4 <TikTokGame+0x294>)
 8000aca:	789b      	ldrb	r3, [r3, #2]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	d83a      	bhi.n	8000b48 <TikTokGame+0x138>
 8000ad2:	a201      	add	r2, pc, #4	; (adr r2, 8000ad8 <TikTokGame+0xc8>)
 8000ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad8:	08000b21 	.word	0x08000b21
 8000adc:	08000b49 	.word	0x08000b49
 8000ae0:	08000b07 	.word	0x08000b07
 8000ae4:	08000aed 	.word	0x08000aed
 8000ae8:	08000b49 	.word	0x08000b49
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000aec:	4b6e      	ldr	r3, [pc, #440]	; (8000ca8 <TikTokGame+0x298>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	601a      	str	r2, [r3, #0]
    	                game_left = 2; // coin left 2
 8000af2:	4b6b      	ldr	r3, [pc, #428]	; (8000ca0 <TikTokGame+0x290>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000af8:	4b6c      	ldr	r3, [pc, #432]	; (8000cac <TikTokGame+0x29c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000afe:	4b67      	ldr	r3, [pc, #412]	; (8000c9c <TikTokGame+0x28c>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	601a      	str	r2, [r3, #0]
    	                break;
 8000b04:	e021      	b.n	8000b4a <TikTokGame+0x13a>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000b06:	4b68      	ldr	r3, [pc, #416]	; (8000ca8 <TikTokGame+0x298>)
 8000b08:	2202      	movs	r2, #2
 8000b0a:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000b0c:	4b64      	ldr	r3, [pc, #400]	; (8000ca0 <TikTokGame+0x290>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b12:	4b66      	ldr	r3, [pc, #408]	; (8000cac <TikTokGame+0x29c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b18:	4b60      	ldr	r3, [pc, #384]	; (8000c9c <TikTokGame+0x28c>)
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]
    	                break;
 8000b1e:	e014      	b.n	8000b4a <TikTokGame+0x13a>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000b20:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <TikTokGame+0x298>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000b26:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <TikTokGame+0x290>)
 8000b28:	2205      	movs	r2, #5
 8000b2a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b2c:	4b5f      	ldr	r3, [pc, #380]	; (8000cac <TikTokGame+0x29c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000b32:	4b5a      	ldr	r3, [pc, #360]	; (8000c9c <TikTokGame+0x28c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	221c      	movs	r2, #28
 8000b3e:	495c      	ldr	r1, [pc, #368]	; (8000cb0 <TikTokGame+0x2a0>)
 8000b40:	485c      	ldr	r0, [pc, #368]	; (8000cb4 <TikTokGame+0x2a4>)
 8000b42:	f003 f855 	bl	8003bf0 <HAL_UART_Transmit>
    	                break;
 8000b46:	e000      	b.n	8000b4a <TikTokGame+0x13a>
    	            default: // multi press do nothing
    	                break;
 8000b48:	bf00      	nop
    	        }
    	        break;
 8000b4a:	e0d3      	b.n	8000cf4 <TikTokGame+0x2e4>
    	    case 2:
    	        // statements
    	        switch (SPIRx[2]) {
 8000b4c:	4b55      	ldr	r3, [pc, #340]	; (8000ca4 <TikTokGame+0x294>)
 8000b4e:	789b      	ldrb	r3, [r3, #2]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d83a      	bhi.n	8000bcc <TikTokGame+0x1bc>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <TikTokGame+0x14c>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000ba5 	.word	0x08000ba5
 8000b60:	08000bcd 	.word	0x08000bcd
 8000b64:	08000b8b 	.word	0x08000b8b
 8000b68:	08000b71 	.word	0x08000b71
 8000b6c:	08000bcd 	.word	0x08000bcd
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000b70:	4b4d      	ldr	r3, [pc, #308]	; (8000ca8 <TikTokGame+0x298>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
    	                game_left = 1; // coin left 1
 8000b76:	4b4a      	ldr	r3, [pc, #296]	; (8000ca0 <TikTokGame+0x290>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000b7c:	4b4b      	ldr	r3, [pc, #300]	; (8000cac <TikTokGame+0x29c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
    	                game_turn = 1; // next is ai turn
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <TikTokGame+0x28c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
    	                break;
 8000b88:	e021      	b.n	8000bce <TikTokGame+0x1be>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 2; // pick2
 8000b8a:	4b47      	ldr	r3, [pc, #284]	; (8000ca8 <TikTokGame+0x298>)
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000b90:	4b43      	ldr	r3, [pc, #268]	; (8000ca0 <TikTokGame+0x290>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000b96:	4b45      	ldr	r3, [pc, #276]	; (8000cac <TikTokGame+0x29c>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <TikTokGame+0x28c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
    	                break;
 8000ba2:	e014      	b.n	8000bce <TikTokGame+0x1be>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000ba4:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <TikTokGame+0x298>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000baa:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <TikTokGame+0x290>)
 8000bac:	2205      	movs	r2, #5
 8000bae:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <TikTokGame+0x29c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <TikTokGame+0x28c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc0:	221c      	movs	r2, #28
 8000bc2:	493b      	ldr	r1, [pc, #236]	; (8000cb0 <TikTokGame+0x2a0>)
 8000bc4:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <TikTokGame+0x2a4>)
 8000bc6:	f003 f813 	bl	8003bf0 <HAL_UART_Transmit>
    	                break;
 8000bca:	e000      	b.n	8000bce <TikTokGame+0x1be>
    	            default: // multi press do nothing
    	                break;
 8000bcc:	bf00      	nop
    	        }
    	        break;
 8000bce:	e091      	b.n	8000cf4 <TikTokGame+0x2e4>
    	    case 1:
    	        // statements
    	        switch (SPIRx[2]) {
 8000bd0:	4b34      	ldr	r3, [pc, #208]	; (8000ca4 <TikTokGame+0x294>)
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d83a      	bhi.n	8000c50 <TikTokGame+0x240>
 8000bda:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <TikTokGame+0x1d0>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000c29 	.word	0x08000c29
 8000be4:	08000c51 	.word	0x08000c51
 8000be8:	08000c0f 	.word	0x08000c0f
 8000bec:	08000bf5 	.word	0x08000bf5
 8000bf0:	08000c51 	.word	0x08000c51
    	            case 6: // Button 1 press pick 1
    	                game_pick = 1; // pick1
 8000bf4:	4b2c      	ldr	r3, [pc, #176]	; (8000ca8 <TikTokGame+0x298>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 0
 8000bfa:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <TikTokGame+0x290>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <TikTokGame+0x29c>)
 8000c02:	2202      	movs	r2, #2
 8000c04:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000c06:	4b25      	ldr	r3, [pc, #148]	; (8000c9c <TikTokGame+0x28c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
    	                break;
 8000c0c:	e021      	b.n	8000c52 <TikTokGame+0x242>
    	            case 5: // Button 2 press pick 2
    	                game_pick = 1; // force to pick1
 8000c0e:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <TikTokGame+0x298>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
    	                game_left = 0; // coin left 1
 8000c14:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <TikTokGame+0x290>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
    	                game_winner = 2; // human winner
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <TikTokGame+0x29c>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // reset to human
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <TikTokGame+0x28c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
    	                break;
 8000c26:	e014      	b.n	8000c52 <TikTokGame+0x242>
    	            case 7: // Button not press let it loop
    	                break;
    	            case 3: // Button 3 press reset
    	                game_pick = 0; // no pick
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <TikTokGame+0x298>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
    	                game_left = 5; // coin left 5
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <TikTokGame+0x290>)
 8000c30:	2205      	movs	r2, #5
 8000c32:	601a      	str	r2, [r3, #0]
    	                game_winner = 0; // no winner
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <TikTokGame+0x29c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
    	                game_turn = 0; // human turn
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <TikTokGame+0x28c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
    	                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295
 8000c44:	221c      	movs	r2, #28
 8000c46:	491a      	ldr	r1, [pc, #104]	; (8000cb0 <TikTokGame+0x2a0>)
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <TikTokGame+0x2a4>)
 8000c4a:	f002 ffd1 	bl	8003bf0 <HAL_UART_Transmit>
    	                break;
 8000c4e:	e000      	b.n	8000c52 <TikTokGame+0x242>
    	            default: // multi press do nothing
    	                break;
 8000c50:	bf00      	nop
    	        }
    	        break;
 8000c52:	e04f      	b.n	8000cf4 <TikTokGame+0x2e4>
    	}
    	//game_turn = 1;//need to put it inside for if not push
    }
    else // ai turn
    {
        switch (game_left)//amount left for ai to think(fix lol)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <TikTokGame+0x290>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	2b03      	cmp	r3, #3
 8000c5c:	d840      	bhi.n	8000ce0 <TikTokGame+0x2d0>
 8000c5e:	a201      	add	r2, pc, #4	; (adr r2, 8000c64 <TikTokGame+0x254>)
 8000c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c64:	08000ccd 	.word	0x08000ccd
 8000c68:	08000cb9 	.word	0x08000cb9
 8000c6c:	08000c89 	.word	0x08000c89
 8000c70:	08000c75 	.word	0x08000c75
        {
            case 4:
                // statements
                game_pick = 1; // pick1
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <TikTokGame+0x298>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]
                game_left = 3; // coin left 3
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <TikTokGame+0x290>)
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <TikTokGame+0x29c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
                break;
 8000c86:	e02b      	b.n	8000ce0 <TikTokGame+0x2d0>
            case 3:
                // statements
                game_pick = 1; // pick1
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <TikTokGame+0x298>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
                game_left = 2; // coin left 2
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <TikTokGame+0x290>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	601a      	str	r2, [r3, #0]
                game_winner = 0; // no winner
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <TikTokGame+0x29c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
                break;
 8000c9a:	e021      	b.n	8000ce0 <TikTokGame+0x2d0>
 8000c9c:	200001dc 	.word	0x200001dc
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	200001c0 	.word	0x200001c0
 8000ca8:	200001e0 	.word	0x200001e0
 8000cac:	200001d8 	.word	0x200001d8
 8000cb0:	080052a8 	.word	0x080052a8
 8000cb4:	2000007c 	.word	0x2000007c
            case 2:
                // statements
                game_pick = 2; // pick2
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <TikTokGame+0x2f0>)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <TikTokGame+0x2f4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <TikTokGame+0x2f8>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
                break;
 8000cca:	e009      	b.n	8000ce0 <TikTokGame+0x2d0>
            case 1:
                // statements
                game_pick = 1; // pick1
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <TikTokGame+0x2f0>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
                game_left = 0; // coin left 0
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <TikTokGame+0x2f4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
                game_winner = 1; // ai winner
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <TikTokGame+0x2f8>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
                break;
 8000cde:	bf00      	nop
        }
        game_turn = 0;
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <TikTokGame+0x2fc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Your Turn PICK 1 or 2 coins\n", strlen("Your Turn PICK 1 or 2 coins\n"), HAL_MAX_DELAY);
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	221c      	movs	r2, #28
 8000cec:	4908      	ldr	r1, [pc, #32]	; (8000d10 <TikTokGame+0x300>)
 8000cee:	4809      	ldr	r0, [pc, #36]	; (8000d14 <TikTokGame+0x304>)
 8000cf0:	f002 ff7e 	bl	8003bf0 <HAL_UART_Transmit>
    }
    HAL_Delay(200);//delay
 8000cf4:	20c8      	movs	r0, #200	; 0xc8
 8000cf6:	f000 faa1 	bl	800123c <HAL_Delay>
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001e0 	.word	0x200001e0
 8000d04:	20000000 	.word	0x20000000
 8000d08:	200001d8 	.word	0x200001d8
 8000d0c:	200001dc 	.word	0x200001dc
 8000d10:	080052a8 	.word	0x080052a8
 8000d14:	2000007c 	.word	0x2000007c

08000d18 <LEDdisplay>:

void LEDdisplay() {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    // Add your code here to control the LEDs
	switch (game_winner) {
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <LEDdisplay+0x8c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d021      	beq.n	8000d68 <LEDdisplay+0x50>
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	dc3b      	bgt.n	8000da0 <LEDdisplay+0x88>
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d038      	beq.n	8000d9e <LEDdisplay+0x86>
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d000      	beq.n	8000d32 <LEDdisplay+0x1a>
                // Send the message over UART
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
	            break;
	    }
}
 8000d30:	e036      	b.n	8000da0 <LEDdisplay+0x88>
                game_pick = 0; // no pick
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <LEDdisplay+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <LEDdisplay+0x94>)
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <LEDdisplay+0x8c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <LEDdisplay+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"AI Win!! Humanity Lost!\n", strlen("AI Win!! Humanity Lost!\n"), HAL_MAX_DELAY);
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	2218      	movs	r2, #24
 8000d50:	4918      	ldr	r1, [pc, #96]	; (8000db4 <LEDdisplay+0x9c>)
 8000d52:	4819      	ldr	r0, [pc, #100]	; (8000db8 <LEDdisplay+0xa0>)
 8000d54:	f002 ff4c 	bl	8003bf0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	2228      	movs	r2, #40	; 0x28
 8000d5e:	4917      	ldr	r1, [pc, #92]	; (8000dbc <LEDdisplay+0xa4>)
 8000d60:	4815      	ldr	r0, [pc, #84]	; (8000db8 <LEDdisplay+0xa0>)
 8000d62:	f002 ff45 	bl	8003bf0 <HAL_UART_Transmit>
	            break;
 8000d66:	e01b      	b.n	8000da0 <LEDdisplay+0x88>
                game_pick = 0; // no pick
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <LEDdisplay+0x90>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
                game_left = 5; // coin left 5
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <LEDdisplay+0x94>)
 8000d70:	2205      	movs	r2, #5
 8000d72:	601a      	str	r2, [r3, #0]
                game_winner = 0; // RESET
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <LEDdisplay+0x8c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
                game_turn = 0; // human turn
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <LEDdisplay+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Congrats You are winning!!!\n", strlen("Congrats You are winning!!!\n"), HAL_MAX_DELAY);
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	221c      	movs	r2, #28
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LEDdisplay+0xa8>)
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <LEDdisplay+0xa0>)
 8000d8a:	f002 ff31 	bl	8003bf0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&hlpuart1, (uint8_t *)"Coin left is 5. It's your turn to pick.\n", strlen("Coin left is 5. It's your turn to pick.\n"), HAL_MAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	4909      	ldr	r1, [pc, #36]	; (8000dbc <LEDdisplay+0xa4>)
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <LEDdisplay+0xa0>)
 8000d98:	f002 ff2a 	bl	8003bf0 <HAL_UART_Transmit>
	            break;
 8000d9c:	e000      	b.n	8000da0 <LEDdisplay+0x88>
	            break;
 8000d9e:	bf00      	nop
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200001d8 	.word	0x200001d8
 8000da8:	200001e0 	.word	0x200001e0
 8000dac:	20000000 	.word	0x20000000
 8000db0:	200001dc 	.word	0x200001dc
 8000db4:	080052c8 	.word	0x080052c8
 8000db8:	2000007c 	.word	0x2000007c
 8000dbc:	080052e4 	.word	0x080052e4
 8000dc0:	08005310 	.word	0x08005310

08000dc4 <CoinLeftUART>:
void CoinLeftUART() {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
	 char coin_left_message[30]; // Buffer to store the message
	    sprintf(coin_left_message, "Coin left is %d\r\n", game_left); // Use \r\n for proper newline
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <CoinLeftUART+0x34>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	463b      	mov	r3, r7
 8000dd0:	490a      	ldr	r1, [pc, #40]	; (8000dfc <CoinLeftUART+0x38>)
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fdb8 	bl	8004948 <siprintf>
	    HAL_UART_Transmit(&hlpuart1, (uint8_t *)coin_left_message, strlen(coin_left_message), HAL_MAX_DELAY);
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fa20 	bl	8000220 <strlen>
 8000de0:	4603      	mov	r3, r0
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	4639      	mov	r1, r7
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <CoinLeftUART+0x3c>)
 8000dec:	f002 ff00 	bl	8003bf0 <HAL_UART_Transmit>
}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	08005330 	.word	0x08005330
 8000e00:	2000007c 	.word	0x2000007c

08000e04 <HAL_SPI_TxRxCpltCallback>:
//	}
}
}

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2104      	movs	r1, #4
 8000e10:	4803      	ldr	r0, [pc, #12]	; (8000e20 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000e12:	f000 fd45 	bl	80018a0 <HAL_GPIO_WritePin>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	48000c00 	.word	0x48000c00

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_MspInit+0x44>)
 8000e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <HAL_MspInit+0x44>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6613      	str	r3, [r2, #96]	; 0x60
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_MspInit+0x44>)
 8000e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <HAL_MspInit+0x44>)
 8000e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e52:	4a08      	ldr	r2, [pc, #32]	; (8000e74 <HAL_MspInit+0x44>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_MspInit+0x44>)
 8000e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e66:	f000 fdfb 	bl	8001a60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09e      	sub	sp, #120	; 0x78
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2254      	movs	r2, #84	; 0x54
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fd75 	bl	8004988 <memset>
  if(huart->Instance==LPUART1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0xa8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d136      	bne.n	8000f16 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fb11 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec0:	f7ff ffb0 	bl	8000e24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_UART_MspInit+0xac>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f04:	230c      	movs	r3, #12
 8000f06:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f000 fb2b 	bl	800156c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3778      	adds	r7, #120	; 0x78
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40008000 	.word	0x40008000
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <HAL_SPI_MspInit+0x8c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d130      	bne.n	8000fac <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_SPI_MspInit+0x90>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_SPI_MspInit+0x90>)
 8000f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_SPI_MspInit+0x90>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_SPI_MspInit+0x90>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_SPI_MspInit+0x90>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_SPI_MspInit+0x90>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4809      	ldr	r0, [pc, #36]	; (8000fbc <HAL_SPI_MspInit+0x94>)
 8000f98:	f000 fae8 	bl	800156c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2033      	movs	r0, #51	; 0x33
 8000fa2:	f000 fa48 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000fa6:	2033      	movs	r0, #51	; 0x33
 8000fa8:	f000 fa5f 	bl	800146a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40003c00 	.word	0x40003c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800

08000fc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x38>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10b      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_TIM_Base_MspInit+0x3c>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40000400 	.word	0x40000400
 8000ffc:	40021000 	.word	0x40021000

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f8d8 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001058:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800105c:	f000 fc38 	bl	80018d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <SPI3_IRQHandler+0x10>)
 800106a:	f001 fddf 	bl	8002c2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000110 	.word	0x20000110

08001078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <_sbrk+0x5c>)
 8001082:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_sbrk+0x60>)
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <_sbrk+0x64>)
 8001096:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <_sbrk+0x68>)
 8001098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d207      	bcs.n	80010b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a8:	f003 fc76 	bl	8004998 <__errno>
 80010ac:	4603      	mov	r3, r0
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20020000 	.word	0x20020000
 80010d8:	00000400 	.word	0x00000400
 80010dc:	200001e4 	.word	0x200001e4
 80010e0:	20000338 	.word	0x20000338

080010e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <SystemInit+0x20>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a05      	ldr	r2, [pc, #20]	; (8001104 <SystemInit+0x20>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800110a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800110c:	f7ff ffea 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001110:	480c      	ldr	r0, [pc, #48]	; (8001144 <LoopForever+0x6>)
  ldr r1, =_edata
 8001112:	490d      	ldr	r1, [pc, #52]	; (8001148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <LoopForever+0xe>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001128:	4c0a      	ldr	r4, [pc, #40]	; (8001154 <LoopForever+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001136:	f003 fc35 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113a:	f7ff fa47 	bl	80005cc <main>

0800113e <LoopForever>:

LoopForever:
    b LoopForever
 800113e:	e7fe      	b.n	800113e <LoopForever>
  ldr   r0, =_estack
 8001140:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001148:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800114c:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 8001150:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001154:	20000334 	.word	0x20000334

08001158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC1_2_IRQHandler>

0800115a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f95b 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f80e 	bl	800118c <HAL_InitTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e001      	b.n	8001180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800117c:	f7ff fe58 	bl	8000e30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001180:	79fb      	ldrb	r3, [r7, #7]

}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_InitTick+0x68>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d022      	beq.n	80011e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <HAL_InitTick+0x6c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_InitTick+0x68>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80011b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 f966 	bl	8001486 <HAL_SYSTICK_Config>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10f      	bne.n	80011e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	d809      	bhi.n	80011da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c6:	2200      	movs	r2, #0
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	f000 f932 	bl	8001436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_InitTick+0x70>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e007      	b.n	80011ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e004      	b.n	80011ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e001      	b.n	80011ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000000c 	.word	0x2000000c
 80011f8:	20000004 	.word	0x20000004
 80011fc:	20000008 	.word	0x20000008

08001200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_IncTick+0x1c>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_IncTick+0x20>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4413      	add	r3, r2
 800120e:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_IncTick+0x1c>)
 8001210:	6013      	str	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	200001e8 	.word	0x200001e8
 8001220:	2000000c 	.word	0x2000000c

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200001e8 	.word	0x200001e8

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d004      	beq.n	8001260 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_Delay+0x40>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001260:	bf00      	nop
 8001262:	f7ff ffdf 	bl	8001224 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	429a      	cmp	r2, r3
 8001270:	d8f7      	bhi.n	8001262 <HAL_Delay+0x26>
  {
  }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2000000c 	.word	0x2000000c

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff40 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff33 	bl	80012e4 <__NVIC_EnableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ffa4 	bl	80013dc <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d00d      	beq.n	80014d2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2204      	movs	r2, #4
 80014ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e047      	b.n	8001562 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 020e 	bic.w	r2, r2, #14
 80014e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0201 	bic.w	r2, r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001500:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 021f 	and.w	r2, r3, #31
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f202 	lsl.w	r2, r1, r2
 8001514:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800151e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00c      	beq.n	8001542 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001536:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001540:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	4798      	blx	r3
    }
  }
  return status;
 8001562:	7bfb      	ldrb	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800157a:	e15a      	b.n	8001832 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f000 814c 	beq.w	800182c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d005      	beq.n	80015ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d130      	bne.n	800160e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e2:	2201      	movs	r2, #1
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	f003 0201 	and.w	r2, r3, #1
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b03      	cmp	r3, #3
 8001618:	d017      	beq.n	800164a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d123      	bne.n	800169e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	08da      	lsrs	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3208      	adds	r2, #8
 800165e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001662:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	691a      	ldr	r2, [r3, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	6939      	ldr	r1, [r7, #16]
 800169a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0203 	and.w	r2, r3, #3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 80a6 	beq.w	800182c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 80016e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e4:	4a5a      	ldr	r2, [pc, #360]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6613      	str	r3, [r2, #96]	; 0x60
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_GPIO_Init+0x2e4>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016f8:	4a56      	ldr	r2, [pc, #344]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001722:	d01f      	beq.n	8001764 <HAL_GPIO_Init+0x1f8>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <HAL_GPIO_Init+0x2ec>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d019      	beq.n	8001760 <HAL_GPIO_Init+0x1f4>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a4b      	ldr	r2, [pc, #300]	; (800185c <HAL_GPIO_Init+0x2f0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d013      	beq.n	800175c <HAL_GPIO_Init+0x1f0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <HAL_GPIO_Init+0x2f4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d00d      	beq.n	8001758 <HAL_GPIO_Init+0x1ec>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a49      	ldr	r2, [pc, #292]	; (8001864 <HAL_GPIO_Init+0x2f8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d007      	beq.n	8001754 <HAL_GPIO_Init+0x1e8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a48      	ldr	r2, [pc, #288]	; (8001868 <HAL_GPIO_Init+0x2fc>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d101      	bne.n	8001750 <HAL_GPIO_Init+0x1e4>
 800174c:	2305      	movs	r3, #5
 800174e:	e00a      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001750:	2306      	movs	r3, #6
 8001752:	e008      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001754:	2304      	movs	r3, #4
 8001756:	e006      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001758:	2303      	movs	r3, #3
 800175a:	e004      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 800175c:	2302      	movs	r3, #2
 800175e:	e002      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <HAL_GPIO_Init+0x1fa>
 8001764:	2300      	movs	r3, #0
 8001766:	697a      	ldr	r2, [r7, #20]
 8001768:	f002 0203 	and.w	r2, r2, #3
 800176c:	0092      	lsls	r2, r2, #2
 800176e:	4093      	lsls	r3, r2
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001776:	4937      	ldr	r1, [pc, #220]	; (8001854 <HAL_GPIO_Init+0x2e8>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001784:	4b39      	ldr	r3, [pc, #228]	; (800186c <HAL_GPIO_Init+0x300>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a8:	4a30      	ldr	r2, [pc, #192]	; (800186c <HAL_GPIO_Init+0x300>)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_GPIO_Init+0x300>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <HAL_GPIO_Init+0x300>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_GPIO_Init+0x300>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_GPIO_Init+0x300>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_Init+0x300>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_GPIO_Init+0x300>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	f47f ae9d 	bne.w	800157c <HAL_GPIO_Init+0x10>
  }
}
 8001842:	bf00      	nop
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	48000400 	.word	0x48000400
 800185c:	48000800 	.word	0x48000800
 8001860:	48000c00 	.word	0x48000c00
 8001864:	48001000 	.word	0x48001000
 8001868:	48001400 	.word	0x48001400
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
 800188c:	e001      	b.n	8001892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f806 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d141      	bne.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001926:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800192e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001932:	d131      	bne.n	8001998 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001934:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800193a:	4a46      	ldr	r2, [pc, #280]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800194c:	4a41      	ldr	r2, [pc, #260]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2232      	movs	r2, #50	; 0x32
 800195a:	fb02 f303 	mul.w	r3, r2, r3
 800195e:	4a3f      	ldr	r2, [pc, #252]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	0c9b      	lsrs	r3, r3, #18
 8001966:	3301      	adds	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196a:	e002      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3b01      	subs	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d102      	bne.n	8001986 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f2      	bne.n	800196c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001986:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d158      	bne.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e057      	b.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199e:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019a8:	e04d      	b.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b0:	d141      	bne.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019be:	d131      	bne.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019c6:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019d8:	4a1e      	ldr	r2, [pc, #120]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2232      	movs	r2, #50	; 0x32
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	0c9b      	lsrs	r3, r3, #18
 80019f2:	3301      	adds	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f6:	e002      	b.n	80019fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0a:	d102      	bne.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f2      	bne.n	80019f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d112      	bne.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e011      	b.n	8001a48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a34:	e007      	b.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40007000 	.word	0x40007000
 8001a58:	20000004 	.word	0x20000004
 8001a5c:	431bde83 	.word	0x431bde83

08001a60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6e:	6093      	str	r3, [r2, #8]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40007000 	.word	0x40007000

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e2fe      	b.n	8002090 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d075      	beq.n	8001b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9e:	4b97      	ldr	r3, [pc, #604]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa8:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b0c      	cmp	r3, #12
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_OscConfig+0x3e>
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	2b03      	cmp	r3, #3
 8001abc:	d002      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x44>
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b8d      	ldr	r3, [pc, #564]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d05b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e2d9      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x74>
 8001ae6:	4b85      	ldr	r3, [pc, #532]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a84      	ldr	r2, [pc, #528]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b7f      	ldr	r3, [pc, #508]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7e      	ldr	r2, [pc, #504]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a7b      	ldr	r2, [pc, #492]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001b18:	4b78      	ldr	r3, [pc, #480]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a77      	ldr	r2, [pc, #476]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b75      	ldr	r3, [pc, #468]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a74      	ldr	r2, [pc, #464]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fb74 	bl	8001224 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff fb70 	bl	8001224 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e29e      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b52:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fb60 	bl	8001224 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fb5c 	bl	8001224 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e28a      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7a:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0xe8>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d075      	beq.n	8001c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b96:	4b59      	ldr	r3, [pc, #356]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba0:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	d102      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x136>
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d002      	beq.n	8001bbc <HAL_RCC_OscConfig+0x13c>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d11f      	bne.n	8001bfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bbc:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x154>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e25d      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	4946      	ldr	r1, [pc, #280]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001be8:	4b45      	ldr	r3, [pc, #276]	; (8001d00 <HAL_RCC_OscConfig+0x280>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff facd 	bl	800118c <HAL_InitTick>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d043      	beq.n	8001c80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e249      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d023      	beq.n	8001c4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3c      	ldr	r2, [pc, #240]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fb08 	bl	8001224 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff fb04 	bl	8001224 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e232      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	492d      	ldr	r1, [pc, #180]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
 8001c4a:	e01a      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fae4 	bl	8001224 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff fae0 	bl	8001224 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e20e      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c72:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1e0>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d041      	beq.n	8001d12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01c      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9c:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fabd 	bl	8001224 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff fab9 	bl	8001224 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e1e7      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0ef      	beq.n	8001cae <HAL_RCC_OscConfig+0x22e>
 8001cce:	e020      	b.n	8001d12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff faa0 	bl	8001224 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce6:	e00d      	b.n	8001d04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fa9c 	bl	8001224 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d906      	bls.n	8001d04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1ca      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
 8001cfa:	bf00      	nop
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d04:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ea      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80a6 	beq.w	8001e6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d24:	4b84      	ldr	r3, [pc, #528]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2b4>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x2b6>
 8001d34:	2300      	movs	r3, #0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00d      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b7f      	ldr	r3, [pc, #508]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a7e      	ldr	r2, [pc, #504]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b7c      	ldr	r3, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d56:	4b79      	ldr	r3, [pc, #484]	; (8001f3c <HAL_RCC_OscConfig+0x4bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x4bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a75      	ldr	r2, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x4bc>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fa59 	bl	8001224 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fa55 	bl	8001224 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e183      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d88:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x4bc>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <HAL_RCC_OscConfig+0x32e>
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da2:	4a65      	ldr	r2, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dac:	e024      	b.n	8001df8 <HAL_RCC_OscConfig+0x378>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d110      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x358>
 8001db6:	4b60      	ldr	r3, [pc, #384]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	4a5e      	ldr	r2, [pc, #376]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc6:	4b5c      	ldr	r3, [pc, #368]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	4a5a      	ldr	r2, [pc, #360]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd6:	e00f      	b.n	8001df8 <HAL_RCC_OscConfig+0x378>
 8001dd8:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	4a56      	ldr	r2, [pc, #344]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a52      	ldr	r2, [pc, #328]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d016      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e00:	f7ff fa10 	bl	8001224 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e08:	f7ff fa0c 	bl	8001224 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e138      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ed      	beq.n	8001e08 <HAL_RCC_OscConfig+0x388>
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f9f9 	bl	8001224 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff f9f5 	bl	8001224 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e121      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ed      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e5a:	7ffb      	ldrb	r3, [r7, #31]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d03c      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01c      	beq.n	8001eba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e86:	4a2c      	ldr	r2, [pc, #176]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff f9c8 	bl	8001224 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e98:	f7ff f9c4 	bl	8001224 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0f2      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eaa:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ef      	beq.n	8001e98 <HAL_RCC_OscConfig+0x418>
 8001eb8:	e01b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff f9ab 	bl	8001224 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed2:	f7ff f9a7 	bl	8001224 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0d5      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ef      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80c9 	beq.w	800208e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	f000 8083 	beq.w	8002010 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d15e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_RCC_OscConfig+0x4b8>)
 8001f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff f981 	bl	8001224 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f24:	e00c      	b.n	8001f40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff f97d 	bl	8001224 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d905      	bls.n	8001f40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e0ab      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f40:	4b55      	ldr	r3, [pc, #340]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ec      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4c:	4b52      	ldr	r3, [pc, #328]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <HAL_RCC_OscConfig+0x61c>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6a11      	ldr	r1, [r2, #32]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f5c:	3a01      	subs	r2, #1
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	4311      	orrs	r1, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f66:	0212      	lsls	r2, r2, #8
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f6e:	0852      	lsrs	r2, r2, #1
 8001f70:	3a01      	subs	r2, #1
 8001f72:	0552      	lsls	r2, r2, #21
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f7a:	0852      	lsrs	r2, r2, #1
 8001f7c:	3a01      	subs	r2, #1
 8001f7e:	0652      	lsls	r2, r2, #25
 8001f80:	4311      	orrs	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f86:	06d2      	lsls	r2, r2, #27
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	4943      	ldr	r1, [pc, #268]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a40      	ldr	r2, [pc, #256]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4a3d      	ldr	r2, [pc, #244]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7ff f93c 	bl	8001224 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff f938 	bl	8001224 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e066      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x530>
 8001fce:	e05e      	b.n	800208e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a30      	ldr	r2, [pc, #192]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7ff f922 	bl	8001224 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f91e 	bl	8001224 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e04c      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff6:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002002:	4b25      	ldr	r3, [pc, #148]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	4924      	ldr	r1, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_RCC_OscConfig+0x620>)
 800200a:	4013      	ands	r3, r2
 800200c:	60cb      	str	r3, [r1, #12]
 800200e:	e03e      	b.n	800208e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69db      	ldr	r3, [r3, #28]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e039      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800201c:	4b1e      	ldr	r3, [pc, #120]	; (8002098 <HAL_RCC_OscConfig+0x618>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d12c      	bne.n	800208a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	3b01      	subs	r3, #1
 800203c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d123      	bne.n	800208a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800204e:	429a      	cmp	r2, r3
 8002050:	d11b      	bne.n	800208a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800205e:	429a      	cmp	r2, r3
 8002060:	d113      	bne.n	800208a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	085b      	lsrs	r3, r3, #1
 800206e:	3b01      	subs	r3, #1
 8002070:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d109      	bne.n	800208a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	019f800c 	.word	0x019f800c
 80020a0:	feeefffc 	.word	0xfeeefffc

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e11e      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b8e      	ldr	r3, [pc, #568]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	498c      	ldr	r1, [pc, #560]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e106      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d073      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d129      	bne.n	8002154 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0f4      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002110:	f000 f99e 	bl	8002450 <RCC_GetSysClockFreqFromPLLSource>
 8002114:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_ClockConfig+0x268>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d93f      	bls.n	800219e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800211e:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002132:	2b00      	cmp	r3, #0
 8002134:	d033      	beq.n	800219e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d12f      	bne.n	800219e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800213e:	4b72      	ldr	r3, [pc, #456]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002146:	4a70      	ldr	r2, [pc, #448]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	617b      	str	r3, [r7, #20]
 8002152:	e024      	b.n	800219e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d107      	bne.n	800216c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215c:	4b6a      	ldr	r3, [pc, #424]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0c6      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0be      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800217c:	f000 f8ce 	bl	800231c <HAL_RCC_GetSysClockFreq>
 8002180:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4a61      	ldr	r2, [pc, #388]	; (800230c <HAL_RCC_ClockConfig+0x268>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d909      	bls.n	800219e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002192:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b5a      	ldr	r3, [pc, #360]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4957      	ldr	r1, [pc, #348]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b0:	f7ff f838 	bl	8001224 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff f834 	bl	8001224 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e095      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d023      	beq.n	8002234 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b43      	ldr	r3, [pc, #268]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a42      	ldr	r2, [pc, #264]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002202:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d007      	beq.n	8002220 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002218:	4a3b      	ldr	r2, [pc, #236]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800221a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800221e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4936      	ldr	r1, [pc, #216]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800222e:	4313      	orrs	r3, r2
 8002230:	608b      	str	r3, [r1, #8]
 8002232:	e008      	b.n	8002246 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b80      	cmp	r3, #128	; 0x80
 8002238:	d105      	bne.n	8002246 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a32      	ldr	r2, [pc, #200]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002244:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002246:	4b2f      	ldr	r3, [pc, #188]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d21d      	bcs.n	8002290 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 020f 	bic.w	r2, r3, #15
 800225c:	4929      	ldr	r1, [pc, #164]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002264:	f7fe ffde 	bl	8001224 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe ffda 	bl	8001224 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e03b      	b.n	80022fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d1ed      	bne.n	800226c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	4917      	ldr	r1, [pc, #92]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d009      	beq.n	80022ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	490f      	ldr	r1, [pc, #60]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ce:	f000 f825 	bl	800231c <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	490c      	ldr	r1, [pc, #48]	; (8002310 <HAL_RCC_ClockConfig+0x26c>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x270>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_ClockConfig+0x274>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe ff4a 	bl	800118c <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40022000 	.word	0x40022000
 8002308:	40021000 	.word	0x40021000
 800230c:	04c4b400 	.word	0x04c4b400
 8002310:	08005344 	.word	0x08005344
 8002314:	20000004 	.word	0x20000004
 8002318:	20000008 	.word	0x20000008

0800231c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d102      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e047      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d102      	bne.n	8002346 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	e03e      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002346:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d136      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3301      	adds	r3, #1
 8002368:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d10c      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002370:	4a1a      	ldr	r2, [pc, #104]	; (80023dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a16      	ldr	r2, [pc, #88]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800237a:	68d2      	ldr	r2, [r2, #12]
 800237c:	0a12      	lsrs	r2, r2, #8
 800237e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
      break;
 8002388:	e00c      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002392:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	0a12      	lsrs	r2, r2, #8
 8002398:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
      break;
 80023a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	0e5b      	lsrs	r3, r3, #25
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	3301      	adds	r3, #1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	e001      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023c4:	693b      	ldr	r3, [r7, #16]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	00f42400 	.word	0x00f42400
 80023dc:	016e3600 	.word	0x016e3600

080023e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e4:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000004 	.word	0x20000004

080023f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023fc:	f7ff fff0 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4904      	ldr	r1, [pc, #16]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	f003 031f 	and.w	r3, r3, #31
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	08005354 	.word	0x08005354

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002428:	f7ff ffda 	bl	80023e0 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0adb      	lsrs	r3, r3, #11
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4904      	ldr	r1, [pc, #16]	; (800244c <HAL_RCC_GetPCLK2Freq+0x28>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	08005354 	.word	0x08005354

08002450 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002456:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3301      	adds	r3, #1
 800246c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d10c      	bne.n	800248e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002474:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800247e:	68d2      	ldr	r2, [r2, #12]
 8002480:	0a12      	lsrs	r2, r2, #8
 8002482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
    break;
 800248c:	e00c      	b.n	80024a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002498:	68d2      	ldr	r2, [r2, #12]
 800249a:	0a12      	lsrs	r2, r2, #8
 800249c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a0:	fb02 f303 	mul.w	r3, r2, r3
 80024a4:	617b      	str	r3, [r7, #20]
    break;
 80024a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	0e5b      	lsrs	r3, r3, #25
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40021000 	.word	0x40021000
 80024d4:	016e3600 	.word	0x016e3600
 80024d8:	00f42400 	.word	0x00f42400

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e4:	2300      	movs	r3, #0
 80024e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8098 	beq.w	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b40      	ldr	r3, [pc, #256]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	4a3f      	ldr	r2, [pc, #252]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6593      	str	r3, [r2, #88]	; 0x58
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002526:	4b3a      	ldr	r3, [pc, #232]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a39      	ldr	r2, [pc, #228]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002532:	f7fe fe77 	bl	8001224 <HAL_GetTick>
 8002536:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002538:	e009      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253a:	f7fe fe73 	bl	8001224 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	74fb      	strb	r3, [r7, #19]
        break;
 800254c:	e005      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ef      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d159      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01e      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	d019      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002586:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002588:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	4a1f      	ldr	r2, [pc, #124]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a1b      	ldr	r2, [pc, #108]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fe33 	bl	8001224 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c0:	e00b      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7fe fe2f 	bl	8001224 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d902      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	74fb      	strb	r3, [r7, #19]
            break;
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0ec      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10b      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002604:	e008      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	74bb      	strb	r3, [r7, #18]
 800260a:	e005      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002618:	7c7b      	ldrb	r3, [r7, #17]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800261e:	4ba7      	ldr	r3, [pc, #668]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	4aa6      	ldr	r2, [pc, #664]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002628:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002636:	4ba1      	ldr	r3, [pc, #644]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263c:	f023 0203 	bic.w	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	499d      	ldr	r1, [pc, #628]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00a      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002658:	4b98      	ldr	r3, [pc, #608]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265e:	f023 020c 	bic.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4995      	ldr	r1, [pc, #596]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800267a:	4b90      	ldr	r3, [pc, #576]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002680:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	498c      	ldr	r1, [pc, #560]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269c:	4b87      	ldr	r3, [pc, #540]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	4984      	ldr	r1, [pc, #528]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026be:	4b7f      	ldr	r3, [pc, #508]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	497b      	ldr	r1, [pc, #492]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00a      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026e0:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4973      	ldr	r1, [pc, #460]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002702:	4b6e      	ldr	r3, [pc, #440]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	496a      	ldr	r1, [pc, #424]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002724:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4962      	ldr	r1, [pc, #392]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002746:	4b5d      	ldr	r3, [pc, #372]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	4959      	ldr	r1, [pc, #356]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002768:	4b54      	ldr	r3, [pc, #336]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800276e:	f023 0203 	bic.w	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	4951      	ldr	r1, [pc, #324]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800278a:	4b4c      	ldr	r3, [pc, #304]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	4948      	ldr	r1, [pc, #288]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4940      	ldr	r1, [pc, #256]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027ca:	d105      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027cc:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a3a      	ldr	r2, [pc, #232]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027e4:	4b35      	ldr	r3, [pc, #212]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	4932      	ldr	r1, [pc, #200]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002802:	d105      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002804:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a2c      	ldr	r2, [pc, #176]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d015      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	4924      	ldr	r1, [pc, #144]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800283a:	d105      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d019      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4908      	ldr	r1, [pc, #32]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028aa:	d109      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a02      	ldr	r2, [pc, #8]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	60d3      	str	r3, [r2, #12]
 80028b8:	e002      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028cc:	4b29      	ldr	r3, [pc, #164]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4926      	ldr	r1, [pc, #152]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ea:	d105      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	4918      	ldr	r1, [pc, #96]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d105      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a12      	ldr	r2, [pc, #72]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800292a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800293c:	4b0d      	ldr	r3, [pc, #52]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800293e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002942:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	490a      	ldr	r1, [pc, #40]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295a:	d105      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800295c:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a04      	ldr	r2, [pc, #16]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002966:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002968:	7cbb      	ldrb	r3, [r7, #18]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e09d      	b.n	8002ac6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b00      	cmp	r3, #0
 8002990:	d108      	bne.n	80029a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800299a:	d009      	beq.n	80029b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	61da      	str	r2, [r3, #28]
 80029a2:	e005      	b.n	80029b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe faac 	bl	8000f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029f0:	d902      	bls.n	80029f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	e002      	b.n	80029fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a06:	d007      	beq.n	8002a18 <HAL_SPI_Init+0xa0>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a10:	d002      	beq.n	8002a18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5a:	ea42 0103 	orr.w	r1, r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	0c1b      	lsrs	r3, r3, #16
 8002a74:	f003 0204 	and.w	r2, r3, #4
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a94:	ea42 0103 	orr.w	r1, r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ab4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ae8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002af0:	7dbb      	ldrb	r3, [r7, #22]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d00d      	beq.n	8002b12 <HAL_SPI_TransmitReceive_IT+0x42>
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002afc:	d106      	bne.n	8002b0c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_SPI_TransmitReceive_IT+0x3c>
 8002b06:	7dbb      	ldrb	r3, [r7, #22]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b10:	e07d      	b.n	8002c0e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_SPI_TransmitReceive_IT+0x54>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_SPI_TransmitReceive_IT+0x54>
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b28:	e071      	b.n	8002c0e <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_SPI_TransmitReceive_IT+0x68>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e06b      	b.n	8002c10 <HAL_SPI_TransmitReceive_IT+0x140>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d003      	beq.n	8002b54 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	887a      	ldrh	r2, [r7, #2]
 8002b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	887a      	ldrh	r2, [r7, #2]
 8002b7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b8a:	d906      	bls.n	8002b9a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002b90:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50
 8002b98:	e005      	b.n	8002ba6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002b9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <HAL_SPI_TransmitReceive_IT+0x158>)
 8002ba4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bae:	d802      	bhi.n	8002bb6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d908      	bls.n	8002bc8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	e007      	b.n	8002bd8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be2:	2b40      	cmp	r3, #64	; 0x40
 8002be4:	d007      	beq.n	8002bf6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bf4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002c0c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	08002fb7 	.word	0x08002fb7
 8002c20:	0800301d 	.word	0x0800301d
 8002c24:	08002e67 	.word	0x08002e67
 8002c28:	08002f25 	.word	0x08002f25

08002c2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10e      	bne.n	8002c6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
    return;
 8002c6a:	e0ce      	b.n	8002e0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_SPI_IRQHandler+0x5e>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	4798      	blx	r3
    return;
 8002c88:	e0bf      	b.n	8002e0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <HAL_SPI_IRQHandler+0x7e>
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80b0 	beq.w	8002e0a <HAL_SPI_IRQHandler+0x1de>
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80aa 	beq.w	8002e0a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d023      	beq.n	8002d08 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d011      	beq.n	8002cf0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	e00b      	b.n	8002d08 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
        return;
 8002d06:	e080      	b.n	8002e0a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d014      	beq.n	8002d3c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00c      	beq.n	8002d60 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d4a:	f043 0208 	orr.w	r2, r3, #8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d04f      	beq.n	8002e08 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d76:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d104      	bne.n	8002d94 <HAL_SPI_IRQHandler+0x168>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d034      	beq.n	8002dfe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0203 	bic.w	r2, r2, #3
 8002da2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d011      	beq.n	8002dd0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_SPI_IRQHandler+0x1e4>)
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fb70 	bl	800149e <HAL_DMA_Abort_IT>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d016      	beq.n	8002e06 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <HAL_SPI_IRQHandler+0x1e4>)
 8002dde:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fb5a 	bl	800149e <HAL_DMA_Abort_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002dfc:	e003      	b.n	8002e06 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f812 	bl	8002e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e04:	e000      	b.n	8002e08 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002e06:	bf00      	nop
    return;
 8002e08:	bf00      	nop
  }
}
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	08002e3d 	.word	0x08002e3d

08002e14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff ffe5 	bl	8002e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d923      	bls.n	8002ec2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	b292      	uxth	r2, r2
 8002e86:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3b02      	subs	r3, #2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d11f      	bne.n	8002ef0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	e016      	b.n	8002ef0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f103 020c 	add.w	r2, r3, #12
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	7812      	ldrb	r2, [r2, #0]
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10f      	bne.n	8002f1c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f0a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa14 	bl	8003344 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d912      	bls.n	8002f5c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	881a      	ldrh	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	1c9a      	adds	r2, r3, #2
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b02      	subs	r3, #2
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f5a:	e012      	b.n	8002f82 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	330c      	adds	r3, #12
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d110      	bne.n	8002fae <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f9cb 	bl	8003344 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	1c9a      	adds	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10f      	bne.n	8003014 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003002:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d102      	bne.n	8003014 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f998 	bl	8003344 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	881a      	ldrh	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800304c:	b29b      	uxth	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d110      	bne.n	8003074 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003060:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f968 	bl	8003344 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	603b      	str	r3, [r7, #0]
 8003088:	4613      	mov	r3, r2
 800308a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800308c:	f7fe f8ca 	bl	8001224 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	1a9b      	subs	r3, r3, r2
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	4413      	add	r3, r2
 800309a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800309c:	f7fe f8c2 	bl	8001224 <HAL_GetTick>
 80030a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030a2:	4b39      	ldr	r3, [pc, #228]	; (8003188 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	0d1b      	lsrs	r3, r3, #20
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030b2:	e054      	b.n	800315e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ba:	d050      	beq.n	800315e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030bc:	f7fe f8b2 	bl	8001224 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d902      	bls.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d13d      	bne.n	800314e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ea:	d111      	bne.n	8003110 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030f4:	d004      	beq.n	8003100 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030fe:	d107      	bne.n	8003110 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800310e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003118:	d10f      	bne.n	800313a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003138:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e017      	b.n	800317e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3b01      	subs	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4013      	ands	r3, r2
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	bf0c      	ite	eq
 800316e:	2301      	moveq	r3, #1
 8003170:	2300      	movne	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	429a      	cmp	r2, r3
 800317a:	d19b      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000004 	.word	0x20000004

0800318c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800319e:	f7fe f841 	bl	8001224 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80031ae:	f7fe f839 	bl	8001224 <HAL_GetTick>
 80031b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031bc:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00da      	lsls	r2, r3, #3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	0d1b      	lsrs	r3, r3, #20
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031d4:	e060      	b.n	8003298 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031dc:	d107      	bne.n	80031ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d050      	beq.n	8003298 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031f6:	f7fe f815 	bl	8001224 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	429a      	cmp	r2, r3
 8003204:	d902      	bls.n	800320c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d13d      	bne.n	8003288 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800321a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003224:	d111      	bne.n	800324a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322e:	d004      	beq.n	800323a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d107      	bne.n	800324a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003248:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003252:	d10f      	bne.n	8003274 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003272:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e010      	b.n	80032aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	3b01      	subs	r3, #1
 8003296:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d196      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000004 	.word	0x20000004

080032b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7ff ff5b 	bl	800318c <SPI_WaitFifoStateUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	f043 0220 	orr.w	r2, r3, #32
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e027      	b.n	800333c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	2180      	movs	r1, #128	; 0x80
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff fec0 	bl	800307c <SPI_WaitFlagStateUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d007      	beq.n	8003312 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e014      	b.n	800333c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7ff ff34 	bl	800318c <SPI_WaitFifoStateUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800332e:	f043 0220 	orr.w	r2, r3, #32
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e000      	b.n	800333c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800334c:	f7fd ff6a 	bl	8001224 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0220 	bic.w	r2, r2, #32
 8003360:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	2164      	movs	r1, #100	; 0x64
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ffa6 	bl	80032b8 <SPI_EndRxTxTransaction>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	2b00      	cmp	r3, #0
 8003384:	d115      	bne.n	80033b2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b04      	cmp	r3, #4
 8003390:	d107      	bne.n	80033a2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fd3a 	bl	8002e14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80033a0:	e00e      	b.n	80033c0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fd fd2a 	bl	8000e04 <HAL_SPI_TxRxCpltCallback>
}
 80033b0:	e006      	b.n	80033c0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fd34 	bl	8002e28 <HAL_SPI_ErrorCallback>
}
 80033c0:	bf00      	nop
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e049      	b.n	800346e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fde6 	bl	8000fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 f9bc 	bl	8003784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b01      	cmp	r3, #1
 800348a:	d001      	beq.n	8003490 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e04c      	b.n	800352a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <HAL_TIM_Base_Start+0xc0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d022      	beq.n	80034e8 <HAL_TIM_Base_Start+0x70>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d01d      	beq.n	80034e8 <HAL_TIM_Base_Start+0x70>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <HAL_TIM_Base_Start+0xc4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d018      	beq.n	80034e8 <HAL_TIM_Base_Start+0x70>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a21      	ldr	r2, [pc, #132]	; (8003540 <HAL_TIM_Base_Start+0xc8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d013      	beq.n	80034e8 <HAL_TIM_Base_Start+0x70>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_TIM_Base_Start+0xcc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00e      	beq.n	80034e8 <HAL_TIM_Base_Start+0x70>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <HAL_TIM_Base_Start+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_TIM_Base_Start+0x70>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_TIM_Base_Start+0xd4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_Base_Start+0x70>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <HAL_TIM_Base_Start+0xd8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d115      	bne.n	8003514 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_TIM_Base_Start+0xdc>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d015      	beq.n	8003526 <HAL_TIM_Base_Start+0xae>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003500:	d011      	beq.n	8003526 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003512:	e008      	b.n	8003526 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e000      	b.n	8003528 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003526:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40012c00 	.word	0x40012c00
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40013400 	.word	0x40013400
 800354c:	40014000 	.word	0x40014000
 8003550:	40015000 	.word	0x40015000
 8003554:	00010007 	.word	0x00010007

08003558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_TIM_ConfigClockSource+0x1c>
 8003570:	2302      	movs	r3, #2
 8003572:	e0f6      	b.n	8003762 <HAL_TIM_ConfigClockSource+0x20a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a6f      	ldr	r2, [pc, #444]	; (800376c <HAL_TIM_ConfigClockSource+0x214>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	f000 80c1 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 80035b4:	4a6d      	ldr	r2, [pc, #436]	; (800376c <HAL_TIM_ConfigClockSource+0x214>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	f200 80c6 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 80035bc:	4a6c      	ldr	r2, [pc, #432]	; (8003770 <HAL_TIM_ConfigClockSource+0x218>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	f000 80b9 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 80035c4:	4a6a      	ldr	r2, [pc, #424]	; (8003770 <HAL_TIM_ConfigClockSource+0x218>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	f200 80be 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 80035cc:	4a69      	ldr	r2, [pc, #420]	; (8003774 <HAL_TIM_ConfigClockSource+0x21c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f000 80b1 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 80035d4:	4a67      	ldr	r2, [pc, #412]	; (8003774 <HAL_TIM_ConfigClockSource+0x21c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f200 80b6 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 80035dc:	4a66      	ldr	r2, [pc, #408]	; (8003778 <HAL_TIM_ConfigClockSource+0x220>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f000 80a9 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 80035e4:	4a64      	ldr	r2, [pc, #400]	; (8003778 <HAL_TIM_ConfigClockSource+0x220>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f200 80ae 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 80035ec:	4a63      	ldr	r2, [pc, #396]	; (800377c <HAL_TIM_ConfigClockSource+0x224>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f000 80a1 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 80035f4:	4a61      	ldr	r2, [pc, #388]	; (800377c <HAL_TIM_ConfigClockSource+0x224>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f200 80a6 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 80035fc:	4a60      	ldr	r2, [pc, #384]	; (8003780 <HAL_TIM_ConfigClockSource+0x228>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f000 8099 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 8003604:	4a5e      	ldr	r2, [pc, #376]	; (8003780 <HAL_TIM_ConfigClockSource+0x228>)
 8003606:	4293      	cmp	r3, r2
 8003608:	f200 809e 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 800360c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003610:	f000 8091 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 8003614:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003618:	f200 8096 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 800361c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003620:	f000 8089 	beq.w	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	f200 808e 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 800362c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003630:	d03e      	beq.n	80036b0 <HAL_TIM_ConfigClockSource+0x158>
 8003632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003636:	f200 8087 	bhi.w	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 800363a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800363e:	f000 8086 	beq.w	800374e <HAL_TIM_ConfigClockSource+0x1f6>
 8003642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003646:	d87f      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 8003648:	2b70      	cmp	r3, #112	; 0x70
 800364a:	d01a      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x12a>
 800364c:	2b70      	cmp	r3, #112	; 0x70
 800364e:	d87b      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 8003650:	2b60      	cmp	r3, #96	; 0x60
 8003652:	d050      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x19e>
 8003654:	2b60      	cmp	r3, #96	; 0x60
 8003656:	d877      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 8003658:	2b50      	cmp	r3, #80	; 0x50
 800365a:	d03c      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x17e>
 800365c:	2b50      	cmp	r3, #80	; 0x50
 800365e:	d873      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d058      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x1be>
 8003664:	2b40      	cmp	r3, #64	; 0x40
 8003666:	d86f      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 8003668:	2b30      	cmp	r3, #48	; 0x30
 800366a:	d064      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 800366c:	2b30      	cmp	r3, #48	; 0x30
 800366e:	d86b      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 8003670:	2b20      	cmp	r3, #32
 8003672:	d060      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 8003674:	2b20      	cmp	r3, #32
 8003676:	d867      	bhi.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
 8003678:	2b00      	cmp	r3, #0
 800367a:	d05c      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 800367c:	2b10      	cmp	r3, #16
 800367e:	d05a      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x1de>
 8003680:	e062      	b.n	8003748 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003692:	f000 f9a7 	bl	80039e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	609a      	str	r2, [r3, #8]
      break;
 80036ae:	e04f      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036c0:	f000 f990 	bl	80039e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036d2:	609a      	str	r2, [r3, #8]
      break;
 80036d4:	e03c      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	461a      	mov	r2, r3
 80036e4:	f000 f902 	bl	80038ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2150      	movs	r1, #80	; 0x50
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f95b 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 80036f4:	e02c      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003702:	461a      	mov	r2, r3
 8003704:	f000 f921 	bl	800394a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2160      	movs	r1, #96	; 0x60
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f94b 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 8003714:	e01c      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003722:	461a      	mov	r2, r3
 8003724:	f000 f8e2 	bl	80038ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2140      	movs	r1, #64	; 0x40
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f93b 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 8003734:	e00c      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4619      	mov	r1, r3
 8003740:	4610      	mov	r0, r2
 8003742:	f000 f932 	bl	80039aa <TIM_ITRx_SetConfig>
      break;
 8003746:	e003      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      break;
 800374c:	e000      	b.n	8003750 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800374e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	00100070 	.word	0x00100070
 8003770:	00100060 	.word	0x00100060
 8003774:	00100050 	.word	0x00100050
 8003778:	00100040 	.word	0x00100040
 800377c:	00100030 	.word	0x00100030
 8003780:	00100020 	.word	0x00100020

08003784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a4c      	ldr	r2, [pc, #304]	; (80038c8 <TIM_Base_SetConfig+0x144>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d017      	beq.n	80037cc <TIM_Base_SetConfig+0x48>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a2:	d013      	beq.n	80037cc <TIM_Base_SetConfig+0x48>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a49      	ldr	r2, [pc, #292]	; (80038cc <TIM_Base_SetConfig+0x148>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00f      	beq.n	80037cc <TIM_Base_SetConfig+0x48>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <TIM_Base_SetConfig+0x14c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00b      	beq.n	80037cc <TIM_Base_SetConfig+0x48>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a47      	ldr	r2, [pc, #284]	; (80038d4 <TIM_Base_SetConfig+0x150>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <TIM_Base_SetConfig+0x48>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a46      	ldr	r2, [pc, #280]	; (80038d8 <TIM_Base_SetConfig+0x154>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d003      	beq.n	80037cc <TIM_Base_SetConfig+0x48>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a45      	ldr	r2, [pc, #276]	; (80038dc <TIM_Base_SetConfig+0x158>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d108      	bne.n	80037de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a39      	ldr	r2, [pc, #228]	; (80038c8 <TIM_Base_SetConfig+0x144>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d023      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ec:	d01f      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a36      	ldr	r2, [pc, #216]	; (80038cc <TIM_Base_SetConfig+0x148>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01b      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a35      	ldr	r2, [pc, #212]	; (80038d0 <TIM_Base_SetConfig+0x14c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d017      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <TIM_Base_SetConfig+0x150>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a33      	ldr	r2, [pc, #204]	; (80038d8 <TIM_Base_SetConfig+0x154>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00f      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <TIM_Base_SetConfig+0x15c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00b      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a32      	ldr	r2, [pc, #200]	; (80038e4 <TIM_Base_SetConfig+0x160>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d007      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <TIM_Base_SetConfig+0x164>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d003      	beq.n	800382e <TIM_Base_SetConfig+0xaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <TIM_Base_SetConfig+0x158>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d108      	bne.n	8003840 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <TIM_Base_SetConfig+0x144>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <TIM_Base_SetConfig+0x110>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a1a      	ldr	r2, [pc, #104]	; (80038d8 <TIM_Base_SetConfig+0x154>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00f      	beq.n	8003894 <TIM_Base_SetConfig+0x110>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <TIM_Base_SetConfig+0x15c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00b      	beq.n	8003894 <TIM_Base_SetConfig+0x110>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <TIM_Base_SetConfig+0x160>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d007      	beq.n	8003894 <TIM_Base_SetConfig+0x110>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <TIM_Base_SetConfig+0x164>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_Base_SetConfig+0x110>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a13      	ldr	r2, [pc, #76]	; (80038dc <TIM_Base_SetConfig+0x158>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d103      	bne.n	800389c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]
  }
}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40012c00 	.word	0x40012c00
 80038cc:	40000400 	.word	0x40000400
 80038d0:	40000800 	.word	0x40000800
 80038d4:	40000c00 	.word	0x40000c00
 80038d8:	40013400 	.word	0x40013400
 80038dc:	40015000 	.word	0x40015000
 80038e0:	40014000 	.word	0x40014000
 80038e4:	40014400 	.word	0x40014400
 80038e8:	40014800 	.word	0x40014800

080038ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f023 0201 	bic.w	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f023 030a 	bic.w	r3, r3, #10
 8003928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800394a:	b480      	push	{r7}
 800394c:	b087      	sub	sp, #28
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f023 0210 	bic.w	r2, r3, #16
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	031b      	lsls	r3, r3, #12
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	4313      	orrs	r3, r2
 8003990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f043 0307 	orr.w	r3, r3, #7
 80039d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	609a      	str	r2, [r3, #8]
}
 80039d8:	bf00      	nop
 80039da:	3714      	adds	r7, #20
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	021a      	lsls	r2, r3, #8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	609a      	str	r2, [r3, #8]
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e074      	b.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a33      	ldr	r2, [pc, #204]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a31      	ldr	r2, [pc, #196]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d022      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abc:	d01d      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d018      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	; (8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1c      	ldr	r2, [pc, #112]	; (8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00e      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d009      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a18      	ldr	r2, [pc, #96]	; (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d004      	beq.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a11      	ldr	r2, [pc, #68]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10c      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	40013400 	.word	0x40013400
 8003b3c:	40015000 	.word	0x40015000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e042      	b.n	8003be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fd f97f 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2224      	movs	r2, #36	; 0x24
 8003b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fbb2 	bl	8004304 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f8b3 	bl	8003d0c <UART_SetConfig>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e01b      	b.n	8003be8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fc31 	bl	8004448 <UART_CheckIdleState>
 8003be6:	4603      	mov	r3, r0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d17b      	bne.n	8003d02 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_UART_Transmit+0x26>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e074      	b.n	8003d04 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2221      	movs	r2, #33	; 0x21
 8003c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c2a:	f7fd fafb 	bl	8001224 <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d108      	bne.n	8003c5c <HAL_UART_Transmit+0x6c>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e003      	b.n	8003c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c64:	e030      	b.n	8003cc8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2180      	movs	r1, #128	; 0x80
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fc93 	bl	800459c <UART_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e03d      	b.n	8003d04 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	e007      	b.n	8003cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1c8      	bne.n	8003c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2140      	movs	r1, #64	; 0x40
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 fc5c 	bl	800459c <UART_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e006      	b.n	8003d04 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e000      	b.n	8003d04 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
  }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3720      	adds	r7, #32
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b08c      	sub	sp, #48	; 0x30
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4baa      	ldr	r3, [pc, #680]	; (8003fe4 <UART_SetConfig+0x2d8>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d44:	430b      	orrs	r3, r1
 8003d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a9f      	ldr	r2, [pc, #636]	; (8003fe8 <UART_SetConfig+0x2dc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d74:	4313      	orrs	r3, r2
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f023 010f 	bic.w	r1, r3, #15
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a90      	ldr	r2, [pc, #576]	; (8003fec <UART_SetConfig+0x2e0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d125      	bne.n	8003dfc <UART_SetConfig+0xf0>
 8003db0:	4b8f      	ldr	r3, [pc, #572]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d81a      	bhi.n	8003df4 <UART_SetConfig+0xe8>
 8003dbe:	a201      	add	r2, pc, #4	; (adr r2, 8003dc4 <UART_SetConfig+0xb8>)
 8003dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc4:	08003dd5 	.word	0x08003dd5
 8003dc8:	08003de5 	.word	0x08003de5
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dda:	e116      	b.n	800400a <UART_SetConfig+0x2fe>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e112      	b.n	800400a <UART_SetConfig+0x2fe>
 8003de4:	2304      	movs	r3, #4
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e10e      	b.n	800400a <UART_SetConfig+0x2fe>
 8003dec:	2308      	movs	r3, #8
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df2:	e10a      	b.n	800400a <UART_SetConfig+0x2fe>
 8003df4:	2310      	movs	r3, #16
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfa:	e106      	b.n	800400a <UART_SetConfig+0x2fe>
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <UART_SetConfig+0x2e8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d138      	bne.n	8003e78 <UART_SetConfig+0x16c>
 8003e06:	4b7a      	ldr	r3, [pc, #488]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	d82d      	bhi.n	8003e70 <UART_SetConfig+0x164>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x110>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e71 	.word	0x08003e71
 8003e24:	08003e71 	.word	0x08003e71
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e61 	.word	0x08003e61
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e59 	.word	0x08003e59
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e71 	.word	0x08003e71
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e56:	e0d8      	b.n	800400a <UART_SetConfig+0x2fe>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	e0d4      	b.n	800400a <UART_SetConfig+0x2fe>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e66:	e0d0      	b.n	800400a <UART_SetConfig+0x2fe>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e6e:	e0cc      	b.n	800400a <UART_SetConfig+0x2fe>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e76:	e0c8      	b.n	800400a <UART_SetConfig+0x2fe>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a5e      	ldr	r2, [pc, #376]	; (8003ff8 <UART_SetConfig+0x2ec>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d125      	bne.n	8003ece <UART_SetConfig+0x1c2>
 8003e82:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e8c:	2b30      	cmp	r3, #48	; 0x30
 8003e8e:	d016      	beq.n	8003ebe <UART_SetConfig+0x1b2>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d818      	bhi.n	8003ec6 <UART_SetConfig+0x1ba>
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d00a      	beq.n	8003eae <UART_SetConfig+0x1a2>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d814      	bhi.n	8003ec6 <UART_SetConfig+0x1ba>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <UART_SetConfig+0x19a>
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d008      	beq.n	8003eb6 <UART_SetConfig+0x1aa>
 8003ea4:	e00f      	b.n	8003ec6 <UART_SetConfig+0x1ba>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eac:	e0ad      	b.n	800400a <UART_SetConfig+0x2fe>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb4:	e0a9      	b.n	800400a <UART_SetConfig+0x2fe>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebc:	e0a5      	b.n	800400a <UART_SetConfig+0x2fe>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec4:	e0a1      	b.n	800400a <UART_SetConfig+0x2fe>
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ecc:	e09d      	b.n	800400a <UART_SetConfig+0x2fe>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a4a      	ldr	r2, [pc, #296]	; (8003ffc <UART_SetConfig+0x2f0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d125      	bne.n	8003f24 <UART_SetConfig+0x218>
 8003ed8:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee4:	d016      	beq.n	8003f14 <UART_SetConfig+0x208>
 8003ee6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ee8:	d818      	bhi.n	8003f1c <UART_SetConfig+0x210>
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d00a      	beq.n	8003f04 <UART_SetConfig+0x1f8>
 8003eee:	2b80      	cmp	r3, #128	; 0x80
 8003ef0:	d814      	bhi.n	8003f1c <UART_SetConfig+0x210>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <UART_SetConfig+0x1f0>
 8003ef6:	2b40      	cmp	r3, #64	; 0x40
 8003ef8:	d008      	beq.n	8003f0c <UART_SetConfig+0x200>
 8003efa:	e00f      	b.n	8003f1c <UART_SetConfig+0x210>
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f02:	e082      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f04:	2302      	movs	r3, #2
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0a:	e07e      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f12:	e07a      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f14:	2308      	movs	r3, #8
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1a:	e076      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f22:	e072      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a35      	ldr	r2, [pc, #212]	; (8004000 <UART_SetConfig+0x2f4>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12a      	bne.n	8003f84 <UART_SetConfig+0x278>
 8003f2e:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3c:	d01a      	beq.n	8003f74 <UART_SetConfig+0x268>
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d81b      	bhi.n	8003f7c <UART_SetConfig+0x270>
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f48:	d00c      	beq.n	8003f64 <UART_SetConfig+0x258>
 8003f4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4e:	d815      	bhi.n	8003f7c <UART_SetConfig+0x270>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <UART_SetConfig+0x250>
 8003f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f58:	d008      	beq.n	8003f6c <UART_SetConfig+0x260>
 8003f5a:	e00f      	b.n	8003f7c <UART_SetConfig+0x270>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f62:	e052      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6a:	e04e      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f72:	e04a      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	e046      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f82:	e042      	b.n	800400a <UART_SetConfig+0x2fe>
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <UART_SetConfig+0x2dc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d13a      	bne.n	8004004 <UART_SetConfig+0x2f8>
 8003f8e:	4b18      	ldr	r3, [pc, #96]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f9c:	d01a      	beq.n	8003fd4 <UART_SetConfig+0x2c8>
 8003f9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa2:	d81b      	bhi.n	8003fdc <UART_SetConfig+0x2d0>
 8003fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa8:	d00c      	beq.n	8003fc4 <UART_SetConfig+0x2b8>
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d815      	bhi.n	8003fdc <UART_SetConfig+0x2d0>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <UART_SetConfig+0x2b0>
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d008      	beq.n	8003fcc <UART_SetConfig+0x2c0>
 8003fba:	e00f      	b.n	8003fdc <UART_SetConfig+0x2d0>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fc2:	e022      	b.n	800400a <UART_SetConfig+0x2fe>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e01e      	b.n	800400a <UART_SetConfig+0x2fe>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e01a      	b.n	800400a <UART_SetConfig+0x2fe>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e016      	b.n	800400a <UART_SetConfig+0x2fe>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe2:	e012      	b.n	800400a <UART_SetConfig+0x2fe>
 8003fe4:	cfff69f3 	.word	0xcfff69f3
 8003fe8:	40008000 	.word	0x40008000
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004800 	.word	0x40004800
 8003ffc:	40004c00 	.word	0x40004c00
 8004000:	40005000 	.word	0x40005000
 8004004:	2310      	movs	r3, #16
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4aae      	ldr	r2, [pc, #696]	; (80042c8 <UART_SetConfig+0x5bc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	f040 8097 	bne.w	8004144 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800401a:	2b08      	cmp	r3, #8
 800401c:	d823      	bhi.n	8004066 <UART_SetConfig+0x35a>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x318>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004049 	.word	0x08004049
 8004028:	08004067 	.word	0x08004067
 800402c:	08004051 	.word	0x08004051
 8004030:	08004067 	.word	0x08004067
 8004034:	08004057 	.word	0x08004057
 8004038:	08004067 	.word	0x08004067
 800403c:	08004067 	.word	0x08004067
 8004040:	08004067 	.word	0x08004067
 8004044:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fe f9d6 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 800404c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800404e:	e010      	b.n	8004072 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b9e      	ldr	r3, [pc, #632]	; (80042cc <UART_SetConfig+0x5c0>)
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004054:	e00d      	b.n	8004072 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe f961 	bl	800231c <HAL_RCC_GetSysClockFreq>
 800405a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800405c:	e009      	b.n	8004072 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004064:	e005      	b.n	8004072 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8130 	beq.w	80042da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	4a94      	ldr	r2, [pc, #592]	; (80042d0 <UART_SetConfig+0x5c4>)
 8004080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004084:	461a      	mov	r2, r3
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	fbb3 f3f2 	udiv	r3, r3, r2
 800408c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	429a      	cmp	r2, r3
 800409c:	d305      	bcc.n	80040aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d903      	bls.n	80040b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040b0:	e113      	b.n	80042da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	2200      	movs	r2, #0
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	60fa      	str	r2, [r7, #12]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	4a84      	ldr	r2, [pc, #528]	; (80042d0 <UART_SetConfig+0x5c4>)
 80040c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2200      	movs	r2, #0
 80040c8:	603b      	str	r3, [r7, #0]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040d4:	f7fc f8fc 	bl	80002d0 <__aeabi_uldivmod>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	020b      	lsls	r3, r1, #8
 80040ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040ee:	0202      	lsls	r2, r0, #8
 80040f0:	6979      	ldr	r1, [r7, #20]
 80040f2:	6849      	ldr	r1, [r1, #4]
 80040f4:	0849      	lsrs	r1, r1, #1
 80040f6:	2000      	movs	r0, #0
 80040f8:	460c      	mov	r4, r1
 80040fa:	4605      	mov	r5, r0
 80040fc:	eb12 0804 	adds.w	r8, r2, r4
 8004100:	eb43 0905 	adc.w	r9, r3, r5
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	469a      	mov	sl, r3
 800410c:	4693      	mov	fp, r2
 800410e:	4652      	mov	r2, sl
 8004110:	465b      	mov	r3, fp
 8004112:	4640      	mov	r0, r8
 8004114:	4649      	mov	r1, r9
 8004116:	f7fc f8db 	bl	80002d0 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4613      	mov	r3, r2
 8004120:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004128:	d308      	bcc.n	800413c <UART_SetConfig+0x430>
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004130:	d204      	bcs.n	800413c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	60da      	str	r2, [r3, #12]
 800413a:	e0ce      	b.n	80042da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004142:	e0ca      	b.n	80042da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	d166      	bne.n	800421c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800414e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004152:	2b08      	cmp	r3, #8
 8004154:	d827      	bhi.n	80041a6 <UART_SetConfig+0x49a>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x450>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004181 	.word	0x08004181
 8004160:	08004189 	.word	0x08004189
 8004164:	08004191 	.word	0x08004191
 8004168:	080041a7 	.word	0x080041a7
 800416c:	08004197 	.word	0x08004197
 8004170:	080041a7 	.word	0x080041a7
 8004174:	080041a7 	.word	0x080041a7
 8004178:	080041a7 	.word	0x080041a7
 800417c:	0800419f 	.word	0x0800419f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004180:	f7fe f93a 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004186:	e014      	b.n	80041b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004188:	f7fe f94c 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 800418c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800418e:	e010      	b.n	80041b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b4e      	ldr	r3, [pc, #312]	; (80042cc <UART_SetConfig+0x5c0>)
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004194:	e00d      	b.n	80041b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fe f8c1 	bl	800231c <HAL_RCC_GetSysClockFreq>
 800419a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800419c:	e009      	b.n	80041b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041a4:	e005      	b.n	80041b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8090 	beq.w	80042da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	4a44      	ldr	r2, [pc, #272]	; (80042d0 <UART_SetConfig+0x5c4>)
 80041c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041c4:	461a      	mov	r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041cc:	005a      	lsls	r2, r3, #1
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	441a      	add	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2b0f      	cmp	r3, #15
 80041e4:	d916      	bls.n	8004214 <UART_SetConfig+0x508>
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d212      	bcs.n	8004214 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f023 030f 	bic.w	r3, r3, #15
 80041f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	b29a      	uxth	r2, r3
 8004204:	8bfb      	ldrh	r3, [r7, #30]
 8004206:	4313      	orrs	r3, r2
 8004208:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	8bfa      	ldrh	r2, [r7, #30]
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	e062      	b.n	80042da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800421a:	e05e      	b.n	80042da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800421c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004220:	2b08      	cmp	r3, #8
 8004222:	d828      	bhi.n	8004276 <UART_SetConfig+0x56a>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x520>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004251 	.word	0x08004251
 8004230:	08004259 	.word	0x08004259
 8004234:	08004261 	.word	0x08004261
 8004238:	08004277 	.word	0x08004277
 800423c:	08004267 	.word	0x08004267
 8004240:	08004277 	.word	0x08004277
 8004244:	08004277 	.word	0x08004277
 8004248:	08004277 	.word	0x08004277
 800424c:	0800426f 	.word	0x0800426f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe f8d2 	bl	80023f8 <HAL_RCC_GetPCLK1Freq>
 8004254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004256:	e014      	b.n	8004282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004258:	f7fe f8e4 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800425e:	e010      	b.n	8004282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <UART_SetConfig+0x5c0>)
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004264:	e00d      	b.n	8004282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004266:	f7fe f859 	bl	800231c <HAL_RCC_GetSysClockFreq>
 800426a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800426c:	e009      	b.n	8004282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800426e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004274:	e005      	b.n	8004282 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004280:	bf00      	nop
    }

    if (pclk != 0U)
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	2b00      	cmp	r3, #0
 8004286:	d028      	beq.n	80042da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	4a10      	ldr	r2, [pc, #64]	; (80042d0 <UART_SetConfig+0x5c4>)
 800428e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004292:	461a      	mov	r2, r3
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	fbb3 f2f2 	udiv	r2, r3, r2
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	441a      	add	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	2b0f      	cmp	r3, #15
 80042b0:	d910      	bls.n	80042d4 <UART_SetConfig+0x5c8>
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b8:	d20c      	bcs.n	80042d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	b29a      	uxth	r2, r3
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60da      	str	r2, [r3, #12]
 80042c4:	e009      	b.n	80042da <UART_SetConfig+0x5ce>
 80042c6:	bf00      	nop
 80042c8:	40008000 	.word	0x40008000
 80042cc:	00f42400 	.word	0x00f42400
 80042d0:	0800535c 	.word	0x0800535c
      }
      else
      {
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2201      	movs	r2, #1
 80042de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2200      	movs	r2, #0
 80042ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2200      	movs	r2, #0
 80042f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3730      	adds	r7, #48	; 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01a      	beq.n	800441a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004402:	d10a      	bne.n	800441a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	605a      	str	r2, [r3, #4]
  }
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b098      	sub	sp, #96	; 0x60
 800444c:	af02      	add	r7, sp, #8
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004458:	f7fc fee4 	bl	8001224 <HAL_GetTick>
 800445c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b08      	cmp	r3, #8
 800446a:	d12f      	bne.n	80044cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800446c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004474:	2200      	movs	r2, #0
 8004476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f88e 	bl	800459c <UART_WaitOnFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d022      	beq.n	80044cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449a:	653b      	str	r3, [r7, #80]	; 0x50
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e063      	b.n	8004594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d149      	bne.n	800456e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	2200      	movs	r2, #0
 80044e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f857 	bl	800459c <UART_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d03c      	beq.n	800456e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	623b      	str	r3, [r7, #32]
   return(result);
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004512:	633b      	str	r3, [r7, #48]	; 0x30
 8004514:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e6      	bne.n	80044f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	60fb      	str	r3, [r7, #12]
   return(result);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	64bb      	str	r3, [r7, #72]	; 0x48
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004546:	61fa      	str	r2, [r7, #28]
 8004548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	69b9      	ldr	r1, [r7, #24]
 800454c:	69fa      	ldr	r2, [r7, #28]
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	617b      	str	r3, [r7, #20]
   return(result);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e012      	b.n	8004594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3758      	adds	r7, #88	; 0x58
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ac:	e04f      	b.n	800464e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b4:	d04b      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b6:	f7fc fe35 	bl	8001224 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d302      	bcc.n	80045cc <UART_WaitOnFlagUntilTimeout+0x30>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e04e      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d037      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d034      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xb2>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d031      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d110      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2208      	movs	r2, #8
 80045fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f838 	bl	8004676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2208      	movs	r2, #8
 800460a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e029      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004628:	d111      	bne.n	800464e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 f81e 	bl	8004676 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e00f      	b.n	800466e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	429a      	cmp	r2, r3
 800465c:	bf0c      	ite	eq
 800465e:	2301      	moveq	r3, #1
 8004660:	2300      	movne	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	429a      	cmp	r2, r3
 800466a:	d0a0      	beq.n	80045ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004676:	b480      	push	{r7}
 8004678:	b095      	sub	sp, #84	; 0x54
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469c:	643b      	str	r3, [r7, #64]	; 0x40
 800469e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a4:	e841 2300 	strex	r3, r2, [r1]
 80046a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e6      	bne.n	800467e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3308      	adds	r3, #8
 80046b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	f023 0301 	bic.w	r3, r3, #1
 80046ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3308      	adds	r3, #8
 80046d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e3      	bne.n	80046b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d118      	bne.n	8004722 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0310 	bic.w	r3, r3, #16
 8004704:	647b      	str	r3, [r7, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	461a      	mov	r2, r3
 800470c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	613b      	str	r3, [r7, #16]
   return(result);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e6      	bne.n	80046f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004736:	bf00      	nop
 8004738:	3754      	adds	r7, #84	; 0x54
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004742:	b480      	push	{r7}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_UARTEx_DisableFifoMode+0x16>
 8004754:	2302      	movs	r3, #2
 8004756:	e027      	b.n	80047a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2224      	movs	r2, #36	; 0x24
 8004764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004786:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e02d      	b.n	8004828 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f84f 	bl	80048ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004844:	2302      	movs	r3, #2
 8004846:	e02d      	b.n	80048a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	; 0x24
 8004854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f811 	bl	80048ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048cc:	e031      	b.n	8004932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ce:	2308      	movs	r3, #8
 80048d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048d2:	2308      	movs	r3, #8
 80048d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	0e5b      	lsrs	r3, r3, #25
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	0f5b      	lsrs	r3, r3, #29
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	7b3a      	ldrb	r2, [r7, #12]
 80048fa:	4911      	ldr	r1, [pc, #68]	; (8004940 <UARTEx_SetNbDataToProcess+0x94>)
 80048fc:	5c8a      	ldrb	r2, [r1, r2]
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004902:	7b3a      	ldrb	r2, [r7, #12]
 8004904:	490f      	ldr	r1, [pc, #60]	; (8004944 <UARTEx_SetNbDataToProcess+0x98>)
 8004906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004908:	fb93 f3f2 	sdiv	r3, r3, r2
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	7b7a      	ldrb	r2, [r7, #13]
 8004918:	4909      	ldr	r1, [pc, #36]	; (8004940 <UARTEx_SetNbDataToProcess+0x94>)
 800491a:	5c8a      	ldrb	r2, [r1, r2]
 800491c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004920:	7b7a      	ldrb	r2, [r7, #13]
 8004922:	4908      	ldr	r1, [pc, #32]	; (8004944 <UARTEx_SetNbDataToProcess+0x98>)
 8004924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004926:	fb93 f3f2 	sdiv	r3, r3, r2
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	08005374 	.word	0x08005374
 8004944:	0800537c 	.word	0x0800537c

08004948 <siprintf>:
 8004948:	b40e      	push	{r1, r2, r3}
 800494a:	b500      	push	{lr}
 800494c:	b09c      	sub	sp, #112	; 0x70
 800494e:	ab1d      	add	r3, sp, #116	; 0x74
 8004950:	9002      	str	r0, [sp, #8]
 8004952:	9006      	str	r0, [sp, #24]
 8004954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004958:	4809      	ldr	r0, [pc, #36]	; (8004980 <siprintf+0x38>)
 800495a:	9107      	str	r1, [sp, #28]
 800495c:	9104      	str	r1, [sp, #16]
 800495e:	4909      	ldr	r1, [pc, #36]	; (8004984 <siprintf+0x3c>)
 8004960:	f853 2b04 	ldr.w	r2, [r3], #4
 8004964:	9105      	str	r1, [sp, #20]
 8004966:	6800      	ldr	r0, [r0, #0]
 8004968:	9301      	str	r3, [sp, #4]
 800496a:	a902      	add	r1, sp, #8
 800496c:	f000 f992 	bl	8004c94 <_svfiprintf_r>
 8004970:	9b02      	ldr	r3, [sp, #8]
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	b01c      	add	sp, #112	; 0x70
 8004978:	f85d eb04 	ldr.w	lr, [sp], #4
 800497c:	b003      	add	sp, #12
 800497e:	4770      	bx	lr
 8004980:	2000005c 	.word	0x2000005c
 8004984:	ffff0208 	.word	0xffff0208

08004988 <memset>:
 8004988:	4402      	add	r2, r0
 800498a:	4603      	mov	r3, r0
 800498c:	4293      	cmp	r3, r2
 800498e:	d100      	bne.n	8004992 <memset+0xa>
 8004990:	4770      	bx	lr
 8004992:	f803 1b01 	strb.w	r1, [r3], #1
 8004996:	e7f9      	b.n	800498c <memset+0x4>

08004998 <__errno>:
 8004998:	4b01      	ldr	r3, [pc, #4]	; (80049a0 <__errno+0x8>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	2000005c 	.word	0x2000005c

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f000 fc6a 	bl	8005290 <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	080053c0 	.word	0x080053c0
 80049e0:	080053c0 	.word	0x080053c0
 80049e4:	080053c0 	.word	0x080053c0
 80049e8:	080053c4 	.word	0x080053c4

080049ec <__retarget_lock_acquire_recursive>:
 80049ec:	4770      	bx	lr

080049ee <__retarget_lock_release_recursive>:
 80049ee:	4770      	bx	lr

080049f0 <_free_r>:
 80049f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049f2:	2900      	cmp	r1, #0
 80049f4:	d044      	beq.n	8004a80 <_free_r+0x90>
 80049f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fa:	9001      	str	r0, [sp, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004a02:	bfb8      	it	lt
 8004a04:	18e4      	addlt	r4, r4, r3
 8004a06:	f000 f8df 	bl	8004bc8 <__malloc_lock>
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <_free_r+0x94>)
 8004a0c:	9801      	ldr	r0, [sp, #4]
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	b933      	cbnz	r3, 8004a20 <_free_r+0x30>
 8004a12:	6063      	str	r3, [r4, #4]
 8004a14:	6014      	str	r4, [r2, #0]
 8004a16:	b003      	add	sp, #12
 8004a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a1c:	f000 b8da 	b.w	8004bd4 <__malloc_unlock>
 8004a20:	42a3      	cmp	r3, r4
 8004a22:	d908      	bls.n	8004a36 <_free_r+0x46>
 8004a24:	6825      	ldr	r5, [r4, #0]
 8004a26:	1961      	adds	r1, r4, r5
 8004a28:	428b      	cmp	r3, r1
 8004a2a:	bf01      	itttt	eq
 8004a2c:	6819      	ldreq	r1, [r3, #0]
 8004a2e:	685b      	ldreq	r3, [r3, #4]
 8004a30:	1949      	addeq	r1, r1, r5
 8004a32:	6021      	streq	r1, [r4, #0]
 8004a34:	e7ed      	b.n	8004a12 <_free_r+0x22>
 8004a36:	461a      	mov	r2, r3
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	b10b      	cbz	r3, 8004a40 <_free_r+0x50>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d9fa      	bls.n	8004a36 <_free_r+0x46>
 8004a40:	6811      	ldr	r1, [r2, #0]
 8004a42:	1855      	adds	r5, r2, r1
 8004a44:	42a5      	cmp	r5, r4
 8004a46:	d10b      	bne.n	8004a60 <_free_r+0x70>
 8004a48:	6824      	ldr	r4, [r4, #0]
 8004a4a:	4421      	add	r1, r4
 8004a4c:	1854      	adds	r4, r2, r1
 8004a4e:	42a3      	cmp	r3, r4
 8004a50:	6011      	str	r1, [r2, #0]
 8004a52:	d1e0      	bne.n	8004a16 <_free_r+0x26>
 8004a54:	681c      	ldr	r4, [r3, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	6053      	str	r3, [r2, #4]
 8004a5a:	440c      	add	r4, r1
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	e7da      	b.n	8004a16 <_free_r+0x26>
 8004a60:	d902      	bls.n	8004a68 <_free_r+0x78>
 8004a62:	230c      	movs	r3, #12
 8004a64:	6003      	str	r3, [r0, #0]
 8004a66:	e7d6      	b.n	8004a16 <_free_r+0x26>
 8004a68:	6825      	ldr	r5, [r4, #0]
 8004a6a:	1961      	adds	r1, r4, r5
 8004a6c:	428b      	cmp	r3, r1
 8004a6e:	bf04      	itt	eq
 8004a70:	6819      	ldreq	r1, [r3, #0]
 8004a72:	685b      	ldreq	r3, [r3, #4]
 8004a74:	6063      	str	r3, [r4, #4]
 8004a76:	bf04      	itt	eq
 8004a78:	1949      	addeq	r1, r1, r5
 8004a7a:	6021      	streq	r1, [r4, #0]
 8004a7c:	6054      	str	r4, [r2, #4]
 8004a7e:	e7ca      	b.n	8004a16 <_free_r+0x26>
 8004a80:	b003      	add	sp, #12
 8004a82:	bd30      	pop	{r4, r5, pc}
 8004a84:	2000032c 	.word	0x2000032c

08004a88 <sbrk_aligned>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	4e0e      	ldr	r6, [pc, #56]	; (8004ac4 <sbrk_aligned+0x3c>)
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	6831      	ldr	r1, [r6, #0]
 8004a90:	4605      	mov	r5, r0
 8004a92:	b911      	cbnz	r1, 8004a9a <sbrk_aligned+0x12>
 8004a94:	f000 fba6 	bl	80051e4 <_sbrk_r>
 8004a98:	6030      	str	r0, [r6, #0]
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 fba1 	bl	80051e4 <_sbrk_r>
 8004aa2:	1c43      	adds	r3, r0, #1
 8004aa4:	d00a      	beq.n	8004abc <sbrk_aligned+0x34>
 8004aa6:	1cc4      	adds	r4, r0, #3
 8004aa8:	f024 0403 	bic.w	r4, r4, #3
 8004aac:	42a0      	cmp	r0, r4
 8004aae:	d007      	beq.n	8004ac0 <sbrk_aligned+0x38>
 8004ab0:	1a21      	subs	r1, r4, r0
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 fb96 	bl	80051e4 <_sbrk_r>
 8004ab8:	3001      	adds	r0, #1
 8004aba:	d101      	bne.n	8004ac0 <sbrk_aligned+0x38>
 8004abc:	f04f 34ff 	mov.w	r4, #4294967295
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	20000330 	.word	0x20000330

08004ac8 <_malloc_r>:
 8004ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004acc:	1ccd      	adds	r5, r1, #3
 8004ace:	f025 0503 	bic.w	r5, r5, #3
 8004ad2:	3508      	adds	r5, #8
 8004ad4:	2d0c      	cmp	r5, #12
 8004ad6:	bf38      	it	cc
 8004ad8:	250c      	movcc	r5, #12
 8004ada:	2d00      	cmp	r5, #0
 8004adc:	4607      	mov	r7, r0
 8004ade:	db01      	blt.n	8004ae4 <_malloc_r+0x1c>
 8004ae0:	42a9      	cmp	r1, r5
 8004ae2:	d905      	bls.n	8004af0 <_malloc_r+0x28>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	603b      	str	r3, [r7, #0]
 8004ae8:	2600      	movs	r6, #0
 8004aea:	4630      	mov	r0, r6
 8004aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004af0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004bc4 <_malloc_r+0xfc>
 8004af4:	f000 f868 	bl	8004bc8 <__malloc_lock>
 8004af8:	f8d8 3000 	ldr.w	r3, [r8]
 8004afc:	461c      	mov	r4, r3
 8004afe:	bb5c      	cbnz	r4, 8004b58 <_malloc_r+0x90>
 8004b00:	4629      	mov	r1, r5
 8004b02:	4638      	mov	r0, r7
 8004b04:	f7ff ffc0 	bl	8004a88 <sbrk_aligned>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	d155      	bne.n	8004bba <_malloc_r+0xf2>
 8004b0e:	f8d8 4000 	ldr.w	r4, [r8]
 8004b12:	4626      	mov	r6, r4
 8004b14:	2e00      	cmp	r6, #0
 8004b16:	d145      	bne.n	8004ba4 <_malloc_r+0xdc>
 8004b18:	2c00      	cmp	r4, #0
 8004b1a:	d048      	beq.n	8004bae <_malloc_r+0xe6>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4638      	mov	r0, r7
 8004b22:	eb04 0903 	add.w	r9, r4, r3
 8004b26:	f000 fb5d 	bl	80051e4 <_sbrk_r>
 8004b2a:	4581      	cmp	r9, r0
 8004b2c:	d13f      	bne.n	8004bae <_malloc_r+0xe6>
 8004b2e:	6821      	ldr	r1, [r4, #0]
 8004b30:	1a6d      	subs	r5, r5, r1
 8004b32:	4629      	mov	r1, r5
 8004b34:	4638      	mov	r0, r7
 8004b36:	f7ff ffa7 	bl	8004a88 <sbrk_aligned>
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d037      	beq.n	8004bae <_malloc_r+0xe6>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	442b      	add	r3, r5
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	f8d8 3000 	ldr.w	r3, [r8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d038      	beq.n	8004bbe <_malloc_r+0xf6>
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	42a2      	cmp	r2, r4
 8004b50:	d12b      	bne.n	8004baa <_malloc_r+0xe2>
 8004b52:	2200      	movs	r2, #0
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	e00f      	b.n	8004b78 <_malloc_r+0xb0>
 8004b58:	6822      	ldr	r2, [r4, #0]
 8004b5a:	1b52      	subs	r2, r2, r5
 8004b5c:	d41f      	bmi.n	8004b9e <_malloc_r+0xd6>
 8004b5e:	2a0b      	cmp	r2, #11
 8004b60:	d917      	bls.n	8004b92 <_malloc_r+0xca>
 8004b62:	1961      	adds	r1, r4, r5
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	6025      	str	r5, [r4, #0]
 8004b68:	bf18      	it	ne
 8004b6a:	6059      	strne	r1, [r3, #4]
 8004b6c:	6863      	ldr	r3, [r4, #4]
 8004b6e:	bf08      	it	eq
 8004b70:	f8c8 1000 	streq.w	r1, [r8]
 8004b74:	5162      	str	r2, [r4, r5]
 8004b76:	604b      	str	r3, [r1, #4]
 8004b78:	4638      	mov	r0, r7
 8004b7a:	f104 060b 	add.w	r6, r4, #11
 8004b7e:	f000 f829 	bl	8004bd4 <__malloc_unlock>
 8004b82:	f026 0607 	bic.w	r6, r6, #7
 8004b86:	1d23      	adds	r3, r4, #4
 8004b88:	1af2      	subs	r2, r6, r3
 8004b8a:	d0ae      	beq.n	8004aea <_malloc_r+0x22>
 8004b8c:	1b9b      	subs	r3, r3, r6
 8004b8e:	50a3      	str	r3, [r4, r2]
 8004b90:	e7ab      	b.n	8004aea <_malloc_r+0x22>
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	6862      	ldr	r2, [r4, #4]
 8004b96:	d1dd      	bne.n	8004b54 <_malloc_r+0x8c>
 8004b98:	f8c8 2000 	str.w	r2, [r8]
 8004b9c:	e7ec      	b.n	8004b78 <_malloc_r+0xb0>
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	6864      	ldr	r4, [r4, #4]
 8004ba2:	e7ac      	b.n	8004afe <_malloc_r+0x36>
 8004ba4:	4634      	mov	r4, r6
 8004ba6:	6876      	ldr	r6, [r6, #4]
 8004ba8:	e7b4      	b.n	8004b14 <_malloc_r+0x4c>
 8004baa:	4613      	mov	r3, r2
 8004bac:	e7cc      	b.n	8004b48 <_malloc_r+0x80>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f000 f80e 	bl	8004bd4 <__malloc_unlock>
 8004bb8:	e797      	b.n	8004aea <_malloc_r+0x22>
 8004bba:	6025      	str	r5, [r4, #0]
 8004bbc:	e7dc      	b.n	8004b78 <_malloc_r+0xb0>
 8004bbe:	605b      	str	r3, [r3, #4]
 8004bc0:	deff      	udf	#255	; 0xff
 8004bc2:	bf00      	nop
 8004bc4:	2000032c 	.word	0x2000032c

08004bc8 <__malloc_lock>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	; (8004bd0 <__malloc_lock+0x8>)
 8004bca:	f7ff bf0f 	b.w	80049ec <__retarget_lock_acquire_recursive>
 8004bce:	bf00      	nop
 8004bd0:	20000328 	.word	0x20000328

08004bd4 <__malloc_unlock>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__malloc_unlock+0x8>)
 8004bd6:	f7ff bf0a 	b.w	80049ee <__retarget_lock_release_recursive>
 8004bda:	bf00      	nop
 8004bdc:	20000328 	.word	0x20000328

08004be0 <__ssputs_r>:
 8004be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	688e      	ldr	r6, [r1, #8]
 8004be6:	461f      	mov	r7, r3
 8004be8:	42be      	cmp	r6, r7
 8004bea:	680b      	ldr	r3, [r1, #0]
 8004bec:	4682      	mov	sl, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	4690      	mov	r8, r2
 8004bf2:	d82c      	bhi.n	8004c4e <__ssputs_r+0x6e>
 8004bf4:	898a      	ldrh	r2, [r1, #12]
 8004bf6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bfa:	d026      	beq.n	8004c4a <__ssputs_r+0x6a>
 8004bfc:	6965      	ldr	r5, [r4, #20]
 8004bfe:	6909      	ldr	r1, [r1, #16]
 8004c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c04:	eba3 0901 	sub.w	r9, r3, r1
 8004c08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c0c:	1c7b      	adds	r3, r7, #1
 8004c0e:	444b      	add	r3, r9
 8004c10:	106d      	asrs	r5, r5, #1
 8004c12:	429d      	cmp	r5, r3
 8004c14:	bf38      	it	cc
 8004c16:	461d      	movcc	r5, r3
 8004c18:	0553      	lsls	r3, r2, #21
 8004c1a:	d527      	bpl.n	8004c6c <__ssputs_r+0x8c>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	f7ff ff53 	bl	8004ac8 <_malloc_r>
 8004c22:	4606      	mov	r6, r0
 8004c24:	b360      	cbz	r0, 8004c80 <__ssputs_r+0xa0>
 8004c26:	6921      	ldr	r1, [r4, #16]
 8004c28:	464a      	mov	r2, r9
 8004c2a:	f000 faeb 	bl	8005204 <memcpy>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c38:	81a3      	strh	r3, [r4, #12]
 8004c3a:	6126      	str	r6, [r4, #16]
 8004c3c:	6165      	str	r5, [r4, #20]
 8004c3e:	444e      	add	r6, r9
 8004c40:	eba5 0509 	sub.w	r5, r5, r9
 8004c44:	6026      	str	r6, [r4, #0]
 8004c46:	60a5      	str	r5, [r4, #8]
 8004c48:	463e      	mov	r6, r7
 8004c4a:	42be      	cmp	r6, r7
 8004c4c:	d900      	bls.n	8004c50 <__ssputs_r+0x70>
 8004c4e:	463e      	mov	r6, r7
 8004c50:	6820      	ldr	r0, [r4, #0]
 8004c52:	4632      	mov	r2, r6
 8004c54:	4641      	mov	r1, r8
 8004c56:	f000 faab 	bl	80051b0 <memmove>
 8004c5a:	68a3      	ldr	r3, [r4, #8]
 8004c5c:	1b9b      	subs	r3, r3, r6
 8004c5e:	60a3      	str	r3, [r4, #8]
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	4433      	add	r3, r6
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	2000      	movs	r0, #0
 8004c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	f000 fad7 	bl	8005220 <_realloc_r>
 8004c72:	4606      	mov	r6, r0
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d1e0      	bne.n	8004c3a <__ssputs_r+0x5a>
 8004c78:	6921      	ldr	r1, [r4, #16]
 8004c7a:	4650      	mov	r0, sl
 8004c7c:	f7ff feb8 	bl	80049f0 <_free_r>
 8004c80:	230c      	movs	r3, #12
 8004c82:	f8ca 3000 	str.w	r3, [sl]
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c92:	e7e9      	b.n	8004c68 <__ssputs_r+0x88>

08004c94 <_svfiprintf_r>:
 8004c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c98:	4698      	mov	r8, r3
 8004c9a:	898b      	ldrh	r3, [r1, #12]
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	b09d      	sub	sp, #116	; 0x74
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	4614      	mov	r4, r2
 8004ca6:	d50e      	bpl.n	8004cc6 <_svfiprintf_r+0x32>
 8004ca8:	690b      	ldr	r3, [r1, #16]
 8004caa:	b963      	cbnz	r3, 8004cc6 <_svfiprintf_r+0x32>
 8004cac:	2140      	movs	r1, #64	; 0x40
 8004cae:	f7ff ff0b 	bl	8004ac8 <_malloc_r>
 8004cb2:	6028      	str	r0, [r5, #0]
 8004cb4:	6128      	str	r0, [r5, #16]
 8004cb6:	b920      	cbnz	r0, 8004cc2 <_svfiprintf_r+0x2e>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	e0d0      	b.n	8004e64 <_svfiprintf_r+0x1d0>
 8004cc2:	2340      	movs	r3, #64	; 0x40
 8004cc4:	616b      	str	r3, [r5, #20]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cca:	2320      	movs	r3, #32
 8004ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cd4:	2330      	movs	r3, #48	; 0x30
 8004cd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e7c <_svfiprintf_r+0x1e8>
 8004cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cde:	f04f 0901 	mov.w	r9, #1
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	469a      	mov	sl, r3
 8004ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cea:	b10a      	cbz	r2, 8004cf0 <_svfiprintf_r+0x5c>
 8004cec:	2a25      	cmp	r2, #37	; 0x25
 8004cee:	d1f9      	bne.n	8004ce4 <_svfiprintf_r+0x50>
 8004cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cf4:	d00b      	beq.n	8004d0e <_svfiprintf_r+0x7a>
 8004cf6:	465b      	mov	r3, fp
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	4629      	mov	r1, r5
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	f7ff ff6f 	bl	8004be0 <__ssputs_r>
 8004d02:	3001      	adds	r0, #1
 8004d04:	f000 80a9 	beq.w	8004e5a <_svfiprintf_r+0x1c6>
 8004d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d0a:	445a      	add	r2, fp
 8004d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80a1 	beq.w	8004e5a <_svfiprintf_r+0x1c6>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d22:	f10a 0a01 	add.w	sl, sl, #1
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	9307      	str	r3, [sp, #28]
 8004d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8004d30:	4654      	mov	r4, sl
 8004d32:	2205      	movs	r2, #5
 8004d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d38:	4850      	ldr	r0, [pc, #320]	; (8004e7c <_svfiprintf_r+0x1e8>)
 8004d3a:	f7fb fa79 	bl	8000230 <memchr>
 8004d3e:	9a04      	ldr	r2, [sp, #16]
 8004d40:	b9d8      	cbnz	r0, 8004d7a <_svfiprintf_r+0xe6>
 8004d42:	06d0      	lsls	r0, r2, #27
 8004d44:	bf44      	itt	mi
 8004d46:	2320      	movmi	r3, #32
 8004d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d4c:	0711      	lsls	r1, r2, #28
 8004d4e:	bf44      	itt	mi
 8004d50:	232b      	movmi	r3, #43	; 0x2b
 8004d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d56:	f89a 3000 	ldrb.w	r3, [sl]
 8004d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d5c:	d015      	beq.n	8004d8a <_svfiprintf_r+0xf6>
 8004d5e:	9a07      	ldr	r2, [sp, #28]
 8004d60:	4654      	mov	r4, sl
 8004d62:	2000      	movs	r0, #0
 8004d64:	f04f 0c0a 	mov.w	ip, #10
 8004d68:	4621      	mov	r1, r4
 8004d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d6e:	3b30      	subs	r3, #48	; 0x30
 8004d70:	2b09      	cmp	r3, #9
 8004d72:	d94d      	bls.n	8004e10 <_svfiprintf_r+0x17c>
 8004d74:	b1b0      	cbz	r0, 8004da4 <_svfiprintf_r+0x110>
 8004d76:	9207      	str	r2, [sp, #28]
 8004d78:	e014      	b.n	8004da4 <_svfiprintf_r+0x110>
 8004d7a:	eba0 0308 	sub.w	r3, r0, r8
 8004d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d82:	4313      	orrs	r3, r2
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	46a2      	mov	sl, r4
 8004d88:	e7d2      	b.n	8004d30 <_svfiprintf_r+0x9c>
 8004d8a:	9b03      	ldr	r3, [sp, #12]
 8004d8c:	1d19      	adds	r1, r3, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	9103      	str	r1, [sp, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bfbb      	ittet	lt
 8004d96:	425b      	neglt	r3, r3
 8004d98:	f042 0202 	orrlt.w	r2, r2, #2
 8004d9c:	9307      	strge	r3, [sp, #28]
 8004d9e:	9307      	strlt	r3, [sp, #28]
 8004da0:	bfb8      	it	lt
 8004da2:	9204      	strlt	r2, [sp, #16]
 8004da4:	7823      	ldrb	r3, [r4, #0]
 8004da6:	2b2e      	cmp	r3, #46	; 0x2e
 8004da8:	d10c      	bne.n	8004dc4 <_svfiprintf_r+0x130>
 8004daa:	7863      	ldrb	r3, [r4, #1]
 8004dac:	2b2a      	cmp	r3, #42	; 0x2a
 8004dae:	d134      	bne.n	8004e1a <_svfiprintf_r+0x186>
 8004db0:	9b03      	ldr	r3, [sp, #12]
 8004db2:	1d1a      	adds	r2, r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	9203      	str	r2, [sp, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bfb8      	it	lt
 8004dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004dc0:	3402      	adds	r4, #2
 8004dc2:	9305      	str	r3, [sp, #20]
 8004dc4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004e8c <_svfiprintf_r+0x1f8>
 8004dc8:	7821      	ldrb	r1, [r4, #0]
 8004dca:	2203      	movs	r2, #3
 8004dcc:	4650      	mov	r0, sl
 8004dce:	f7fb fa2f 	bl	8000230 <memchr>
 8004dd2:	b138      	cbz	r0, 8004de4 <_svfiprintf_r+0x150>
 8004dd4:	9b04      	ldr	r3, [sp, #16]
 8004dd6:	eba0 000a 	sub.w	r0, r0, sl
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	4082      	lsls	r2, r0
 8004dde:	4313      	orrs	r3, r2
 8004de0:	3401      	adds	r4, #1
 8004de2:	9304      	str	r3, [sp, #16]
 8004de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de8:	4825      	ldr	r0, [pc, #148]	; (8004e80 <_svfiprintf_r+0x1ec>)
 8004dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dee:	2206      	movs	r2, #6
 8004df0:	f7fb fa1e 	bl	8000230 <memchr>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d038      	beq.n	8004e6a <_svfiprintf_r+0x1d6>
 8004df8:	4b22      	ldr	r3, [pc, #136]	; (8004e84 <_svfiprintf_r+0x1f0>)
 8004dfa:	bb1b      	cbnz	r3, 8004e44 <_svfiprintf_r+0x1b0>
 8004dfc:	9b03      	ldr	r3, [sp, #12]
 8004dfe:	3307      	adds	r3, #7
 8004e00:	f023 0307 	bic.w	r3, r3, #7
 8004e04:	3308      	adds	r3, #8
 8004e06:	9303      	str	r3, [sp, #12]
 8004e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0a:	4433      	add	r3, r6
 8004e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0e:	e768      	b.n	8004ce2 <_svfiprintf_r+0x4e>
 8004e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e14:	460c      	mov	r4, r1
 8004e16:	2001      	movs	r0, #1
 8004e18:	e7a6      	b.n	8004d68 <_svfiprintf_r+0xd4>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	3401      	adds	r4, #1
 8004e1e:	9305      	str	r3, [sp, #20]
 8004e20:	4619      	mov	r1, r3
 8004e22:	f04f 0c0a 	mov.w	ip, #10
 8004e26:	4620      	mov	r0, r4
 8004e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e2c:	3a30      	subs	r2, #48	; 0x30
 8004e2e:	2a09      	cmp	r2, #9
 8004e30:	d903      	bls.n	8004e3a <_svfiprintf_r+0x1a6>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0c6      	beq.n	8004dc4 <_svfiprintf_r+0x130>
 8004e36:	9105      	str	r1, [sp, #20]
 8004e38:	e7c4      	b.n	8004dc4 <_svfiprintf_r+0x130>
 8004e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e3e:	4604      	mov	r4, r0
 8004e40:	2301      	movs	r3, #1
 8004e42:	e7f0      	b.n	8004e26 <_svfiprintf_r+0x192>
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	462a      	mov	r2, r5
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <_svfiprintf_r+0x1f4>)
 8004e4c:	a904      	add	r1, sp, #16
 8004e4e:	4638      	mov	r0, r7
 8004e50:	f3af 8000 	nop.w
 8004e54:	1c42      	adds	r2, r0, #1
 8004e56:	4606      	mov	r6, r0
 8004e58:	d1d6      	bne.n	8004e08 <_svfiprintf_r+0x174>
 8004e5a:	89ab      	ldrh	r3, [r5, #12]
 8004e5c:	065b      	lsls	r3, r3, #25
 8004e5e:	f53f af2d 	bmi.w	8004cbc <_svfiprintf_r+0x28>
 8004e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e64:	b01d      	add	sp, #116	; 0x74
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	ab03      	add	r3, sp, #12
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	462a      	mov	r2, r5
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <_svfiprintf_r+0x1f4>)
 8004e72:	a904      	add	r1, sp, #16
 8004e74:	4638      	mov	r0, r7
 8004e76:	f000 f879 	bl	8004f6c <_printf_i>
 8004e7a:	e7eb      	b.n	8004e54 <_svfiprintf_r+0x1c0>
 8004e7c:	08005384 	.word	0x08005384
 8004e80:	0800538e 	.word	0x0800538e
 8004e84:	00000000 	.word	0x00000000
 8004e88:	08004be1 	.word	0x08004be1
 8004e8c:	0800538a 	.word	0x0800538a

08004e90 <_printf_common>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	4616      	mov	r6, r2
 8004e96:	4699      	mov	r9, r3
 8004e98:	688a      	ldr	r2, [r1, #8]
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	bfb8      	it	lt
 8004ea4:	4613      	movlt	r3, r2
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eac:	4607      	mov	r7, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_printf_common+0x26>
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0699      	lsls	r1, r3, #26
 8004eba:	bf42      	ittt	mi
 8004ebc:	6833      	ldrmi	r3, [r6, #0]
 8004ebe:	3302      	addmi	r3, #2
 8004ec0:	6033      	strmi	r3, [r6, #0]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	f015 0506 	ands.w	r5, r5, #6
 8004ec8:	d106      	bne.n	8004ed8 <_printf_common+0x48>
 8004eca:	f104 0a19 	add.w	sl, r4, #25
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	6832      	ldr	r2, [r6, #0]
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	dc26      	bgt.n	8004f26 <_printf_common+0x96>
 8004ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004edc:	1e13      	subs	r3, r2, #0
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	bf18      	it	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	0692      	lsls	r2, r2, #26
 8004ee6:	d42b      	bmi.n	8004f40 <_printf_common+0xb0>
 8004ee8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eec:	4649      	mov	r1, r9
 8004eee:	4638      	mov	r0, r7
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d01e      	beq.n	8004f34 <_printf_common+0xa4>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	6922      	ldr	r2, [r4, #16]
 8004efa:	f003 0306 	and.w	r3, r3, #6
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	bf02      	ittt	eq
 8004f02:	68e5      	ldreq	r5, [r4, #12]
 8004f04:	6833      	ldreq	r3, [r6, #0]
 8004f06:	1aed      	subeq	r5, r5, r3
 8004f08:	68a3      	ldr	r3, [r4, #8]
 8004f0a:	bf0c      	ite	eq
 8004f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f10:	2500      	movne	r5, #0
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bfc4      	itt	gt
 8004f16:	1a9b      	subgt	r3, r3, r2
 8004f18:	18ed      	addgt	r5, r5, r3
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	341a      	adds	r4, #26
 8004f1e:	42b5      	cmp	r5, r6
 8004f20:	d11a      	bne.n	8004f58 <_printf_common+0xc8>
 8004f22:	2000      	movs	r0, #0
 8004f24:	e008      	b.n	8004f38 <_printf_common+0xa8>
 8004f26:	2301      	movs	r3, #1
 8004f28:	4652      	mov	r2, sl
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	47c0      	blx	r8
 8004f30:	3001      	adds	r0, #1
 8004f32:	d103      	bne.n	8004f3c <_printf_common+0xac>
 8004f34:	f04f 30ff 	mov.w	r0, #4294967295
 8004f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	e7c6      	b.n	8004ece <_printf_common+0x3e>
 8004f40:	18e1      	adds	r1, r4, r3
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	2030      	movs	r0, #48	; 0x30
 8004f46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f4a:	4422      	add	r2, r4
 8004f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f54:	3302      	adds	r3, #2
 8004f56:	e7c7      	b.n	8004ee8 <_printf_common+0x58>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4638      	mov	r0, r7
 8004f60:	47c0      	blx	r8
 8004f62:	3001      	adds	r0, #1
 8004f64:	d0e6      	beq.n	8004f34 <_printf_common+0xa4>
 8004f66:	3601      	adds	r6, #1
 8004f68:	e7d9      	b.n	8004f1e <_printf_common+0x8e>
	...

08004f6c <_printf_i>:
 8004f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f70:	7e0f      	ldrb	r7, [r1, #24]
 8004f72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f74:	2f78      	cmp	r7, #120	; 0x78
 8004f76:	4691      	mov	r9, r2
 8004f78:	4680      	mov	r8, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	469a      	mov	sl, r3
 8004f7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f82:	d807      	bhi.n	8004f94 <_printf_i+0x28>
 8004f84:	2f62      	cmp	r7, #98	; 0x62
 8004f86:	d80a      	bhi.n	8004f9e <_printf_i+0x32>
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	f000 80d4 	beq.w	8005136 <_printf_i+0x1ca>
 8004f8e:	2f58      	cmp	r7, #88	; 0x58
 8004f90:	f000 80c0 	beq.w	8005114 <_printf_i+0x1a8>
 8004f94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f9c:	e03a      	b.n	8005014 <_printf_i+0xa8>
 8004f9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fa2:	2b15      	cmp	r3, #21
 8004fa4:	d8f6      	bhi.n	8004f94 <_printf_i+0x28>
 8004fa6:	a101      	add	r1, pc, #4	; (adr r1, 8004fac <_printf_i+0x40>)
 8004fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08005019 	.word	0x08005019
 8004fb4:	08004f95 	.word	0x08004f95
 8004fb8:	08004f95 	.word	0x08004f95
 8004fbc:	08004f95 	.word	0x08004f95
 8004fc0:	08004f95 	.word	0x08004f95
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08004f95 	.word	0x08004f95
 8004fcc:	08004f95 	.word	0x08004f95
 8004fd0:	08004f95 	.word	0x08004f95
 8004fd4:	08004f95 	.word	0x08004f95
 8004fd8:	0800511d 	.word	0x0800511d
 8004fdc:	08005045 	.word	0x08005045
 8004fe0:	080050d7 	.word	0x080050d7
 8004fe4:	08004f95 	.word	0x08004f95
 8004fe8:	08004f95 	.word	0x08004f95
 8004fec:	0800513f 	.word	0x0800513f
 8004ff0:	08004f95 	.word	0x08004f95
 8004ff4:	08005045 	.word	0x08005045
 8004ff8:	08004f95 	.word	0x08004f95
 8004ffc:	08004f95 	.word	0x08004f95
 8005000:	080050df 	.word	0x080050df
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	1d1a      	adds	r2, r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	602a      	str	r2, [r5, #0]
 800500c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005010:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005014:	2301      	movs	r3, #1
 8005016:	e09f      	b.n	8005158 <_printf_i+0x1ec>
 8005018:	6820      	ldr	r0, [r4, #0]
 800501a:	682b      	ldr	r3, [r5, #0]
 800501c:	0607      	lsls	r7, r0, #24
 800501e:	f103 0104 	add.w	r1, r3, #4
 8005022:	6029      	str	r1, [r5, #0]
 8005024:	d501      	bpl.n	800502a <_printf_i+0xbe>
 8005026:	681e      	ldr	r6, [r3, #0]
 8005028:	e003      	b.n	8005032 <_printf_i+0xc6>
 800502a:	0646      	lsls	r6, r0, #25
 800502c:	d5fb      	bpl.n	8005026 <_printf_i+0xba>
 800502e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005032:	2e00      	cmp	r6, #0
 8005034:	da03      	bge.n	800503e <_printf_i+0xd2>
 8005036:	232d      	movs	r3, #45	; 0x2d
 8005038:	4276      	negs	r6, r6
 800503a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503e:	485a      	ldr	r0, [pc, #360]	; (80051a8 <_printf_i+0x23c>)
 8005040:	230a      	movs	r3, #10
 8005042:	e012      	b.n	800506a <_printf_i+0xfe>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	1d19      	adds	r1, r3, #4
 800504a:	6029      	str	r1, [r5, #0]
 800504c:	0605      	lsls	r5, r0, #24
 800504e:	d501      	bpl.n	8005054 <_printf_i+0xe8>
 8005050:	681e      	ldr	r6, [r3, #0]
 8005052:	e002      	b.n	800505a <_printf_i+0xee>
 8005054:	0641      	lsls	r1, r0, #25
 8005056:	d5fb      	bpl.n	8005050 <_printf_i+0xe4>
 8005058:	881e      	ldrh	r6, [r3, #0]
 800505a:	4853      	ldr	r0, [pc, #332]	; (80051a8 <_printf_i+0x23c>)
 800505c:	2f6f      	cmp	r7, #111	; 0x6f
 800505e:	bf0c      	ite	eq
 8005060:	2308      	moveq	r3, #8
 8005062:	230a      	movne	r3, #10
 8005064:	2100      	movs	r1, #0
 8005066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800506a:	6865      	ldr	r5, [r4, #4]
 800506c:	60a5      	str	r5, [r4, #8]
 800506e:	2d00      	cmp	r5, #0
 8005070:	bfa2      	ittt	ge
 8005072:	6821      	ldrge	r1, [r4, #0]
 8005074:	f021 0104 	bicge.w	r1, r1, #4
 8005078:	6021      	strge	r1, [r4, #0]
 800507a:	b90e      	cbnz	r6, 8005080 <_printf_i+0x114>
 800507c:	2d00      	cmp	r5, #0
 800507e:	d04b      	beq.n	8005118 <_printf_i+0x1ac>
 8005080:	4615      	mov	r5, r2
 8005082:	fbb6 f1f3 	udiv	r1, r6, r3
 8005086:	fb03 6711 	mls	r7, r3, r1, r6
 800508a:	5dc7      	ldrb	r7, [r0, r7]
 800508c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005090:	4637      	mov	r7, r6
 8005092:	42bb      	cmp	r3, r7
 8005094:	460e      	mov	r6, r1
 8005096:	d9f4      	bls.n	8005082 <_printf_i+0x116>
 8005098:	2b08      	cmp	r3, #8
 800509a:	d10b      	bne.n	80050b4 <_printf_i+0x148>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07de      	lsls	r6, r3, #31
 80050a0:	d508      	bpl.n	80050b4 <_printf_i+0x148>
 80050a2:	6923      	ldr	r3, [r4, #16]
 80050a4:	6861      	ldr	r1, [r4, #4]
 80050a6:	4299      	cmp	r1, r3
 80050a8:	bfde      	ittt	le
 80050aa:	2330      	movle	r3, #48	; 0x30
 80050ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050b4:	1b52      	subs	r2, r2, r5
 80050b6:	6122      	str	r2, [r4, #16]
 80050b8:	f8cd a000 	str.w	sl, [sp]
 80050bc:	464b      	mov	r3, r9
 80050be:	aa03      	add	r2, sp, #12
 80050c0:	4621      	mov	r1, r4
 80050c2:	4640      	mov	r0, r8
 80050c4:	f7ff fee4 	bl	8004e90 <_printf_common>
 80050c8:	3001      	adds	r0, #1
 80050ca:	d14a      	bne.n	8005162 <_printf_i+0x1f6>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	b004      	add	sp, #16
 80050d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	f043 0320 	orr.w	r3, r3, #32
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	4833      	ldr	r0, [pc, #204]	; (80051ac <_printf_i+0x240>)
 80050e0:	2778      	movs	r7, #120	; 0x78
 80050e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	6829      	ldr	r1, [r5, #0]
 80050ea:	061f      	lsls	r7, r3, #24
 80050ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80050f0:	d402      	bmi.n	80050f8 <_printf_i+0x18c>
 80050f2:	065f      	lsls	r7, r3, #25
 80050f4:	bf48      	it	mi
 80050f6:	b2b6      	uxthmi	r6, r6
 80050f8:	07df      	lsls	r7, r3, #31
 80050fa:	bf48      	it	mi
 80050fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005100:	6029      	str	r1, [r5, #0]
 8005102:	bf48      	it	mi
 8005104:	6023      	strmi	r3, [r4, #0]
 8005106:	b91e      	cbnz	r6, 8005110 <_printf_i+0x1a4>
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	f023 0320 	bic.w	r3, r3, #32
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	2310      	movs	r3, #16
 8005112:	e7a7      	b.n	8005064 <_printf_i+0xf8>
 8005114:	4824      	ldr	r0, [pc, #144]	; (80051a8 <_printf_i+0x23c>)
 8005116:	e7e4      	b.n	80050e2 <_printf_i+0x176>
 8005118:	4615      	mov	r5, r2
 800511a:	e7bd      	b.n	8005098 <_printf_i+0x12c>
 800511c:	682b      	ldr	r3, [r5, #0]
 800511e:	6826      	ldr	r6, [r4, #0]
 8005120:	6961      	ldr	r1, [r4, #20]
 8005122:	1d18      	adds	r0, r3, #4
 8005124:	6028      	str	r0, [r5, #0]
 8005126:	0635      	lsls	r5, r6, #24
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	d501      	bpl.n	8005130 <_printf_i+0x1c4>
 800512c:	6019      	str	r1, [r3, #0]
 800512e:	e002      	b.n	8005136 <_printf_i+0x1ca>
 8005130:	0670      	lsls	r0, r6, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0x1c0>
 8005134:	8019      	strh	r1, [r3, #0]
 8005136:	2300      	movs	r3, #0
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	4615      	mov	r5, r2
 800513c:	e7bc      	b.n	80050b8 <_printf_i+0x14c>
 800513e:	682b      	ldr	r3, [r5, #0]
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	602a      	str	r2, [r5, #0]
 8005144:	681d      	ldr	r5, [r3, #0]
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	2100      	movs	r1, #0
 800514a:	4628      	mov	r0, r5
 800514c:	f7fb f870 	bl	8000230 <memchr>
 8005150:	b108      	cbz	r0, 8005156 <_printf_i+0x1ea>
 8005152:	1b40      	subs	r0, r0, r5
 8005154:	6060      	str	r0, [r4, #4]
 8005156:	6863      	ldr	r3, [r4, #4]
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	2300      	movs	r3, #0
 800515c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005160:	e7aa      	b.n	80050b8 <_printf_i+0x14c>
 8005162:	6923      	ldr	r3, [r4, #16]
 8005164:	462a      	mov	r2, r5
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	47d0      	blx	sl
 800516c:	3001      	adds	r0, #1
 800516e:	d0ad      	beq.n	80050cc <_printf_i+0x160>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	079b      	lsls	r3, r3, #30
 8005174:	d413      	bmi.n	800519e <_printf_i+0x232>
 8005176:	68e0      	ldr	r0, [r4, #12]
 8005178:	9b03      	ldr	r3, [sp, #12]
 800517a:	4298      	cmp	r0, r3
 800517c:	bfb8      	it	lt
 800517e:	4618      	movlt	r0, r3
 8005180:	e7a6      	b.n	80050d0 <_printf_i+0x164>
 8005182:	2301      	movs	r3, #1
 8005184:	4632      	mov	r2, r6
 8005186:	4649      	mov	r1, r9
 8005188:	4640      	mov	r0, r8
 800518a:	47d0      	blx	sl
 800518c:	3001      	adds	r0, #1
 800518e:	d09d      	beq.n	80050cc <_printf_i+0x160>
 8005190:	3501      	adds	r5, #1
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	9903      	ldr	r1, [sp, #12]
 8005196:	1a5b      	subs	r3, r3, r1
 8005198:	42ab      	cmp	r3, r5
 800519a:	dcf2      	bgt.n	8005182 <_printf_i+0x216>
 800519c:	e7eb      	b.n	8005176 <_printf_i+0x20a>
 800519e:	2500      	movs	r5, #0
 80051a0:	f104 0619 	add.w	r6, r4, #25
 80051a4:	e7f5      	b.n	8005192 <_printf_i+0x226>
 80051a6:	bf00      	nop
 80051a8:	08005395 	.word	0x08005395
 80051ac:	080053a6 	.word	0x080053a6

080051b0 <memmove>:
 80051b0:	4288      	cmp	r0, r1
 80051b2:	b510      	push	{r4, lr}
 80051b4:	eb01 0402 	add.w	r4, r1, r2
 80051b8:	d902      	bls.n	80051c0 <memmove+0x10>
 80051ba:	4284      	cmp	r4, r0
 80051bc:	4623      	mov	r3, r4
 80051be:	d807      	bhi.n	80051d0 <memmove+0x20>
 80051c0:	1e43      	subs	r3, r0, #1
 80051c2:	42a1      	cmp	r1, r4
 80051c4:	d008      	beq.n	80051d8 <memmove+0x28>
 80051c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051ce:	e7f8      	b.n	80051c2 <memmove+0x12>
 80051d0:	4402      	add	r2, r0
 80051d2:	4601      	mov	r1, r0
 80051d4:	428a      	cmp	r2, r1
 80051d6:	d100      	bne.n	80051da <memmove+0x2a>
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051e2:	e7f7      	b.n	80051d4 <memmove+0x24>

080051e4 <_sbrk_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d06      	ldr	r5, [pc, #24]	; (8005200 <_sbrk_r+0x1c>)
 80051e8:	2300      	movs	r3, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	f7fb ff42 	bl	8001078 <_sbrk>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_sbrk_r+0x1a>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_sbrk_r+0x1a>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	20000324 	.word	0x20000324

08005204 <memcpy>:
 8005204:	440a      	add	r2, r1
 8005206:	4291      	cmp	r1, r2
 8005208:	f100 33ff 	add.w	r3, r0, #4294967295
 800520c:	d100      	bne.n	8005210 <memcpy+0xc>
 800520e:	4770      	bx	lr
 8005210:	b510      	push	{r4, lr}
 8005212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800521a:	4291      	cmp	r1, r2
 800521c:	d1f9      	bne.n	8005212 <memcpy+0xe>
 800521e:	bd10      	pop	{r4, pc}

08005220 <_realloc_r>:
 8005220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005224:	4680      	mov	r8, r0
 8005226:	4614      	mov	r4, r2
 8005228:	460e      	mov	r6, r1
 800522a:	b921      	cbnz	r1, 8005236 <_realloc_r+0x16>
 800522c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005230:	4611      	mov	r1, r2
 8005232:	f7ff bc49 	b.w	8004ac8 <_malloc_r>
 8005236:	b92a      	cbnz	r2, 8005244 <_realloc_r+0x24>
 8005238:	f7ff fbda 	bl	80049f0 <_free_r>
 800523c:	4625      	mov	r5, r4
 800523e:	4628      	mov	r0, r5
 8005240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005244:	f000 f81b 	bl	800527e <_malloc_usable_size_r>
 8005248:	4284      	cmp	r4, r0
 800524a:	4607      	mov	r7, r0
 800524c:	d802      	bhi.n	8005254 <_realloc_r+0x34>
 800524e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005252:	d812      	bhi.n	800527a <_realloc_r+0x5a>
 8005254:	4621      	mov	r1, r4
 8005256:	4640      	mov	r0, r8
 8005258:	f7ff fc36 	bl	8004ac8 <_malloc_r>
 800525c:	4605      	mov	r5, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	d0ed      	beq.n	800523e <_realloc_r+0x1e>
 8005262:	42bc      	cmp	r4, r7
 8005264:	4622      	mov	r2, r4
 8005266:	4631      	mov	r1, r6
 8005268:	bf28      	it	cs
 800526a:	463a      	movcs	r2, r7
 800526c:	f7ff ffca 	bl	8005204 <memcpy>
 8005270:	4631      	mov	r1, r6
 8005272:	4640      	mov	r0, r8
 8005274:	f7ff fbbc 	bl	80049f0 <_free_r>
 8005278:	e7e1      	b.n	800523e <_realloc_r+0x1e>
 800527a:	4635      	mov	r5, r6
 800527c:	e7df      	b.n	800523e <_realloc_r+0x1e>

0800527e <_malloc_usable_size_r>:
 800527e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005282:	1f18      	subs	r0, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	bfbc      	itt	lt
 8005288:	580b      	ldrlt	r3, [r1, r0]
 800528a:	18c0      	addlt	r0, r0, r3
 800528c:	4770      	bx	lr
	...

08005290 <_init>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr

0800529c <_fini>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr
